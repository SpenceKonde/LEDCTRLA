
C:\Users\Spence\AppData\Local\Temp\arduino_build_937005/DriftAnimate_V2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000200 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
     200:	e5 c3       	rjmp	.+1994   	; 0x9cc <__ctors_end>
     202:	00 00       	nop
../../../../crt1/gcrt1.S:67
     204:	0d c4       	rjmp	.+2074   	; 0xa20 <__bad_interrupt>
     206:	00 00       	nop
../../../../crt1/gcrt1.S:68
     208:	0b c4       	rjmp	.+2070   	; 0xa20 <__bad_interrupt>
     20a:	00 00       	nop
../../../../crt1/gcrt1.S:69
     20c:	09 c4       	rjmp	.+2066   	; 0xa20 <__bad_interrupt>
     20e:	00 00       	nop
../../../../crt1/gcrt1.S:70
     210:	07 c4       	rjmp	.+2062   	; 0xa20 <__bad_interrupt>
     212:	00 00       	nop
../../../../crt1/gcrt1.S:71
     214:	05 c4       	rjmp	.+2058   	; 0xa20 <__bad_interrupt>
     216:	00 00       	nop
../../../../crt1/gcrt1.S:72
     218:	03 c4       	rjmp	.+2054   	; 0xa20 <__bad_interrupt>
     21a:	00 00       	nop
../../../../crt1/gcrt1.S:73
     21c:	01 c4       	rjmp	.+2050   	; 0xa20 <__bad_interrupt>
     21e:	00 00       	nop
../../../../crt1/gcrt1.S:74
     220:	ff c3       	rjmp	.+2046   	; 0xa20 <__bad_interrupt>
     222:	00 00       	nop
../../../../crt1/gcrt1.S:75
     224:	fd c3       	rjmp	.+2042   	; 0xa20 <__bad_interrupt>
     226:	00 00       	nop
../../../../crt1/gcrt1.S:76
     228:	fb c3       	rjmp	.+2038   	; 0xa20 <__bad_interrupt>
     22a:	00 00       	nop
../../../../crt1/gcrt1.S:77
     22c:	f9 c3       	rjmp	.+2034   	; 0xa20 <__bad_interrupt>
     22e:	00 00       	nop
../../../../crt1/gcrt1.S:78
     230:	f7 c3       	rjmp	.+2030   	; 0xa20 <__bad_interrupt>
     232:	00 00       	nop
../../../../crt1/gcrt1.S:79
     234:	f5 c3       	rjmp	.+2026   	; 0xa20 <__bad_interrupt>
     236:	00 00       	nop
../../../../crt1/gcrt1.S:80
     238:	f3 c3       	rjmp	.+2022   	; 0xa20 <__bad_interrupt>
     23a:	00 00       	nop
../../../../crt1/gcrt1.S:81
     23c:	f1 c3       	rjmp	.+2018   	; 0xa20 <__bad_interrupt>
     23e:	00 00       	nop
../../../../crt1/gcrt1.S:82
     240:	ef c3       	rjmp	.+2014   	; 0xa20 <__bad_interrupt>
     242:	00 00       	nop
../../../../crt1/gcrt1.S:83
     244:	ed c3       	rjmp	.+2010   	; 0xa20 <__bad_interrupt>
     246:	00 00       	nop
../../../../crt1/gcrt1.S:84
     248:	eb c3       	rjmp	.+2006   	; 0xa20 <__bad_interrupt>
     24a:	00 00       	nop
../../../../crt1/gcrt1.S:85
     24c:	e9 c3       	rjmp	.+2002   	; 0xa20 <__bad_interrupt>
     24e:	00 00       	nop
../../../../crt1/gcrt1.S:86
     250:	e7 c3       	rjmp	.+1998   	; 0xa20 <__bad_interrupt>
     252:	00 00       	nop
../../../../crt1/gcrt1.S:87
     254:	0c 94 07 12 	jmp	0x240e	; 0x240e <__vector_21>
../../../../crt1/gcrt1.S:88
     258:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__vector_22>
../../../../crt1/gcrt1.S:89
     25c:	e1 c3       	rjmp	.+1986   	; 0xa20 <__bad_interrupt>
     25e:	00 00       	nop
../../../../crt1/gcrt1.S:90
     260:	df c3       	rjmp	.+1982   	; 0xa20 <__bad_interrupt>
     262:	00 00       	nop
../../../../crt1/gcrt1.S:91
     264:	dd c3       	rjmp	.+1978   	; 0xa20 <__bad_interrupt>
     266:	00 00       	nop
../../../../crt1/gcrt1.S:92
     268:	db c3       	rjmp	.+1974   	; 0xa20 <__bad_interrupt>
     26a:	00 00       	nop
../../../../crt1/gcrt1.S:93
     26c:	d9 c3       	rjmp	.+1970   	; 0xa20 <__bad_interrupt>
     26e:	00 00       	nop
../../../../crt1/gcrt1.S:94
     270:	d7 c3       	rjmp	.+1966   	; 0xa20 <__bad_interrupt>
     272:	00 00       	nop
../../../../crt1/gcrt1.S:95
     274:	d5 c3       	rjmp	.+1962   	; 0xa20 <__bad_interrupt>
     276:	00 00       	nop
../../../../crt1/gcrt1.S:96
     278:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__vector_30>
../../../../crt1/gcrt1.S:97
     27c:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__vector_31>
../../../../crt1/gcrt1.S:98
     280:	cf c3       	rjmp	.+1950   	; 0xa20 <__bad_interrupt>
     282:	00 00       	nop
../../../../crt1/gcrt1.S:99
     284:	cd c3       	rjmp	.+1946   	; 0xa20 <__bad_interrupt>
     286:	00 00       	nop
../../../../crt1/gcrt1.S:100
     288:	cb c3       	rjmp	.+1942   	; 0xa20 <__bad_interrupt>
     28a:	00 00       	nop
../../../../crt1/gcrt1.S:101
     28c:	c9 c3       	rjmp	.+1938   	; 0xa20 <__bad_interrupt>
     28e:	00 00       	nop
../../../../crt1/gcrt1.S:102
     290:	c7 c3       	rjmp	.+1934   	; 0xa20 <__bad_interrupt>
     292:	00 00       	nop
../../../../crt1/gcrt1.S:103
     294:	c5 c3       	rjmp	.+1930   	; 0xa20 <__bad_interrupt>
     296:	00 00       	nop
../../../../crt1/gcrt1.S:104
     298:	c3 c3       	rjmp	.+1926   	; 0xa20 <__bad_interrupt>
     29a:	00 00       	nop
../../../../crt1/gcrt1.S:105
     29c:	c1 c3       	rjmp	.+1922   	; 0xa20 <__bad_interrupt>
     29e:	00 00       	nop
../../../../crt1/gcrt1.S:106
     2a0:	bf c3       	rjmp	.+1918   	; 0xa20 <__bad_interrupt>
     2a2:	00 00       	nop
../../../../crt1/gcrt1.S:107
     2a4:	bd c3       	rjmp	.+1914   	; 0xa20 <__bad_interrupt>
     2a6:	00 00       	nop
../../../../crt1/gcrt1.S:108
     2a8:	bb c3       	rjmp	.+1910   	; 0xa20 <__bad_interrupt>
     2aa:	00 00       	nop
../../../../crt1/gcrt1.S:109
     2ac:	b9 c3       	rjmp	.+1906   	; 0xa20 <__bad_interrupt>
     2ae:	00 00       	nop
../../../../crt1/gcrt1.S:110
     2b0:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__vector_44>
../../../../crt1/gcrt1.S:111
     2b4:	b5 c3       	rjmp	.+1898   	; 0xa20 <__bad_interrupt>
     2b6:	00 00       	nop
../../../../crt1/gcrt1.S:112
     2b8:	b3 c3       	rjmp	.+1894   	; 0xa20 <__bad_interrupt>
     2ba:	00 00       	nop
../../../../crt1/gcrt1.S:113
     2bc:	b1 c3       	rjmp	.+1890   	; 0xa20 <__bad_interrupt>
     2be:	00 00       	nop
../../../../crt1/gcrt1.S:114
     2c0:	af c3       	rjmp	.+1886   	; 0xa20 <__bad_interrupt>
     2c2:	00 00       	nop
../../../../crt1/gcrt1.S:115
     2c4:	ad c3       	rjmp	.+1882   	; 0xa20 <__bad_interrupt>
     2c6:	00 00       	nop
../../../../crt1/gcrt1.S:116
     2c8:	ab c3       	rjmp	.+1878   	; 0xa20 <__bad_interrupt>
     2ca:	00 00       	nop
../../../../crt1/gcrt1.S:117
     2cc:	a9 c3       	rjmp	.+1874   	; 0xa20 <__bad_interrupt>
     2ce:	00 00       	nop
../../../../crt1/gcrt1.S:118
     2d0:	a7 c3       	rjmp	.+1870   	; 0xa20 <__bad_interrupt>
     2d2:	00 00       	nop
../../../../crt1/gcrt1.S:119
     2d4:	a5 c3       	rjmp	.+1866   	; 0xa20 <__bad_interrupt>
     2d6:	00 00       	nop
../../../../crt1/gcrt1.S:120
     2d8:	a3 c3       	rjmp	.+1862   	; 0xa20 <__bad_interrupt>
     2da:	00 00       	nop
../../../../crt1/gcrt1.S:121
     2dc:	a1 c3       	rjmp	.+1858   	; 0xa20 <__bad_interrupt>
     2de:	00 00       	nop
../../../../crt1/gcrt1.S:122
     2e0:	9f c3       	rjmp	.+1854   	; 0xa20 <__bad_interrupt>
     2e2:	00 00       	nop
../../../../crt1/gcrt1.S:123
     2e4:	9d c3       	rjmp	.+1850   	; 0xa20 <__bad_interrupt>
     2e6:	00 00       	nop
../../../../crt1/gcrt1.S:124
     2e8:	9b c3       	rjmp	.+1846   	; 0xa20 <__bad_interrupt>
     2ea:	00 00       	nop
../../../../crt1/gcrt1.S:125
     2ec:	99 c3       	rjmp	.+1842   	; 0xa20 <__bad_interrupt>
     2ee:	00 00       	nop
../../../../crt1/gcrt1.S:126
     2f0:	97 c3       	rjmp	.+1838   	; 0xa20 <__bad_interrupt>
	...

000002f4 <__trampolines_end>:
__trampolines_start():
     2f4:	20 44       	sbci	r18, 0x40	; 64
     2f6:	52 49       	sbci	r21, 0x92	; 146
     2f8:	46 54       	subi	r20, 0x46	; 70
     2fa:	32 20       	and	r3, r2
	...

000002fd <mode9Name>:
     2fd:	20 46 41 44 45 32 20 20 00                           FADE2  .

00000306 <mode8Name>:
     306:	20 44 4f 54 53 32 20 20 00                           DOTS2  .

0000030f <mode7Name>:
     30f:	20 20 57 41 56 45 20 20 00                            WAVE  .

00000318 <mode6Name>:
     318:	20 20 46 41 44 45 20 20 00                            FADE  .

00000321 <mode5Name>:
     321:	20 20 44 4f 54 53 20 20 00                            DOTS  .

0000032a <mode4Name>:
     32a:	20 52 41 49 4e 42 4f 57 00                           RAINBOW.

00000333 <mode3Name>:
     333:	20 50 55 4c 53 45 20 20 00                           PULSE  .

0000033c <mode2Name>:
     33c:	20 43 4f 4d 45 54 53 20 00                           COMETS .

00000345 <mode1Name>:
     345:	44 52 49 46 54 49 4e 47 00                          DRIFTING.

0000034e <mode0Name>:
     34e:	20 53 4f 4c 49 44 20 20 00                           SOLID  .

00000357 <mode7R2>:
     357:	20 44 57 45 4c 4c 20 00                              DWELL .

0000035f <mode4R2>:
     35f:	20 44 49 52 45 43 54 00                              DIRECT.

00000367 <mode5R1>:
     367:	44 45 4e 53 49 54 59 00                             DENSITY.

0000036f <mode2R2>:
     36f:	20 4c 45 4e 47 54 48 00                              LENGTH.

00000377 <mode1R1>:
     377:	20 4e 55 4d 42 45 52 00                              NUMBER.

0000037f <mode1R0>:
     37f:	20 53 50 45 45 44 20 00                              SPEED .

00000387 <pallete10>:
     387:	53 54 41 54 49 43 20 00                             STATIC .

0000038f <pallete9>:
     38f:	50 55 52 50 4c 45 20 00                             PURPLE .

00000397 <pallete8>:
     397:	50 55 4d 50 4b 49 4e 00                             PUMPKIN.

0000039f <pallete7>:
     39f:	4a 55 4e 47 4c 45 20 00                             JUNGLE .

000003a7 <pallete6>:
     3a7:	20 20 46 49 52 45 20 00                               FIRE .

000003af <pallete5>:
     3af:	53 45 58 54 49 4d 45 00                             SEXTIME.

000003b7 <pallete4>:
     3b7:	4c 49 5a 41 52 44 20 00                             LIZARD .

000003bf <pallete3>:
     3bf:	53 55 4e 53 45 54 20 00                             SUNSET .

000003c7 <pallete2>:
     3c7:	20 20 43 4f 4f 4c 20 00                               COOL .

000003cf <pallete1>:
     3cf:	20 20 57 41 52 4d 20 00                               WARM .

000003d7 <pallete0>:
     3d7:	52 41 49 4e 42 4f 57 00                             RAINBOW.

000003df <mode0R0>:
     3df:	20 20 20 20 20 20 20 00                                    .

000003e7 <mode1L5>:
     3e7:	4d 41 58 20 42 4c 55 00                             MAX BLU.

000003ef <mode1L4>:
     3ef:	4d 49 4e 20 42 4c 55 00                             MIN BLU.

000003f7 <mode1L3>:
     3f7:	4d 41 58 20 47 52 4e 00                             MAX GRN.

000003ff <mode1L2>:
     3ff:	4d 49 4e 20 47 52 4e 00                             MIN GRN.

00000407 <mode1L1>:
     407:	4d 41 58 20 52 45 44 00                             MAX RED.

0000040f <mode1L0>:
     40f:	4d 49 4e 20 52 45 44 00                             MIN RED.

00000417 <mode0L2>:
     417:	20 20 42 4c 55 45 20 00                               BLUE .

0000041f <mode0L1>:
     41f:	20 47 52 45 45 4e 20 00                              GREEN .

00000427 <mode0L0>:
     427:	20 20 52 45 44 20 20 00                               RED  .

0000042f <defaultValueRight>:
	...
     437:	05 00 00 00 00 00 00 00 0a 0a 05 00 00 00 00 00     ................
     447:	05 05 00 00 00 00 00 00 05 0a 00 00 00 00 00 00     ................
     457:	05 0a 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
     467:	05 14 02 00 00 00 00 00 05 0a 00 00 00 00 00 00     ................
     477:	05 0a 02 00 00 00 00 00 05 0a 02 00 00 00 00 00     ................

00000487 <defaultValueLeft>:
     487:	ff ff ff 00 00 00 00 00 00 1f 00 1f 00 1f 00 00     ................
     497:	00 1f 00 1f 00 1f 00 00 00 1f 00 1f 00 1f 00 00     ................
	...
     4af:	00 1f 00 1f 00 1f 00 00 ff ff ff ff ff ff 00 00     ................
	...

000004df <getModeRatio(unsigned int)::__c>:
     4df:	45 52 52 4f 52 3a 20 72 61 74 69 6f 20 6f 75 74     ERROR: ratio out
     4ef:	20 6f 66 20 72 61 6e 67 65 00                        of range.

000004f9 <leftValues>:
     4f9:	00 01 02 03 04 06 08 0b 0e 12 16 1b 21 27 2e 36     ............!'.6
     509:	3f 49 54 5f 6a 75 80 8b 97 a3 b0 bd cc dc ed ff     ?IT_ju..........

00000519 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)::__c>:
     519:	45 52 52 4f 52 3a 20 72 61 74 69 6f 20 6f 75 74     ERROR: ratio out
     529:	20 6f 66 20 72 61 6e 67 65 00                        of range.

00000533 <colorPallete>:
     533:	ff 00 00 00 ff 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
     54b:	ff 60 20 ff 64 00 f0 80 28 ff 20 00 00 00 00 00     .` .d...(. .....
	...
     563:	ff 00 40 00 40 ff 00 d2 a0 a0 00 a0 00 00 00 00     ..@.@...........
	...
     57b:	ff 50 14 ff 64 00 c4 10 40 a0 00 40 ff 20 00 00     .P..d...@..@. ..
	...
     593:	00 ff 00 00 80 10 00 20 00 40 a0 00 00 00 00 00     ....... .@......
	...
     5ab:	ff 00 10 c4 00 40 ff 10 64 ff 00 40 00 00 00 00     .....@..d..@....
	...
     5c3:	ff 40 00 c4 20 00 dc 40 00 ff 10 00 00 00 00 00     .@.. ..@........
	...
     5db:	00 ff 00 20 ff 00 00 ff 20 20 ff 20 00 00 00 00     ... ....  . ....
	...
     5f3:	ff 40 00 c4 20 00 dc 40 00 20 ff 00 00 00 00 00     .@.. ..@. ......
	...
     60b:	c0 00 60 c4 00 40 ff 10 64 ff 00 40 00 00 00 00     ..`..@..d..@....
	...
     623:	a0 a0 8c e4 e4 c8 80 80 6e 3c 3c 32 00 00 00 00     ........n<<2....
	...

0000063b <maxValueLeft>:
     63b:	1f 1f 1f 00 00 00 00 00 1f 1f 1f 1f 1f 1f 00 00     ................
     64b:	1f 1f 1f 1f 1f 1f 00 00 1f 1f 1f 1f 1f 1f 00 00     ................
	...
     663:	1f 1f 1f 1f 1f 1f 00 00 1f 1f 1f 1f 1f 1f 00 00     ................
     673:	0a 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00     ................
     683:	0a 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00     ................

00000693 <__vector_30::enc_states>:
     693:	00 01 ff 00 ff 00 00 01 01 00 00 ff 00 ff 01 00     ................

000006a3 <setup::__c>:
     6a3:	4e 6f 74 68 69 6e 67 20 77 6f 72 6b 73 21 00        Nothing works!.

000006b2 <setup::__c>:
     6b2:	57 6f 61 68 2c 20 49 27 6d 20 6f 6e 20 61 20 44     Woah, I'm on a D
     6c2:	42 21 00                                            B!.

000006c5 <processRFPacket(unsigned char)::__c>:
     6c5:	52 45 4d 4f 54 45 20 4f 56 45 52 52 49 44 45 00     REMOTE OVERRIDE.

000006d5 <handleUI()::__c>:
     6d5:	4d 6f 64 65 20 53 61 76 65 64 00                    Mode Saved.

000006e0 <handleUI()::__c>:
     6e0:	63 6c 65 61 72 65 64 00                             cleared.

000006e8 <handleUI()::__c>:
     6e8:	53 61 76 65 64 20 6d 6f 64 65 00                    Saved mode.

000006f3 <doAttractLCD()::__c>:
     6f3:	41 44 4a 55 53 54 20 4c 49 47 48 54 49 4e 47 00     ADJUST LIGHTING.

00000703 <doAttractLCD()::__c>:
     703:	54 55 52 4e 20 4d 59 20 4b 4e 4f 42 53 20 3b 29     TURN MY KNOBS ;)
	...

00000714 <doAttractLCD()::__c>:
     714:	55 53 45 20 4b 4e 4f 42 53 26 42 55 54 54 4f 4e     USE KNOBS&BUTTON
	...

00000725 <doAttractLCD()::__c>:
     725:	50 4c 41 59 20 57 49 54 48 20 4d 45 00              PLAY WITH ME.

00000732 <doAttractLCD()::__c>:
     732:	20 7e 48 41 4c 4c 4f 57 45 45 4b 45 4e 44 00         ~HALLOWEEKEND.

00000741 <doAttractLCD()::__c>:
     741:	43 61 62 69 6e 20 57 65 65 6b 65 6e 64 20 56 49     Cabin Weekend VI
	...

00000752 <doAttractLCD()::__c>:
     752:	4c 65 74 27 73 20 67 65 74 20 77 65 69 72 64 21     Let's get weird!
	...

00000763 <doAttractLCD()::__c>:
     763:	54 52 49 43 4b 20 4f 52 20 54 52 45 41 54 21 00     TRICK OR TREAT!.

00000773 <handleLCD()::__c>:
     773:	46 57 44 00                                         FWD.

00000777 <handleLCD()::__c>:
     777:	52 45 56 00                                         REV.

0000077b <modeNames>:
     77b:	4e 03 45 03 3c 03 33 03 2a 03 21 03 18 03 0f 03     N.E.<.3.*.!.....
     78b:	06 03 fd 02 f4 02                                   ......

00000791 <handleLCD()::__c>:
     791:	20 20 20 20 00                                          .

00000796 <maxSetting>:
     796:	02 00 05 00 05 02 05 01 ff 02 05 02 05 00 00 03     ................
     7a6:	00 02 00 03 00 02                                   ......

000007ac <handleLCD()::__c>:
     7ac:	20 20 20 20 00                                          .

000007b1 <modesR>:
     7b1:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     7c1:	7f 03 77 03 00 00 00 00 00 00 00 00 00 00 00 00     ..w.............
     7d1:	7f 03 77 03 6f 03 00 00 00 00 00 00 00 00 00 00     ..w.o...........
     7e1:	7f 03 67 03 00 00 00 00 00 00 00 00 00 00 00 00     ..g.............
     7f1:	7f 03 6f 03 5f 03 00 00 00 00 00 00 00 00 00 00     ..o._...........
     801:	7f 03 67 03 5f 03 00 00 00 00 00 00 00 00 00 00     ..g._...........
     811:	7f 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     821:	7f 03 6f 03 57 03 5f 03 00 00 00 00 00 00 00 00     ..o.W._.........
     831:	7f 03 67 03 5f 03 00 00 00 00 00 00 00 00 00 00     ..g._...........
     841:	7f 03 6f 03 57 03 5f 03 00 00 00 00 00 00 00 00     ..o.W._.........
     851:	7f 03 6f 03 57 03 00 00 00 00 00 00 00 00 00 00     ..o.W...........

00000861 <palleteNames>:
     861:	d7 03 cf 03 c7 03 bf 03 b7 03 af 03 a7 03 9f 03     ................
     871:	97 03 8f 03 87 03                                   ......

00000877 <modesL>:
     877:	27 04 1f 04 17 04 00 00 00 00 00 00 00 00 00 00     '...............
     887:	0f 04 07 04 ff 03 f7 03 ef 03 e7 03 00 00 00 00     ................
     897:	0f 04 07 04 ff 03 f7 03 ef 03 e7 03 00 00 00 00     ................
     8a7:	0f 04 07 04 ff 03 f7 03 ef 03 e7 03 00 00 00 00     ................
     8b7:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8c7:	0f 04 07 04 ff 03 f7 03 ef 03 e7 03 00 00 00 00     ................
     8d7:	0f 04 ff 03 ef 03 07 04 f7 03 e7 03 00 00 00 00     ................
     8e7:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8f7:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     907:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     917:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00000927 <maxValueRight>:
	...
     92f:	0a 00 00 00 00 00 00 00 0a 0a 0a 00 00 00 00 00     ................
     93f:	0a 14 00 00 00 00 00 00 0a 0a 01 00 00 00 00 00     ................
     94f:	0a 0c 01 00 00 00 00 00 0a 00 00 00 00 00 00 00     ................
     95f:	0a 28 14 01 00 00 00 00 0a 0c 01 00 00 00 00 00     .(..............
     96f:	0a 14 14 01 00 00 00 00 0a 14 14 00 00 00 00 00     ................

0000097f <pulseBrightnessTable>:
     97f:	00 01 02 03 04 05 06 07 08 09 0a 0c 0e 10 12 14     ................
     98f:	16 18 1a 1c 1f 22 25 28 2b 2e 31 34 37 3b 3f 43     ....."%(+.147;?C
     99f:	47 4b 4f 53 57 5c 61 66 6b 70 75 7a 7f 85 8b 91     GKOSW\afkpuz....
     9af:	97 9d a3 a9 af b6 bd c4 cb d2 d9 e0 e7 ef f7 ff     ................

000009bf <colorCount>:
     9bf:	03 04 04 05 04 04 04 04 04 04 04                    ...........

000009ca <__ctors_start>:
__ctors_start():
     9ca:	2f 14       	cp	r2, r15

000009cc <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     9cc:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     9ce:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     9d0:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     9d2:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     9d4:	df e7       	ldi	r29, 0x7F	; 127
../../../../crt1/gcrt1.S:237
     9d6:	de bf       	out	0x3e, r29	; 62

000009d8 <_initThreeStuff()>:
__do_copy_data():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     9d8:	11 e4       	ldi	r17, 0x41	; 65
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     9da:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     9dc:	b0 e4       	ldi	r27, 0x40	; 64
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     9de:	e4 e5       	ldi	r30, 0x54	; 84
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     9e0:	f5 e4       	ldi	r31, 0x45	; 69
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     9e2:	00 e0       	ldi	r16, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     9e4:	0b bf       	out	0x3b, r16	; 59
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <_initThreeStuff()+0x14>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     9e8:	07 90       	elpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     9ea:	0d 92       	st	X+, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     9ec:	ac 33       	cpi	r26, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     9ee:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     9f0:	d9 f7       	brne	.-10     	; 0x9e8 <_initThreeStuff()+0x10>

000009f2 <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     9f2:	27 e4       	ldi	r18, 0x47	; 71
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     9f4:	ac e3       	ldi	r26, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     9f6:	b1 e4       	ldi	r27, 0x41	; 65
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <.do_clear_bss_start>

000009fa <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     9fa:	1d 92       	st	X+, r1

000009fc <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     9fc:	a2 35       	cpi	r26, 0x52	; 82
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     9fe:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     a00:	e1 f7       	brne	.-8      	; 0x9fa <.do_clear_bss_loop>

00000a02 <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     a02:	14 e0       	ldi	r17, 0x04	; 4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     a04:	c6 ee       	ldi	r28, 0xE6	; 230
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     a06:	d4 e0       	ldi	r29, 0x04	; 4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     a08:	04 c0       	rjmp	.+8      	; 0xa12 <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     a0a:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     a0c:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     a0e:	0e 94 9b 22 	call	0x4536	; 0x4536 <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     a12:	c5 3e       	cpi	r28, 0xE5	; 229
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     a14:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     a16:	c9 f7       	brne	.-14     	; 0xa0a <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     a18:	0e 94 ba 14 	call	0x2974	; 0x2974 <main>
../../../../crt1/gcrt1.S:315
     a1c:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <_exit>

00000a20 <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     a20:	ef cb       	rjmp	.-2082   	; 0x200 <__vectors>

00000a22 <Print::print(char)>:
print():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/main.cpp:197
  // Finally, none of thwse three things need to be done if running optiboot!
  // We want the vectors in the alt location, it checks, clears, and stashes the reswet flags (in GPR0)
  // and it providews the entrypoint we call to write to flash.
#else
  void _initThreeStuff() __attribute__ ((naked)) __attribute__((used)) __attribute__ ((section (".init3")));
  void _initThreeStuff() {
     a22:	dc 01       	movw	r26, r24
     a24:	ed 91       	ld	r30, X+
     a26:	fc 91       	ld	r31, X
     a28:	01 90       	ld	r0, Z+
     a2a:	f0 81       	ld	r31, Z
     a2c:	e0 2d       	mov	r30, r0
     a2e:	09 94       	ijmp

00000a30 <Print::print(__FlashStringHelper const*)>:
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	8c 01       	movw	r16, r24
     a3e:	7b 01       	movw	r14, r22
     a40:	d0 e0       	ldi	r29, 0x00	; 0
     a42:	c0 e0       	ldi	r28, 0x00	; 0
     a44:	f7 01       	movw	r30, r14
     a46:	ec 0f       	add	r30, r28
     a48:	fd 1f       	adc	r31, r29
     a4a:	64 91       	lpm	r22, Z
     a4c:	66 23       	and	r22, r22
     a4e:	61 f0       	breq	.+24     	; 0xa68 <Print::print(__FlashStringHelper const*)+0x38>
     a50:	d8 01       	movw	r26, r16
     a52:	ed 91       	ld	r30, X+
     a54:	fc 91       	ld	r31, X
     a56:	01 90       	ld	r0, Z+
     a58:	f0 81       	ld	r31, Z
     a5a:	e0 2d       	mov	r30, r0
     a5c:	c8 01       	movw	r24, r16
     a5e:	09 95       	icall
     a60:	89 2b       	or	r24, r25
     a62:	11 f0       	breq	.+4      	; 0xa68 <Print::print(__FlashStringHelper const*)+0x38>
     a64:	21 96       	adiw	r28, 0x01	; 1
     a66:	ee cf       	rjmp	.-36     	; 0xa44 <Print::print(__FlashStringHelper const*)+0x14>
     a68:	ce 01       	movw	r24, r28
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	08 95       	ret

00000a78 <Print::write(unsigned char const*, unsigned int)>:
write():
     a78:	af 92       	push	r10
     a7a:	bf 92       	push	r11
     a7c:	cf 92       	push	r12
     a7e:	df 92       	push	r13
     a80:	ef 92       	push	r14
     a82:	ff 92       	push	r15
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	6c 01       	movw	r12, r24
     a8e:	7b 01       	movw	r14, r22
     a90:	8b 01       	movw	r16, r22
     a92:	04 0f       	add	r16, r20
     a94:	15 1f       	adc	r17, r21
     a96:	eb 01       	movw	r28, r22
     a98:	5e 01       	movw	r10, r28
     a9a:	ae 18       	sub	r10, r14
     a9c:	bf 08       	sbc	r11, r15
     a9e:	c0 17       	cp	r28, r16
     aa0:	d1 07       	cpc	r29, r17
     aa2:	59 f0       	breq	.+22     	; 0xaba <Print::write(unsigned char const*, unsigned int)+0x42>
     aa4:	69 91       	ld	r22, Y+
     aa6:	d6 01       	movw	r26, r12
     aa8:	ed 91       	ld	r30, X+
     aaa:	fc 91       	ld	r31, X
     aac:	01 90       	ld	r0, Z+
     aae:	f0 81       	ld	r31, Z
     ab0:	e0 2d       	mov	r30, r0
     ab2:	c6 01       	movw	r24, r12
     ab4:	09 95       	icall
     ab6:	89 2b       	or	r24, r25
     ab8:	79 f7       	brne	.-34     	; 0xa98 <Print::write(unsigned char const*, unsigned int)+0x20>
     aba:	c5 01       	movw	r24, r10
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	bf 90       	pop	r11
     ace:	af 90       	pop	r10
     ad0:	08 95       	ret

00000ad2 <UartClass::availableForWrite()>:
availableForWrite():
     ad2:	fc 01       	movw	r30, r24
     ad4:	51 8d       	ldd	r21, Z+25	; 0x19
     ad6:	42 8d       	ldd	r20, Z+26	; 0x1a
     ad8:	25 2f       	mov	r18, r21
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	84 2f       	mov	r24, r20
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	82 1b       	sub	r24, r18
     ae2:	93 0b       	sbc	r25, r19
     ae4:	54 17       	cp	r21, r20
     ae6:	10 f0       	brcs	.+4      	; 0xaec <UartClass::availableForWrite()+0x1a>
     ae8:	cf 96       	adiw	r24, 0x3f	; 63
     aea:	08 95       	ret
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	08 95       	ret

00000af0 <UartClass::read()>:
read():
     af0:	fc 01       	movw	r30, r24
     af2:	97 89       	ldd	r25, Z+23	; 0x17
     af4:	80 8d       	ldd	r24, Z+24	; 0x18
     af6:	98 17       	cp	r25, r24
     af8:	61 f0       	breq	.+24     	; 0xb12 <UartClass::read()+0x22>
     afa:	a0 8d       	ldd	r26, Z+24	; 0x18
     afc:	ae 0f       	add	r26, r30
     afe:	bf 2f       	mov	r27, r31
     b00:	b1 1d       	adc	r27, r1
     b02:	5b 96       	adiw	r26, 0x1b	; 27
     b04:	8c 91       	ld	r24, X
     b06:	90 8d       	ldd	r25, Z+24	; 0x18
     b08:	9f 5f       	subi	r25, 0xFF	; 255
     b0a:	9f 73       	andi	r25, 0x3F	; 63
     b0c:	90 8f       	std	Z+24, r25	; 0x18
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	08 95       	ret
     b12:	8f ef       	ldi	r24, 0xFF	; 255
     b14:	9f ef       	ldi	r25, 0xFF	; 255
     b16:	08 95       	ret

00000b18 <UartClass::peek()>:
peek():
     b18:	fc 01       	movw	r30, r24
     b1a:	97 89       	ldd	r25, Z+23	; 0x17
     b1c:	80 8d       	ldd	r24, Z+24	; 0x18
     b1e:	98 17       	cp	r25, r24
     b20:	31 f0       	breq	.+12     	; 0xb2e <UartClass::peek()+0x16>
     b22:	80 8d       	ldd	r24, Z+24	; 0x18
     b24:	e8 0f       	add	r30, r24
     b26:	f1 1d       	adc	r31, r1
     b28:	83 8d       	ldd	r24, Z+27	; 0x1b
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	08 95       	ret
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	08 95       	ret

00000b34 <UartClass::available()>:
available():
     b34:	fc 01       	movw	r30, r24
     b36:	97 89       	ldd	r25, Z+23	; 0x17
     b38:	20 8d       	ldd	r18, Z+24	; 0x18
     b3a:	89 2f       	mov	r24, r25
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	80 5c       	subi	r24, 0xC0	; 192
     b40:	9f 4f       	sbci	r25, 0xFF	; 255
     b42:	82 1b       	sub	r24, r18
     b44:	91 09       	sbc	r25, r1
     b46:	8f 73       	andi	r24, 0x3F	; 63
     b48:	99 27       	eor	r25, r25
     b4a:	08 95       	ret

00000b4c <UartClass::end()>:
end():
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	ec 01       	movw	r28, r24
     b52:	e8 81       	ld	r30, Y
     b54:	f9 81       	ldd	r31, Y+1	; 0x01
     b56:	06 80       	ldd	r0, Z+6	; 0x06
     b58:	f7 81       	ldd	r31, Z+7	; 0x07
     b5a:	e0 2d       	mov	r30, r0
     b5c:	09 95       	icall
     b5e:	ec 85       	ldd	r30, Y+12	; 0x0c
     b60:	fd 85       	ldd	r31, Y+13	; 0x0d
     b62:	86 81       	ldd	r24, Z+6	; 0x06
     b64:	8f 73       	andi	r24, 0x3F	; 63
     b66:	86 83       	std	Z+6, r24	; 0x06
     b68:	ec 85       	ldd	r30, Y+12	; 0x0c
     b6a:	fd 85       	ldd	r31, Y+13	; 0x0d
     b6c:	85 81       	ldd	r24, Z+5	; 0x05
     b6e:	8f 75       	andi	r24, 0x5F	; 95
     b70:	85 83       	std	Z+5, r24	; 0x05
     b72:	88 8d       	ldd	r24, Y+24	; 0x18
     b74:	8f 8b       	std	Y+23, r24	; 0x17
     b76:	1e 8a       	std	Y+22, r1	; 0x16
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <UartClass::_tx_data_empty_irq()>:
_tx_data_empty_irq():
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	fc 01       	movw	r30, r24
     b84:	91 8d       	ldd	r25, Z+25	; 0x19
     b86:	82 8d       	ldd	r24, Z+26	; 0x1a
     b88:	c4 85       	ldd	r28, Z+12	; 0x0c
     b8a:	d5 85       	ldd	r29, Z+13	; 0x0d
     b8c:	98 13       	cpse	r25, r24
     b8e:	06 c0       	rjmp	.+12     	; 0xb9c <UartClass::_tx_data_empty_irq()+0x1e>
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	8f 7d       	andi	r24, 0xDF	; 223
     b94:	8d 83       	std	Y+5, r24	; 0x05
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret
     b9c:	a2 8d       	ldd	r26, Z+26	; 0x1a
     b9e:	ae 0f       	add	r26, r30
     ba0:	bf 2f       	mov	r27, r31
     ba2:	b1 1d       	adc	r27, r1
     ba4:	a5 5a       	subi	r26, 0xA5	; 165
     ba6:	bf 4f       	sbci	r27, 0xFF	; 255
     ba8:	9c 91       	ld	r25, X
     baa:	82 8d       	ldd	r24, Z+26	; 0x1a
     bac:	8f 5f       	subi	r24, 0xFF	; 255
     bae:	8f 73       	andi	r24, 0x3F	; 63
     bb0:	82 8f       	std	Z+26, r24	; 0x1a
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	8c 83       	std	Y+4, r24	; 0x04
     bb6:	a4 85       	ldd	r26, Z+12	; 0x0c
     bb8:	b5 85       	ldd	r27, Z+13	; 0x0d
     bba:	12 96       	adiw	r26, 0x02	; 2
     bbc:	9c 93       	st	X, r25
     bbe:	91 8d       	ldd	r25, Z+25	; 0x19
     bc0:	82 8d       	ldd	r24, Z+26	; 0x1a
     bc2:	98 13       	cpse	r25, r24
     bc4:	e8 cf       	rjmp	.-48     	; 0xb96 <UartClass::_tx_data_empty_irq()+0x18>
     bc6:	04 84       	ldd	r0, Z+12	; 0x0c
     bc8:	f5 85       	ldd	r31, Z+13	; 0x0d
     bca:	e0 2d       	mov	r30, r0
     bcc:	85 81       	ldd	r24, Z+5	; 0x05
     bce:	8f 7d       	andi	r24, 0xDF	; 223
     bd0:	85 83       	std	Z+5, r24	; 0x05
     bd2:	e1 cf       	rjmp	.-62     	; 0xb96 <UartClass::_tx_data_empty_irq()+0x18>

00000bd4 <UartClass::_poll_tx_data_empty()>:
_poll_tx_data_empty():
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	07 fe       	sbrs	r0, 7
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <UartClass::_poll_tx_data_empty()+0xe>
     bda:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7e0111>
     bde:	22 23       	and	r18, r18
     be0:	39 f0       	breq	.+14     	; 0xbf0 <UartClass::_poll_tx_data_empty()+0x1c>
     be2:	dc 01       	movw	r26, r24
     be4:	1c 96       	adiw	r26, 0x0c	; 12
     be6:	ed 91       	ld	r30, X+
     be8:	fc 91       	ld	r31, X
     bea:	24 81       	ldd	r18, Z+4	; 0x04
     bec:	25 fd       	sbrc	r18, 5
     bee:	c7 cf       	rjmp	.-114    	; 0xb7e <UartClass::_tx_data_empty_irq()>
     bf0:	08 95       	ret

00000bf2 <UartClass::write(unsigned char)>:
write():
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	ec 01       	movw	r28, r24
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	8e 8b       	std	Y+22, r24	; 0x16
     c00:	99 8d       	ldd	r25, Y+25	; 0x19
     c02:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c04:	98 13       	cpse	r25, r24
     c06:	11 c0       	rjmp	.+34     	; 0xc2a <UartClass::write(unsigned char)+0x38>
     c08:	ec 85       	ldd	r30, Y+12	; 0x0c
     c0a:	fd 85       	ldd	r31, Y+13	; 0x0d
     c0c:	84 81       	ldd	r24, Z+4	; 0x04
     c0e:	85 ff       	sbrs	r24, 5
     c10:	0c c0       	rjmp	.+24     	; 0xc2a <UartClass::write(unsigned char)+0x38>
     c12:	80 e4       	ldi	r24, 0x40	; 64
     c14:	84 83       	std	Z+4, r24	; 0x04
     c16:	ec 85       	ldd	r30, Y+12	; 0x0c
     c18:	fd 85       	ldd	r31, Y+13	; 0x0d
     c1a:	62 83       	std	Z+2, r22	; 0x02
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret
     c2a:	06 2f       	mov	r16, r22
     c2c:	19 8d       	ldd	r17, Y+25	; 0x19
     c2e:	1f 5f       	subi	r17, 0xFF	; 255
     c30:	1f 73       	andi	r17, 0x3F	; 63
     c32:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c34:	81 13       	cpse	r24, r17
     c36:	03 c0       	rjmp	.+6      	; 0xc3e <UartClass::write(unsigned char)+0x4c>
     c38:	ce 01       	movw	r24, r28
     c3a:	cc df       	rcall	.-104    	; 0xbd4 <UartClass::_poll_tx_data_empty()>
     c3c:	fa cf       	rjmp	.-12     	; 0xc32 <UartClass::write(unsigned char)+0x40>
     c3e:	e9 8d       	ldd	r30, Y+25	; 0x19
     c40:	ec 0f       	add	r30, r28
     c42:	fd 2f       	mov	r31, r29
     c44:	f1 1d       	adc	r31, r1
     c46:	e5 5a       	subi	r30, 0xA5	; 165
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	00 83       	st	Z, r16
     c4c:	19 8f       	std	Y+25, r17	; 0x19
     c4e:	ec 85       	ldd	r30, Y+12	; 0x0c
     c50:	fd 85       	ldd	r31, Y+13	; 0x0d
     c52:	85 81       	ldd	r24, Z+5	; 0x05
     c54:	80 62       	ori	r24, 0x20	; 32
     c56:	85 83       	std	Z+5, r24	; 0x05
     c58:	e1 cf       	rjmp	.-62     	; 0xc1c <UartClass::write(unsigned char)+0x2a>

00000c5a <UartClass::flush()>:
flush():
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	ec 01       	movw	r28, r24
     c60:	8e 89       	ldd	r24, Y+22	; 0x16
     c62:	88 23       	and	r24, r24
     c64:	59 f0       	breq	.+22     	; 0xc7c <UartClass::flush()+0x22>
     c66:	ec 85       	ldd	r30, Y+12	; 0x0c
     c68:	fd 85       	ldd	r31, Y+13	; 0x0d
     c6a:	85 81       	ldd	r24, Z+5	; 0x05
     c6c:	85 fd       	sbrc	r24, 5
     c6e:	03 c0       	rjmp	.+6      	; 0xc76 <UartClass::flush()+0x1c>
     c70:	84 81       	ldd	r24, Z+4	; 0x04
     c72:	86 fd       	sbrc	r24, 6
     c74:	03 c0       	rjmp	.+6      	; 0xc7c <UartClass::flush()+0x22>
     c76:	ce 01       	movw	r24, r28
     c78:	ad df       	rcall	.-166    	; 0xbd4 <UartClass::_poll_tx_data_empty()>
     c7a:	f5 cf       	rjmp	.-22     	; 0xc66 <UartClass::flush()+0xc>
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <UartClass::operator bool()>:
operator 3():
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	08 95       	ret

00000c86 <micros>:
micros():
     c86:	9f b7       	in	r25, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	e0 91 2a 0b 	lds	r30, 0x0B2A	; 0x800b2a <__TEXT_REGION_LENGTH__+0x7e0b2a>
     c8e:	f0 91 2b 0b 	lds	r31, 0x0B2B	; 0x800b2b <__TEXT_REGION_LENGTH__+0x7e0b2b>
     c92:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     c96:	20 91 49 41 	lds	r18, 0x4149	; 0x804149 <timer_millis>
     c9a:	30 91 4a 41 	lds	r19, 0x414A	; 0x80414a <timer_millis+0x1>
     c9e:	40 91 4b 41 	lds	r20, 0x414B	; 0x80414b <timer_millis+0x2>
     ca2:	50 91 4c 41 	lds	r21, 0x414C	; 0x80414c <timer_millis+0x3>
     ca6:	9f bf       	out	0x3f, r25	; 63
     ca8:	80 ff       	sbrs	r24, 0
     caa:	08 c0       	rjmp	.+16     	; 0xcbc <micros+0x36>
     cac:	ec 31       	cpi	r30, 0x1C	; 28
     cae:	85 e2       	ldi	r24, 0x25	; 37
     cb0:	f8 07       	cpc	r31, r24
     cb2:	20 f4       	brcc	.+8      	; 0xcbc <micros+0x36>
     cb4:	2f 5f       	subi	r18, 0xFF	; 255
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	4f 4f       	sbci	r20, 0xFF	; 255
     cba:	5f 4f       	sbci	r21, 0xFF	; 255
     cbc:	0f 01       	movw	r0, r30
     cbe:	16 94       	lsr	r1
     cc0:	07 94       	ror	r0
     cc2:	16 94       	lsr	r1
     cc4:	07 94       	ror	r0
     cc6:	16 94       	lsr	r1
     cc8:	07 94       	ror	r0
     cca:	f0 01       	movw	r30, r0
     ccc:	16 94       	lsr	r1
     cce:	07 94       	ror	r0
     cd0:	16 94       	lsr	r1
     cd2:	07 94       	ror	r0
     cd4:	e0 19       	sub	r30, r0
     cd6:	f1 09       	sbc	r31, r1
     cd8:	16 94       	lsr	r1
     cda:	07 94       	ror	r0
     cdc:	06 94       	lsr	r0
     cde:	10 2c       	mov	r1, r0
     ce0:	16 94       	lsr	r1
     ce2:	16 94       	lsr	r1
     ce4:	01 18       	sub	r0, r1
     ce6:	16 94       	lsr	r1
     ce8:	16 94       	lsr	r1
     cea:	01 0c       	add	r0, r1
     cec:	11 24       	eor	r1, r1
     cee:	e0 0d       	add	r30, r0
     cf0:	f1 1d       	adc	r31, r1
     cf2:	a8 ee       	ldi	r26, 0xE8	; 232
     cf4:	b3 e0       	ldi	r27, 0x03	; 3
     cf6:	0e 94 1d 20 	call	0x403a	; 0x403a <__muluhisi3>
     cfa:	6e 0f       	add	r22, r30
     cfc:	7f 1f       	adc	r23, r31
     cfe:	81 1d       	adc	r24, r1
     d00:	91 1d       	adc	r25, r1
     d02:	08 95       	ret

00000d04 <delay>:
delay():
     d04:	8f 92       	push	r8
     d06:	9f 92       	push	r9
     d08:	af 92       	push	r10
     d0a:	bf 92       	push	r11
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	4b 01       	movw	r8, r22
     d16:	5c 01       	movw	r10, r24
     d18:	b6 df       	rcall	.-148    	; 0xc86 <micros>
     d1a:	6b 01       	movw	r12, r22
     d1c:	7c 01       	movw	r14, r24
     d1e:	b3 df       	rcall	.-154    	; 0xc86 <micros>
     d20:	6c 19       	sub	r22, r12
     d22:	7d 09       	sbc	r23, r13
     d24:	8e 09       	sbc	r24, r14
     d26:	9f 09       	sbc	r25, r15
     d28:	68 3e       	cpi	r22, 0xE8	; 232
     d2a:	73 40       	sbci	r23, 0x03	; 3
     d2c:	81 05       	cpc	r24, r1
     d2e:	91 05       	cpc	r25, r1
     d30:	b0 f3       	brcs	.-20     	; 0xd1e <delay+0x1a>
     d32:	21 e0       	ldi	r18, 0x01	; 1
     d34:	82 1a       	sub	r8, r18
     d36:	91 08       	sbc	r9, r1
     d38:	a1 08       	sbc	r10, r1
     d3a:	b1 08       	sbc	r11, r1
     d3c:	88 ee       	ldi	r24, 0xE8	; 232
     d3e:	c8 0e       	add	r12, r24
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	d8 1e       	adc	r13, r24
     d44:	e1 1c       	adc	r14, r1
     d46:	f1 1c       	adc	r15, r1
     d48:	81 14       	cp	r8, r1
     d4a:	91 04       	cpc	r9, r1
     d4c:	a1 04       	cpc	r10, r1
     d4e:	b1 04       	cpc	r11, r1
     d50:	31 f7       	brne	.-52     	; 0xd1e <delay+0x1a>
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	bf 90       	pop	r11
     d5c:	af 90       	pop	r10
     d5e:	9f 90       	pop	r9
     d60:	8f 90       	pop	r8
     d62:	08 95       	ret

00000d64 <millis>:
millis():
     d64:	2f b7       	in	r18, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	60 91 49 41 	lds	r22, 0x4149	; 0x804149 <timer_millis>
     d6c:	70 91 4a 41 	lds	r23, 0x414A	; 0x80414a <timer_millis+0x1>
     d70:	80 91 4b 41 	lds	r24, 0x414B	; 0x80414b <timer_millis+0x2>
     d74:	90 91 4c 41 	lds	r25, 0x414C	; 0x80414c <timer_millis+0x3>
     d78:	2f bf       	out	0x3f, r18	; 63
     d7a:	08 95       	ret

00000d7c <hd44780::command(unsigned char)>:
command():
     d7c:	8f 92       	push	r8
     d7e:	9f 92       	push	r9
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ec 01       	movw	r28, r24
     d90:	16 2f       	mov	r17, r22
     d92:	e8 81       	ld	r30, Y
     d94:	f9 81       	ldd	r31, Y+1	; 0x01
     d96:	04 84       	ldd	r0, Z+12	; 0x0c
     d98:	f5 85       	ldd	r31, Z+13	; 0x0d
     d9a:	e0 2d       	mov	r30, r0
     d9c:	46 2f       	mov	r20, r22
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	09 95       	icall
     da4:	7c 01       	movw	r14, r24
     da6:	11 50       	subi	r17, 0x01	; 1
     da8:	12 30       	cpi	r17, 0x02	; 2
     daa:	d0 f4       	brcc	.+52     	; 0xde0 <hd44780::command(unsigned char)+0x64>
     dac:	19 86       	std	Y+9, r1	; 0x09
     dae:	1a 86       	std	Y+10, r1	; 0x0a
     db0:	88 88       	ldd	r8, Y+16	; 0x10
     db2:	99 88       	ldd	r9, Y+17	; 0x11
     db4:	aa 88       	ldd	r10, Y+18	; 0x12
     db6:	bb 88       	ldd	r11, Y+19	; 0x13
markStart():
     db8:	66 df       	rcall	.-308    	; 0xc86 <micros>
     dba:	68 8f       	std	Y+24, r22	; 0x18
     dbc:	79 8f       	std	Y+25, r23	; 0x19
     dbe:	8a 8f       	std	Y+26, r24	; 0x1a
     dc0:	9b 8f       	std	Y+27, r25	; 0x1b
     dc2:	8c 8e       	std	Y+28, r8	; 0x1c
     dc4:	9d 8e       	std	Y+29, r9	; 0x1d
     dc6:	ae 8e       	std	Y+30, r10	; 0x1e
     dc8:	bf 8e       	std	Y+31, r11	; 0x1f
command():
     dca:	c7 01       	movw	r24, r14
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	ff 90       	pop	r15
     dd4:	ef 90       	pop	r14
     dd6:	bf 90       	pop	r11
     dd8:	af 90       	pop	r10
     dda:	9f 90       	pop	r9
     ddc:	8f 90       	pop	r8
     dde:	08 95       	ret
     de0:	8c 88       	ldd	r8, Y+20	; 0x14
     de2:	9d 88       	ldd	r9, Y+21	; 0x15
     de4:	ae 88       	ldd	r10, Y+22	; 0x16
     de6:	bf 88       	ldd	r11, Y+23	; 0x17
     de8:	e7 cf       	rjmp	.-50     	; 0xdb8 <hd44780::command(unsigned char)+0x3c>

00000dea <hd44780::clear() [clone .constprop.25]>:
clear():
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	89 e2       	ldi	r24, 0x29	; 41
     dee:	97 e4       	ldi	r25, 0x47	; 71
     df0:	c5 cf       	rjmp	.-118    	; 0xd7c <hd44780::command(unsigned char)>

00000df2 <hd44780::setCursor(unsigned char, unsigned char)>:
setCursor():
     df2:	dc 01       	movw	r26, r24
     df4:	18 96       	adiw	r26, 0x08	; 8
     df6:	8c 91       	ld	r24, X
     df8:	18 97       	sbiw	r26, 0x08	; 8
     dfa:	48 17       	cp	r20, r24
     dfc:	10 f0       	brcs	.+4      	; 0xe02 <hd44780::setCursor(unsigned char, unsigned char)+0x10>
     dfe:	4f ef       	ldi	r20, 0xFF	; 255
     e00:	48 0f       	add	r20, r24
     e02:	1b 96       	adiw	r26, 0x0b	; 11
     e04:	9c 91       	ld	r25, X
     e06:	1b 97       	sbiw	r26, 0x0b	; 11
     e08:	99 23       	and	r25, r25
     e0a:	89 f0       	breq	.+34     	; 0xe2e <hd44780::setCursor(unsigned char, unsigned char)+0x3c>
     e0c:	17 96       	adiw	r26, 0x07	; 7
     e0e:	9c 91       	ld	r25, X
     e10:	17 97       	sbiw	r26, 0x07	; 7
     e12:	69 17       	cp	r22, r25
     e14:	30 f0       	brcs	.+12     	; 0xe22 <hd44780::setCursor(unsigned char, unsigned char)+0x30>
     e16:	69 1b       	sub	r22, r25
     e18:	4f 5f       	subi	r20, 0xFF	; 255
     e1a:	48 17       	cp	r20, r24
     e1c:	d0 f3       	brcs	.-12     	; 0xe12 <hd44780::setCursor(unsigned char, unsigned char)+0x20>
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	f8 cf       	rjmp	.-16     	; 0xe12 <hd44780::setCursor(unsigned char, unsigned char)+0x20>
     e22:	19 96       	adiw	r26, 0x09	; 9
     e24:	6c 93       	st	X, r22
     e26:	19 97       	sbiw	r26, 0x09	; 9
     e28:	1a 96       	adiw	r26, 0x0a	; 10
     e2a:	4c 93       	st	X, r20
     e2c:	1a 97       	sbiw	r26, 0x0a	; 10
     e2e:	fd 01       	movw	r30, r26
     e30:	e4 0f       	add	r30, r20
     e32:	f1 1d       	adc	r31, r1
     e34:	84 85       	ldd	r24, Z+12	; 0x0c
     e36:	68 0f       	add	r22, r24
     e38:	60 68       	ori	r22, 0x80	; 128
     e3a:	cd 01       	movw	r24, r26
     e3c:	9f cf       	rjmp	.-194    	; 0xd7c <hd44780::command(unsigned char)>

00000e3e <hd44780::write(unsigned char)>:
write():
     e3e:	8f 92       	push	r8
     e40:	9f 92       	push	r9
     e42:	af 92       	push	r10
     e44:	bf 92       	push	r11
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	ec 01       	movw	r28, r24
     e54:	46 2f       	mov	r20, r22
_write():
     e56:	e8 81       	ld	r30, Y
     e58:	f9 81       	ldd	r31, Y+1	; 0x01
     e5a:	04 84       	ldd	r0, Z+12	; 0x0c
     e5c:	f5 85       	ldd	r31, Z+13	; 0x0d
     e5e:	e0 2d       	mov	r30, r0
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	09 95       	icall
     e66:	7c 01       	movw	r14, r24
     e68:	8c 88       	ldd	r8, Y+20	; 0x14
     e6a:	9d 88       	ldd	r9, Y+21	; 0x15
     e6c:	ae 88       	ldd	r10, Y+22	; 0x16
     e6e:	bf 88       	ldd	r11, Y+23	; 0x17
markStart():
     e70:	0a df       	rcall	.-492    	; 0xc86 <micros>
     e72:	68 8f       	std	Y+24, r22	; 0x18
     e74:	79 8f       	std	Y+25, r23	; 0x19
     e76:	8a 8f       	std	Y+26, r24	; 0x1a
     e78:	9b 8f       	std	Y+27, r25	; 0x1b
     e7a:	8c 8e       	std	Y+28, r8	; 0x1c
     e7c:	9d 8e       	std	Y+29, r9	; 0x1d
     e7e:	ae 8e       	std	Y+30, r10	; 0x1e
     e80:	bf 8e       	std	Y+31, r11	; 0x1f
_write():
     e82:	01 e0       	ldi	r16, 0x01	; 1
     e84:	10 e0       	ldi	r17, 0x00	; 0
     e86:	ef 28       	or	r14, r15
     e88:	11 f0       	breq	.+4      	; 0xe8e <hd44780::write(unsigned char)+0x50>
     e8a:	10 e0       	ldi	r17, 0x00	; 0
     e8c:	00 e0       	ldi	r16, 0x00	; 0
write():
     e8e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e90:	88 23       	and	r24, r24
     e92:	91 f0       	breq	.+36     	; 0xeb8 <hd44780::write(unsigned char)+0x7a>
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	89 87       	std	Y+9, r24	; 0x09
     e9a:	9f 81       	ldd	r25, Y+7	; 0x07
     e9c:	89 17       	cp	r24, r25
     e9e:	60 f0       	brcs	.+24     	; 0xeb8 <hd44780::write(unsigned char)+0x7a>
     ea0:	19 86       	std	Y+9, r1	; 0x09
     ea2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea4:	8f 5f       	subi	r24, 0xFF	; 255
     ea6:	8a 87       	std	Y+10, r24	; 0x0a
     ea8:	98 85       	ldd	r25, Y+8	; 0x08
     eaa:	89 17       	cp	r24, r25
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <hd44780::write(unsigned char)+0x72>
     eae:	1a 86       	std	Y+10, r1	; 0x0a
     eb0:	4a 85       	ldd	r20, Y+10	; 0x0a
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	ce 01       	movw	r24, r28
     eb6:	9d df       	rcall	.-198    	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
     eb8:	c8 01       	movw	r24, r16
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	bf 90       	pop	r11
     ec8:	af 90       	pop	r10
     eca:	9f 90       	pop	r9
     ecc:	8f 90       	pop	r8
     ece:	08 95       	ret

00000ed0 <hd44780::iosetContrast(unsigned char)>:
iosetContrast():
     ed0:	8d ef       	ldi	r24, 0xFD	; 253
     ed2:	9f ef       	ldi	r25, 0xFF	; 255
     ed4:	08 95       	ret

00000ed6 <hd44780::ioread(hd44780::iotype)>:
ioread():
     ed6:	8d ef       	ldi	r24, 0xFD	; 253
     ed8:	9f ef       	ldi	r25, 0xFF	; 255
     eda:	08 95       	ret

00000edc <Print::availableForWrite()>:
availableForWrite():
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	08 95       	ret

00000ee2 <getPacketSig()>:
getPacketSig():
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <pktLength>
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	43 e0       	ldi	r20, 0x03	; 3
     eee:	95 95       	asr	r25
     ef0:	87 95       	ror	r24
     ef2:	4a 95       	dec	r20
     ef4:	e1 f7       	brne	.-8      	; 0xeee <getPacketSig()+0xc>
     ef6:	21 e0       	ldi	r18, 0x01	; 1
     ef8:	a4 e0       	ldi	r26, 0x04	; 4
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	83 30       	cpi	r24, 0x03	; 3
     efe:	19 f4       	brne	.+6      	; 0xf06 <getPacketSig()+0x24>
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	a3 e0       	ldi	r26, 0x03	; 3
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	ba 01       	movw	r22, r20
     f0c:	e2 2f       	mov	r30, r18
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	ea 17       	cp	r30, r26
     f12:	fb 07       	cpc	r31, r27
     f14:	6c f4       	brge	.+26     	; 0xf30 <getPacketSig()+0x4e>
     f16:	e3 5b       	subi	r30, 0xB3	; 179
     f18:	fe 4b       	sbci	r31, 0xBE	; 190
     f1a:	30 81       	ld	r19, Z
     f1c:	43 0f       	add	r20, r19
     f1e:	51 1d       	adc	r21, r1
     f20:	61 1d       	adc	r22, r1
     f22:	71 1d       	adc	r23, r1
     f24:	76 2f       	mov	r23, r22
     f26:	65 2f       	mov	r22, r21
     f28:	54 2f       	mov	r21, r20
     f2a:	44 27       	eor	r20, r20
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	ee cf       	rjmp	.-36     	; 0xf0c <getPacketSig()+0x2a>
     f30:	83 5b       	subi	r24, 0xB3	; 179
     f32:	9e 4b       	sbci	r25, 0xBE	; 190
     f34:	fc 01       	movw	r30, r24
     f36:	80 81       	ld	r24, Z
     f38:	8a 01       	movw	r16, r20
     f3a:	9b 01       	movw	r18, r22
     f3c:	08 0f       	add	r16, r24
     f3e:	11 1d       	adc	r17, r1
     f40:	21 1d       	adc	r18, r1
     f42:	31 1d       	adc	r19, r1
     f44:	c9 01       	movw	r24, r18
     f46:	b8 01       	movw	r22, r16
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	08 95       	ret

00000f4e <getPalleteNumber()>:
getPalleteNumber():
     f4e:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
     f52:	84 30       	cpi	r24, 0x04	; 4
     f54:	19 f0       	breq	.+6      	; 0xf5c <getPalleteNumber()+0xe>
     f56:	80 91 11 44 	lds	r24, 0x4411	; 0x804411 <currentValueLeft>
     f5a:	08 95       	ret
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	08 95       	ret

00000f60 <getTransitionFrames()>:
getTransitionFrames():
     f60:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
     f64:	84 30       	cpi	r24, 0x04	; 4
     f66:	41 f4       	brne	.+16     	; 0xf78 <getTransitionFrames()+0x18>
     f68:	80 91 06 44 	lds	r24, 0x4406	; 0x804406 <currentValueRight+0x1>
     f6c:	26 e0       	ldi	r18, 0x06	; 6
     f6e:	82 9f       	mul	r24, r18
     f70:	c0 01       	movw	r24, r0
     f72:	11 24       	eor	r1, r1
     f74:	09 96       	adiw	r24, 0x09	; 9
     f76:	08 95       	ret
     f78:	88 30       	cpi	r24, 0x08	; 8
     f7a:	39 f0       	breq	.+14     	; 0xf8a <getTransitionFrames()+0x2a>
     f7c:	80 91 06 44 	lds	r24, 0x4406	; 0x804406 <currentValueRight+0x1>
     f80:	23 e0       	ldi	r18, 0x03	; 3
     f82:	82 9f       	mul	r24, r18
     f84:	c0 01       	movw	r24, r0
     f86:	11 24       	eor	r1, r1
     f88:	08 95       	ret
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	08 95       	ret

00000f90 <getDwellFrames()>:
getDwellFrames():
     f90:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
     f94:	84 30       	cpi	r24, 0x04	; 4
     f96:	51 f0       	breq	.+20     	; 0xfac <getDwellFrames()+0x1c>
     f98:	88 30       	cpi	r24, 0x08	; 8
     f9a:	41 f0       	breq	.+16     	; 0xfac <getDwellFrames()+0x1c>
     f9c:	80 91 07 44 	lds	r24, 0x4407	; 0x804407 <currentValueRight+0x2>
     fa0:	24 e0       	ldi	r18, 0x04	; 4
     fa2:	82 9f       	mul	r24, r18
     fa4:	c0 01       	movw	r24, r0
     fa6:	11 24       	eor	r1, r1
     fa8:	02 96       	adiw	r24, 0x02	; 2
     faa:	08 95       	ret
     fac:	82 e0       	ldi	r24, 0x02	; 2
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	08 95       	ret

00000fb2 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>:
getDrift2Colors():
     fb2:	2f 92       	push	r2
     fb4:	3f 92       	push	r3
     fb6:	4f 92       	push	r4
     fb8:	5f 92       	push	r5
     fba:	6f 92       	push	r6
     fbc:	7f 92       	push	r7
     fbe:	8f 92       	push	r8
     fc0:	9f 92       	push	r9
     fc2:	af 92       	push	r10
     fc4:	bf 92       	push	r11
     fc6:	cf 92       	push	r12
     fc8:	df 92       	push	r13
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	3c 01       	movw	r6, r24
     fd8:	2b 01       	movw	r4, r22
     fda:	1a 01       	movw	r2, r20
     fdc:	48 01       	movw	r8, r16
     fde:	59 01       	movw	r10, r18
     fe0:	d7 df       	rcall	.-82     	; 0xf90 <getDwellFrames()>
     fe2:	6c 01       	movw	r12, r24
     fe4:	bd df       	rcall	.-134    	; 0xf60 <getTransitionFrames()>
     fe6:	7c 01       	movw	r14, r24
     fe8:	b2 df       	rcall	.-156    	; 0xf4e <getPalleteNumber()>
     fea:	18 2f       	mov	r17, r24
     fec:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
     ff0:	84 30       	cpi	r24, 0x04	; 4
     ff2:	09 f0       	breq	.+2      	; 0xff6 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x44>
     ff4:	5e c0       	rjmp	.+188    	; 0x10b2 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x100>
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	8b 5f       	subi	r24, 0xFB	; 251
     ffc:	9b 4b       	sbci	r25, 0xBB	; 187
     ffe:	dc 01       	movw	r26, r24
    1000:	8c 91       	ld	r24, X
    1002:	88 23       	and	r24, r24
    1004:	09 f4       	brne	.+2      	; 0x1008 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x56>
    1006:	58 c0       	rjmp	.+176    	; 0x10b8 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x106>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	dc 01       	movw	r26, r24
    100e:	c1 2f       	mov	r28, r17
    1010:	d0 e0       	ldi	r29, 0x00	; 0
    1012:	c1 54       	subi	r28, 0x41	; 65
    1014:	d6 4f       	sbci	r29, 0xF6	; 246
    1016:	fe 01       	movw	r30, r28
    1018:	44 91       	lpm	r20, Z
    101a:	ec 0c       	add	r14, r12
    101c:	fd 1c       	adc	r15, r13
    101e:	bc 01       	movw	r22, r24
    1020:	cd 01       	movw	r24, r26
    1022:	68 0d       	add	r22, r8
    1024:	79 1d       	adc	r23, r9
    1026:	8a 1d       	adc	r24, r10
    1028:	9b 1d       	adc	r25, r11
    102a:	4e 9d       	mul	r20, r14
    102c:	90 01       	movw	r18, r0
    102e:	4f 9d       	mul	r20, r15
    1030:	30 0d       	add	r19, r0
    1032:	11 24       	eor	r1, r1
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	0e 94 2d 20 	call	0x405a	; 0x405a <__udivmodsi4>
    103c:	97 01       	movw	r18, r14
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	0e 94 2d 20 	call	0x405a	; 0x405a <__udivmodsi4>
    1046:	e2 2e       	mov	r14, r18
    1048:	f1 2c       	mov	r15, r1
    104a:	f8 e1       	ldi	r31, 0x18	; 24
    104c:	1f 9f       	mul	r17, r31
    104e:	50 01       	movw	r10, r0
    1050:	11 24       	eor	r1, r1
    1052:	a5 01       	movw	r20, r10
    1054:	33 e0       	ldi	r19, 0x03	; 3
    1056:	23 9f       	mul	r18, r19
    1058:	40 0d       	add	r20, r0
    105a:	51 1d       	adc	r21, r1
    105c:	11 24       	eor	r1, r1
    105e:	8a 01       	movw	r16, r20
    1060:	0d 5c       	subi	r16, 0xCD	; 205
    1062:	1a 4f       	sbci	r17, 0xFA	; 250
    1064:	da 01       	movw	r26, r20
    1066:	ac 5c       	subi	r26, 0xCC	; 204
    1068:	ba 4f       	sbci	r27, 0xFA	; 250
    106a:	4b 5c       	subi	r20, 0xCB	; 203
    106c:	5a 4f       	sbci	r21, 0xFA	; 250
    106e:	6c 15       	cp	r22, r12
    1070:	7d 05       	cpc	r23, r13
    1072:	38 f5       	brcc	.+78     	; 0x10c2 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x110>
    1074:	f8 01       	movw	r30, r16
    1076:	04 91       	lpm	r16, Z
    1078:	e3 01       	movw	r28, r6
    107a:	08 83       	st	Y, r16
    107c:	fd 01       	movw	r30, r26
    107e:	a4 91       	lpm	r26, Z
    1080:	e2 01       	movw	r28, r4
    1082:	a8 83       	st	Y, r26
    1084:	fa 01       	movw	r30, r20
    1086:	44 91       	lpm	r20, Z
    1088:	d1 01       	movw	r26, r2
    108a:	4c 93       	st	X, r20
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	df 90       	pop	r13
    109a:	cf 90       	pop	r12
    109c:	bf 90       	pop	r11
    109e:	af 90       	pop	r10
    10a0:	9f 90       	pop	r9
    10a2:	8f 90       	pop	r8
    10a4:	7f 90       	pop	r7
    10a6:	6f 90       	pop	r6
    10a8:	5f 90       	pop	r5
    10aa:	4f 90       	pop	r4
    10ac:	3f 90       	pop	r3
    10ae:	2f 90       	pop	r2
    10b0:	08 95       	ret
    10b2:	83 e0       	ldi	r24, 0x03	; 3
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a1 cf       	rjmp	.-190    	; 0xffa <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x48>
    10b8:	88 ec       	ldi	r24, 0xC8	; 200
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a0 e0       	ldi	r26, 0x00	; 0
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	a6 cf       	rjmp	.-180    	; 0x100e <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x5c>
    10c2:	ec e2       	ldi	r30, 0x2C	; 44
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	4f 01       	movw	r8, r30
    10c8:	8c 18       	sub	r8, r12
    10ca:	9d 08       	sbc	r9, r13
    10cc:	64 01       	movw	r12, r8
    10ce:	fe 01       	movw	r30, r28
    10d0:	c4 91       	lpm	r28, Z
    10d2:	ff ef       	ldi	r31, 0xFF	; 255
    10d4:	ef 1a       	sub	r14, r31
    10d6:	ff 0a       	sbc	r15, r31
    10d8:	2f 5f       	subi	r18, 0xFF	; 255
    10da:	ce 15       	cp	r28, r14
    10dc:	1f 04       	cpc	r1, r15
    10de:	09 f0       	breq	.+2      	; 0x10e2 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x130>
    10e0:	0c f4       	brge	.+2      	; 0x10e4 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x132>
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	eb 01       	movw	r28, r22
    10e6:	c3 55       	subi	r28, 0x53	; 83
    10e8:	de 4b       	sbci	r29, 0xBE	; 190
    10ea:	4e 01       	movw	r8, r28
    10ec:	8c 0c       	add	r8, r12
    10ee:	9d 1c       	adc	r9, r13
    10f0:	f4 01       	movw	r30, r8
    10f2:	60 81       	ld	r22, Z
    10f4:	c5 01       	movw	r24, r10
    10f6:	f3 e0       	ldi	r31, 0x03	; 3
    10f8:	2f 9f       	mul	r18, r31
    10fa:	80 0d       	add	r24, r0
    10fc:	91 1d       	adc	r25, r1
    10fe:	11 24       	eor	r1, r1
    1100:	fc 01       	movw	r30, r24
    1102:	ed 5c       	subi	r30, 0xCD	; 205
    1104:	fa 4f       	sbci	r31, 0xFA	; 250
    1106:	74 91       	lpm	r23, Z
    1108:	f8 01       	movw	r30, r16
    110a:	04 91       	lpm	r16, Z
    110c:	2f ef       	ldi	r18, 0xFF	; 255
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	26 1b       	sub	r18, r22
    1112:	31 09       	sbc	r19, r1
    1114:	02 9f       	mul	r16, r18
    1116:	f0 01       	movw	r30, r0
    1118:	03 9f       	mul	r16, r19
    111a:	f0 0d       	add	r31, r0
    111c:	11 24       	eor	r1, r1
    111e:	76 9f       	mul	r23, r22
    1120:	e0 0d       	add	r30, r0
    1122:	f1 1d       	adc	r31, r1
    1124:	11 24       	eor	r1, r1
    1126:	e3 01       	movw	r28, r6
    1128:	f8 83       	st	Y, r31
    112a:	fc 01       	movw	r30, r24
    112c:	ec 5c       	subi	r30, 0xCC	; 204
    112e:	fa 4f       	sbci	r31, 0xFA	; 250
    1130:	74 91       	lpm	r23, Z
    1132:	fd 01       	movw	r30, r26
    1134:	a4 91       	lpm	r26, Z
    1136:	a2 9f       	mul	r26, r18
    1138:	f0 01       	movw	r30, r0
    113a:	a3 9f       	mul	r26, r19
    113c:	f0 0d       	add	r31, r0
    113e:	11 24       	eor	r1, r1
    1140:	67 9f       	mul	r22, r23
    1142:	e0 0d       	add	r30, r0
    1144:	f1 1d       	adc	r31, r1
    1146:	11 24       	eor	r1, r1
    1148:	d2 01       	movw	r26, r4
    114a:	fc 93       	st	X, r31
    114c:	8b 5c       	subi	r24, 0xCB	; 203
    114e:	9a 4f       	sbci	r25, 0xFA	; 250
    1150:	fc 01       	movw	r30, r24
    1152:	84 91       	lpm	r24, Z
    1154:	fa 01       	movw	r30, r20
    1156:	44 91       	lpm	r20, Z
    1158:	42 9f       	mul	r20, r18
    115a:	f0 01       	movw	r30, r0
    115c:	43 9f       	mul	r20, r19
    115e:	f0 0d       	add	r31, r0
    1160:	11 24       	eor	r1, r1
    1162:	68 9f       	mul	r22, r24
    1164:	e0 0d       	add	r30, r0
    1166:	f1 1d       	adc	r31, r1
    1168:	11 24       	eor	r1, r1
    116a:	d1 01       	movw	r26, r2
    116c:	fc 93       	st	X, r31
    116e:	8e cf       	rjmp	.-228    	; 0x108c <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0xda>

00001170 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)>:
pushPixel():
    1170:	22 23       	and	r18, r18
    1172:	81 f0       	breq	.+32     	; 0x1194 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)+0x24>
    1174:	ee eb       	ldi	r30, 0xBE	; 190
    1176:	f4 e4       	ldi	r31, 0x44	; 68
    1178:	23 e1       	ldi	r18, 0x13	; 19
    117a:	37 e4       	ldi	r19, 0x47	; 71
    117c:	93 81       	ldd	r25, Z+3	; 0x03
    117e:	91 93       	st	Z+, r25
    1180:	2e 17       	cp	r18, r30
    1182:	3f 07       	cpc	r19, r31
    1184:	d9 f7       	brne	.-10     	; 0x117c <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)+0xc>
    1186:	80 93 13 47 	sts	0x4713, r24	; 0x804713 <pixels+0x255>
    118a:	60 93 14 47 	sts	0x4714, r22	; 0x804714 <pixels+0x256>
    118e:	40 93 15 47 	sts	0x4715, r20	; 0x804715 <pixels+0x257>
    1192:	08 95       	ret
    1194:	e3 e1       	ldi	r30, 0x13	; 19
    1196:	f7 e4       	ldi	r31, 0x47	; 71
    1198:	92 91       	ld	r25, -Z
    119a:	93 83       	std	Z+3, r25	; 0x03
    119c:	94 e4       	ldi	r25, 0x44	; 68
    119e:	ee 3b       	cpi	r30, 0xBE	; 190
    11a0:	f9 07       	cpc	r31, r25
    11a2:	d1 f7       	brne	.-12     	; 0x1198 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)+0x28>
    11a4:	80 93 be 44 	sts	0x44BE, r24	; 0x8044be <pixels>
    11a8:	60 93 bf 44 	sts	0x44BF, r22	; 0x8044bf <pixels+0x1>
    11ac:	40 93 c0 44 	sts	0x44C0, r20	; 0x8044c0 <pixels+0x2>
    11b0:	08 95       	ret

000011b2 <getLeftVal(unsigned char)>:
getLeftVal():
    11b2:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    11b6:	20 91 19 44 	lds	r18, 0x4419	; 0x804419 <currentMode>
    11ba:	98 e0       	ldi	r25, 0x08	; 8
    11bc:	29 9f       	mul	r18, r25
    11be:	90 01       	movw	r18, r0
    11c0:	11 24       	eor	r1, r1
    11c2:	e2 0f       	add	r30, r18
    11c4:	f3 2f       	mov	r31, r19
    11c6:	f1 1d       	adc	r31, r1
    11c8:	e5 5c       	subi	r30, 0xC5	; 197
    11ca:	f9 4f       	sbci	r31, 0xF9	; 249
    11cc:	e4 91       	lpm	r30, Z
    11ce:	ef 31       	cpi	r30, 0x1F	; 31
    11d0:	41 f4       	brne	.+16     	; 0x11e2 <getLeftVal(unsigned char)+0x30>
    11d2:	80 32       	cpi	r24, 0x20	; 32
    11d4:	08 f0       	brcs	.+2      	; 0x11d8 <getLeftVal(unsigned char)+0x26>
    11d6:	8f e1       	ldi	r24, 0x1F	; 31
    11d8:	e8 2f       	mov	r30, r24
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	e7 50       	subi	r30, 0x07	; 7
    11de:	fb 4f       	sbci	r31, 0xFB	; 251
    11e0:	84 91       	lpm	r24, Z
    11e2:	08 95       	ret

000011e4 <EERef::operator=(unsigned char)>:
operator=():
    11e4:	20 91 02 10 	lds	r18, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    11e8:	42 2f       	mov	r20, r18
    11ea:	42 70       	andi	r20, 0x02	; 2
    11ec:	21 fd       	sbrc	r18, 1
    11ee:	fa cf       	rjmp	.-12     	; 0x11e4 <EERef::operator=(unsigned char)>
    11f0:	3f b7       	in	r19, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	2d e9       	ldi	r18, 0x9D	; 157
    11f6:	24 bf       	out	0x34, r18	; 52
    11f8:	40 93 00 10 	sts	0x1000, r20	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    11fc:	43 e1       	ldi	r20, 0x13	; 19
    11fe:	24 bf       	out	0x34, r18	; 52
    1200:	40 93 00 10 	sts	0x1000, r20	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    1204:	dc 01       	movw	r26, r24
    1206:	ed 91       	ld	r30, X+
    1208:	fc 91       	ld	r31, X
    120a:	fc 5e       	subi	r31, 0xEC	; 236
    120c:	60 83       	st	Z, r22
    120e:	3f bf       	out	0x3f, r19	; 63
    1210:	08 95       	ret

00001212 <UartClass::begin(unsigned long)>:
begin():
    1212:	dc 01       	movw	r26, r24
    1214:	ed 91       	ld	r30, X+
    1216:	fc 91       	ld	r31, X
    1218:	00 88       	ldd	r0, Z+16	; 0x10
    121a:	f1 89       	ldd	r31, Z+17	; 0x11
    121c:	e0 2d       	mov	r30, r0
    121e:	23 e0       	ldi	r18, 0x03	; 3
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	09 94       	ijmp

00001224 <Print::flush()>:
flush():
    1224:	08 95       	ret

00001226 <digitalRead>:
check_valid_digital_pin():
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
digitalRead():
    122a:	89 32       	cpi	r24, 0x29	; 41
    122c:	a8 f4       	brcc	.+42     	; 0x1258 <digitalRead+0x32>
    122e:	f9 01       	movw	r30, r18
    1230:	e9 58       	subi	r30, 0x89	; 137
    1232:	ff 4b       	sbci	r31, 0xBF	; 191
    1234:	80 81       	ld	r24, Z
    1236:	8f 3f       	cpi	r24, 0xFF	; 255
    1238:	79 f0       	breq	.+30     	; 0x1258 <digitalRead+0x32>
    123a:	20 56       	subi	r18, 0x60	; 96
    123c:	3f 4b       	sbci	r19, 0xBF	; 191
    123e:	d9 01       	movw	r26, r18
    1240:	ec 91       	ld	r30, X
    1242:	b0 e2       	ldi	r27, 0x20	; 32
    1244:	eb 9f       	mul	r30, r27
    1246:	f0 01       	movw	r30, r0
    1248:	11 24       	eor	r1, r1
    124a:	fc 5f       	subi	r31, 0xFC	; 252
    124c:	90 85       	ldd	r25, Z+8	; 0x08
    124e:	98 23       	and	r25, r24
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	19 f4       	brne	.+6      	; 0x125a <digitalRead+0x34>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	08 95       	ret
    1258:	8f ef       	ldi	r24, 0xFF	; 255
    125a:	08 95       	ret

0000125c <digitalWrite>:
digitalWrite():
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	89 32       	cpi	r24, 0x29	; 41
    1266:	08 f0       	brcs	.+2      	; 0x126a <digitalWrite+0xe>
    1268:	7c c0       	rjmp	.+248    	; 0x1362 <digitalWrite+0x106>
check_valid_digital_pin():
    126a:	90 e0       	ldi	r25, 0x00	; 0
digitalWrite():
    126c:	dc 01       	movw	r26, r24
    126e:	a9 58       	subi	r26, 0x89	; 137
    1270:	bf 4b       	sbci	r27, 0xBF	; 191
    1272:	2c 91       	ld	r18, X
    1274:	2f 3f       	cpi	r18, 0xFF	; 255
    1276:	09 f4       	brne	.+2      	; 0x127a <digitalWrite+0x1e>
    1278:	74 c0       	rjmp	.+232    	; 0x1362 <digitalWrite+0x106>
    127a:	8c 01       	movw	r16, r24
    127c:	00 56       	subi	r16, 0x60	; 96
    127e:	1f 4b       	sbci	r17, 0xBF	; 191
    1280:	e8 01       	movw	r28, r16
    1282:	e8 81       	ld	r30, Y
    1284:	d0 e2       	ldi	r29, 0x20	; 32
    1286:	ed 9f       	mul	r30, r29
    1288:	f0 01       	movw	r30, r0
    128a:	11 24       	eor	r1, r1
    128c:	fc 5f       	subi	r31, 0xFC	; 252
    128e:	61 11       	cpse	r22, r1
    1290:	33 c0       	rjmp	.+102    	; 0x12f8 <digitalWrite+0x9c>
    1292:	26 83       	std	Z+6, r18	; 0x06
    1294:	30 81       	ld	r19, Z
    1296:	23 23       	and	r18, r19
    1298:	ac 01       	movw	r20, r24
    129a:	4c 5c       	subi	r20, 0xCC	; 204
    129c:	5f 4b       	sbci	r21, 0xBF	; 191
    129e:	21 11       	cpse	r18, r1
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <digitalWrite+0x68>
    12a2:	ea 01       	movw	r28, r20
    12a4:	28 81       	ld	r18, Y
    12a6:	30 97       	sbiw	r30, 0x00	; 0
    12a8:	49 f1       	breq	.+82     	; 0x12fc <digitalWrite+0xa0>
    12aa:	2f 3f       	cpi	r18, 0xFF	; 255
    12ac:	39 f1       	breq	.+78     	; 0x12fc <digitalWrite+0xa0>
    12ae:	70 96       	adiw	r30, 0x10	; 16
    12b0:	e2 0f       	add	r30, r18
    12b2:	f1 1d       	adc	r31, r1
    12b4:	3f b7       	in	r19, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	20 81       	ld	r18, Z
    12ba:	61 11       	cpse	r22, r1
    12bc:	22 c0       	rjmp	.+68     	; 0x1302 <digitalWrite+0xa6>
    12be:	27 7f       	andi	r18, 0xF7	; 247
    12c0:	20 83       	st	Z, r18
    12c2:	3f bf       	out	0x3f, r19	; 63
digitalPinToTimerNow():
    12c4:	fa 01       	movw	r30, r20
    12c6:	30 81       	ld	r19, Z
    12c8:	3f 3f       	cpi	r19, 0xFF	; 255
    12ca:	09 f4       	brne	.+2      	; 0x12ce <digitalWrite+0x72>
    12cc:	4a c0       	rjmp	.+148    	; 0x1362 <digitalWrite+0x106>
    12ce:	e8 01       	movw	r28, r16
    12d0:	28 81       	ld	r18, Y
    12d2:	36 30       	cpi	r19, 0x06	; 6
    12d4:	58 f5       	brcc	.+86     	; 0x132c <digitalWrite+0xd0>
    12d6:	30 91 e6 05 	lds	r19, 0x05E6	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
    12da:	43 2f       	mov	r20, r19
    12dc:	47 70       	andi	r20, 0x07	; 7
    12de:	24 13       	cpse	r18, r20
    12e0:	12 c0       	rjmp	.+36     	; 0x1306 <digitalWrite+0xaa>
turnOffPWM():
    12e2:	ec 91       	ld	r30, X
    12e4:	e5 30       	cpi	r30, 0x05	; 5
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <digitalWrite+0x8e>
    12e8:	ee 0f       	add	r30, r30
    12ea:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    12ee:	e0 95       	com	r30
    12f0:	e8 23       	and	r30, r24
    12f2:	e0 93 01 0a 	sts	0x0A01, r30	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    12f6:	35 c0       	rjmp	.+106    	; 0x1362 <digitalWrite+0x106>
digitalWrite():
    12f8:	25 83       	std	Z+5, r18	; 0x05
    12fa:	cc cf       	rjmp	.-104    	; 0x1294 <digitalWrite+0x38>
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	e0 e0       	ldi	r30, 0x00	; 0
    1300:	d9 cf       	rjmp	.-78     	; 0x12b4 <digitalWrite+0x58>
    1302:	28 60       	ori	r18, 0x08	; 8
    1304:	dd cf       	rjmp	.-70     	; 0x12c0 <digitalWrite+0x64>
digitalPinToTimerNow():
    1306:	38 71       	andi	r19, 0x18	; 24
    1308:	69 f4       	brne	.+26     	; 0x1324 <digitalWrite+0xc8>
    130a:	21 30       	cpi	r18, 0x01	; 1
    130c:	79 f4       	brne	.+30     	; 0x132c <digitalWrite+0xd0>
turnOffPWM():
    130e:	ec 91       	ld	r30, X
    1310:	e5 30       	cpi	r30, 0x05	; 5
    1312:	08 f0       	brcs	.+2      	; 0x1316 <digitalWrite+0xba>
    1314:	ee 0f       	add	r30, r30
    1316:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    131a:	e0 95       	com	r30
    131c:	e8 23       	and	r30, r24
    131e:	e0 93 41 0a 	sts	0x0A41, r30	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    1322:	1f c0       	rjmp	.+62     	; 0x1362 <digitalWrite+0x106>
digitalPinToTimerNow():
    1324:	38 31       	cpi	r19, 0x18	; 24
    1326:	11 f4       	brne	.+4      	; 0x132c <digitalWrite+0xd0>
    1328:	26 30       	cpi	r18, 0x06	; 6
    132a:	89 f3       	breq	.-30     	; 0x130e <digitalWrite+0xb2>
    132c:	85 5f       	subi	r24, 0xF5	; 245
    132e:	9f 4b       	sbci	r25, 0xBF	; 191
    1330:	fc 01       	movw	r30, r24
    1332:	80 81       	ld	r24, Z
    1334:	85 ff       	sbrs	r24, 5
    1336:	13 c0       	rjmp	.+38     	; 0x135e <digitalWrite+0x102>
    1338:	30 e1       	ldi	r19, 0x10	; 16
    133a:	83 9f       	mul	r24, r19
    133c:	f0 01       	movw	r30, r0
    133e:	11 24       	eor	r1, r1
    1340:	f7 5f       	subi	r31, 0xF7	; 247
    1342:	91 81       	ldd	r25, Z+1	; 0x01
    1344:	97 70       	andi	r25, 0x07	; 7
    1346:	97 30       	cpi	r25, 0x07	; 7
    1348:	61 f4       	brne	.+24     	; 0x1362 <digitalWrite+0x106>
turnOffPWM():
    134a:	ec 91       	ld	r30, X
    134c:	85 32       	cpi	r24, 0x25	; 37
    134e:	70 f4       	brcc	.+28     	; 0x136c <digitalWrite+0x110>
    1350:	80 32       	cpi	r24, 0x20	; 32
    1352:	98 f4       	brcc	.+38     	; 0x137a <digitalWrite+0x11e>
    1354:	88 30       	cpi	r24, 0x08	; 8
    1356:	e1 f2       	breq	.-72     	; 0x1310 <digitalWrite+0xb4>
    1358:	80 31       	cpi	r24, 0x10	; 16
    135a:	21 f2       	breq	.-120    	; 0x12e4 <digitalWrite+0x88>
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <digitalWrite+0x106>
    135e:	81 11       	cpse	r24, r1
    1360:	f4 cf       	rjmp	.-24     	; 0x134a <digitalWrite+0xee>
digitalWrite():
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	08 95       	ret
turnOffPWM():
    136c:	80 34       	cpi	r24, 0x40	; 64
    136e:	71 f0       	breq	.+28     	; 0x138c <digitalWrite+0x130>
    1370:	80 38       	cpi	r24, 0x80	; 128
    1372:	b9 f7       	brne	.-18     	; 0x1362 <digitalWrite+0x106>
    1374:	10 92 a0 06 	sts	0x06A0, r1	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
    1378:	f4 cf       	rjmp	.-24     	; 0x1362 <digitalWrite+0x106>
    137a:	90 e1       	ldi	r25, 0x10	; 16
    137c:	89 9f       	mul	r24, r25
    137e:	f0 01       	movw	r30, r0
    1380:	11 24       	eor	r1, r1
    1382:	f7 5f       	subi	r31, 0xF7	; 247
    1384:	81 81       	ldd	r24, Z+1	; 0x01
    1386:	8f 7e       	andi	r24, 0xEF	; 239
    1388:	81 83       	std	Z+1, r24	; 0x01
    138a:	eb cf       	rjmp	.-42     	; 0x1362 <digitalWrite+0x106>
    138c:	80 91 92 0b 	lds	r24, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    1390:	8e 23       	and	r24, r30
    1392:	39 f3       	breq	.-50     	; 0x1362 <digitalWrite+0x106>
    1394:	c0 e2       	ldi	r28, 0x20	; 32
    1396:	2c 9f       	mul	r18, r28
    1398:	90 01       	movw	r18, r0
    139a:	11 24       	eor	r1, r1
    139c:	3c 5f       	subi	r19, 0xFC	; 252
    139e:	ef 3f       	cpi	r30, 0xFF	; 255
    13a0:	31 f1       	breq	.+76     	; 0x13ee <digitalWrite+0x192>
    13a2:	20 5f       	subi	r18, 0xF0	; 240
    13a4:	3f 4f       	sbci	r19, 0xFF	; 255
    13a6:	e2 0f       	add	r30, r18
    13a8:	f3 2f       	mov	r31, r19
    13aa:	f1 1d       	adc	r31, r1
    13ac:	4f b7       	in	r20, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    13b4:	9e 7f       	andi	r25, 0xFE	; 254
    13b6:	90 93 80 0b 	sts	0x0B80, r25	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    13ba:	90 91 8e 0b 	lds	r25, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
    13be:	90 ff       	sbrs	r25, 0
    13c0:	fc cf       	rjmp	.-8      	; 0x13ba <digitalWrite+0x15e>
    13c2:	20 91 92 0b 	lds	r18, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	80 95       	com	r24
    13ca:	90 95       	com	r25
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	82 23       	and	r24, r18
    13d0:	93 23       	and	r25, r19
    13d2:	28 ed       	ldi	r18, 0xD8	; 216
    13d4:	24 bf       	out	0x34, r18	; 52
    13d6:	80 93 92 0b 	sts	0x0B92, r24	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    13da:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    13de:	81 60       	ori	r24, 0x01	; 1
    13e0:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    13e4:	80 81       	ld	r24, Z
    13e6:	8f 77       	andi	r24, 0x7F	; 127
    13e8:	80 83       	st	Z, r24
    13ea:	4f bf       	out	0x3f, r20	; 63
    13ec:	ba cf       	rjmp	.-140    	; 0x1362 <digitalWrite+0x106>
digitalWrite():
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	e0 e0       	ldi	r30, 0x00	; 0
    13f2:	dc cf       	rjmp	.-72     	; 0x13ac <digitalWrite+0x150>

000013f4 <hd44780_pinIO::write4bits(unsigned char)>:
write4bits():
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	8c 01       	movw	r16, r24
    13fc:	c6 2f       	mov	r28, r22
    13fe:	fc 01       	movw	r30, r24
    1400:	83 a1       	ldd	r24, Z+35	; 0x23
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	c0 ff       	sbrs	r28, 0
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	29 df       	rcall	.-430    	; 0x125c <digitalWrite>
    140a:	f8 01       	movw	r30, r16
    140c:	84 a1       	ldd	r24, Z+36	; 0x24
    140e:	61 e0       	ldi	r22, 0x01	; 1
    1410:	c1 ff       	sbrs	r28, 1
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	23 df       	rcall	.-442    	; 0x125c <digitalWrite>
    1416:	f8 01       	movw	r30, r16
    1418:	85 a1       	ldd	r24, Z+37	; 0x25
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	c2 ff       	sbrs	r28, 2
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	1d df       	rcall	.-454    	; 0x125c <digitalWrite>
    1422:	f8 01       	movw	r30, r16
    1424:	86 a1       	ldd	r24, Z+38	; 0x26
    1426:	61 e0       	ldi	r22, 0x01	; 1
    1428:	c3 ff       	sbrs	r28, 3
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	14 cf       	rjmp	.-472    	; 0x125c <digitalWrite>

00001434 <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)>:
iowrite():
    1434:	4f 92       	push	r4
    1436:	5f 92       	push	r5
    1438:	6f 92       	push	r6
    143a:	7f 92       	push	r7
    143c:	8f 92       	push	r8
    143e:	9f 92       	push	r9
    1440:	af 92       	push	r10
    1442:	bf 92       	push	r11
    1444:	ef 92       	push	r14
    1446:	ff 92       	push	r15
    1448:	1f 93       	push	r17
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	ec 01       	movw	r28, r24
    1450:	7b 01       	movw	r14, r22
    1452:	14 2f       	mov	r17, r20
    1454:	88 a1       	ldd	r24, Y+32	; 0x20
    1456:	61 e0       	ldi	r22, 0x01	; 1
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	e9 16       	cp	r14, r25
    145c:	f1 04       	cpc	r15, r1
    145e:	09 f0       	breq	.+2      	; 0x1462 <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x2e>
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	fc de       	rcall	.-520    	; 0x125c <digitalWrite>
    1464:	61 2f       	mov	r22, r17
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	84 e0       	ldi	r24, 0x04	; 4
    146a:	75 95       	asr	r23
    146c:	67 95       	ror	r22
    146e:	8a 95       	dec	r24
    1470:	e1 f7       	brne	.-8      	; 0x146a <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x36>
    1472:	ce 01       	movw	r24, r28
    1474:	bf df       	rcall	.-130    	; 0x13f4 <hd44780_pinIO::write4bits(unsigned char)>
waitReady():
    1476:	8c 8c       	ldd	r8, Y+28	; 0x1c
    1478:	9d 8c       	ldd	r9, Y+29	; 0x1d
    147a:	ae 8c       	ldd	r10, Y+30	; 0x1e
    147c:	bf 8c       	ldd	r11, Y+31	; 0x1f
    147e:	48 8c       	ldd	r4, Y+24	; 0x18
    1480:	59 8c       	ldd	r5, Y+25	; 0x19
    1482:	6a 8c       	ldd	r6, Y+26	; 0x1a
    1484:	7b 8c       	ldd	r7, Y+27	; 0x1b
_ZN7hd4478010_waitReadyEmm.isra.0():
    1486:	ff db       	rcall	.-2050   	; 0xc86 <micros>
    1488:	64 19       	sub	r22, r4
    148a:	75 09       	sbc	r23, r5
    148c:	86 09       	sbc	r24, r6
    148e:	97 09       	sbc	r25, r7
    1490:	68 15       	cp	r22, r8
    1492:	79 05       	cpc	r23, r9
    1494:	8a 05       	cpc	r24, r10
    1496:	9b 05       	cpc	r25, r11
    1498:	b0 f3       	brcs	.-20     	; 0x1486 <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x52>
_ZN13hd44780_pinIO11pulseEnableEv.isra.2():
    149a:	61 e0       	ldi	r22, 0x01	; 1
    149c:	8a a1       	ldd	r24, Y+34	; 0x22
    149e:	de de       	rcall	.-580    	; 0x125c <digitalWrite>
_delay_us():
    14a0:	86 e0       	ldi	r24, 0x06	; 6
    14a2:	8a 95       	dec	r24
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x6e>
    14a6:	00 c0       	rjmp	.+0      	; 0x14a8 <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x74>
_ZN13hd44780_pinIO11pulseEnableEv.isra.2():
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	8a a1       	ldd	r24, Y+34	; 0x22
    14ac:	d7 de       	rcall	.-594    	; 0x125c <digitalWrite>
iowrite():
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	e9 16       	cp	r14, r25
    14b2:	f1 04       	cpc	r15, r1
    14b4:	71 f0       	breq	.+28     	; 0x14d2 <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x9e>
    14b6:	61 2f       	mov	r22, r17
    14b8:	6f 70       	andi	r22, 0x0F	; 15
    14ba:	ce 01       	movw	r24, r28
    14bc:	9b df       	rcall	.-202    	; 0x13f4 <hd44780_pinIO::write4bits(unsigned char)>
_ZN13hd44780_pinIO11pulseEnableEv.isra.2():
    14be:	61 e0       	ldi	r22, 0x01	; 1
    14c0:	8a a1       	ldd	r24, Y+34	; 0x22
    14c2:	cc de       	rcall	.-616    	; 0x125c <digitalWrite>
_delay_us():
    14c4:	86 e0       	ldi	r24, 0x06	; 6
    14c6:	8a 95       	dec	r24
    14c8:	f1 f7       	brne	.-4      	; 0x14c6 <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x92>
    14ca:	00 c0       	rjmp	.+0      	; 0x14cc <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x98>
_ZN13hd44780_pinIO11pulseEnableEv.isra.2():
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	8a a1       	ldd	r24, Y+34	; 0x22
    14d0:	c5 de       	rcall	.-630    	; 0x125c <digitalWrite>
iowrite():
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	bf 90       	pop	r11
    14e2:	af 90       	pop	r10
    14e4:	9f 90       	pop	r9
    14e6:	8f 90       	pop	r8
    14e8:	7f 90       	pop	r7
    14ea:	6f 90       	pop	r6
    14ec:	5f 90       	pop	r5
    14ee:	4f 90       	pop	r4
    14f0:	08 95       	ret

000014f2 <pinMode>:
pinMode():
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	89 32       	cpi	r24, 0x29	; 41
    14f8:	98 f4       	brcc	.+38     	; 0x1520 <pinMode+0x2e>
check_valid_digital_pin():
    14fa:	90 e0       	ldi	r25, 0x00	; 0
pinMode():
    14fc:	fc 01       	movw	r30, r24
    14fe:	e9 58       	subi	r30, 0x89	; 137
    1500:	ff 4b       	sbci	r31, 0xBF	; 191
    1502:	20 81       	ld	r18, Z
    1504:	2f 3f       	cpi	r18, 0xFF	; 255
    1506:	61 f0       	breq	.+24     	; 0x1520 <pinMode+0x2e>
    1508:	fc 01       	movw	r30, r24
    150a:	e0 56       	subi	r30, 0x60	; 96
    150c:	ff 4b       	sbci	r31, 0xBF	; 191
    150e:	e0 81       	ld	r30, Z
    1510:	30 e2       	ldi	r19, 0x20	; 32
    1512:	e3 9f       	mul	r30, r19
    1514:	f0 01       	movw	r30, r0
    1516:	11 24       	eor	r1, r1
    1518:	fc 5f       	subi	r31, 0xFC	; 252
    151a:	61 30       	cpi	r22, 0x01	; 1
    151c:	21 f4       	brne	.+8      	; 0x1526 <pinMode+0x34>
    151e:	21 83       	std	Z+1, r18	; 0x01
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	08 95       	ret
    1526:	8c 5c       	subi	r24, 0xCC	; 204
    1528:	9f 4b       	sbci	r25, 0xBF	; 191
    152a:	ec 01       	movw	r28, r24
    152c:	a8 81       	ld	r26, Y
    152e:	30 97       	sbiw	r30, 0x00	; 0
    1530:	91 f0       	breq	.+36     	; 0x1556 <pinMode+0x64>
    1532:	af 3f       	cpi	r26, 0xFF	; 255
    1534:	81 f0       	breq	.+32     	; 0x1556 <pinMode+0x64>
    1536:	cf 01       	movw	r24, r30
    1538:	40 96       	adiw	r24, 0x10	; 16
    153a:	a8 0f       	add	r26, r24
    153c:	b9 2f       	mov	r27, r25
    153e:	b1 1d       	adc	r27, r1
    1540:	9f b7       	in	r25, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	22 83       	std	Z+2, r18	; 0x02
    1546:	8c 91       	ld	r24, X
    1548:	62 30       	cpi	r22, 0x02	; 2
    154a:	41 f4       	brne	.+16     	; 0x155c <pinMode+0x6a>
    154c:	88 60       	ori	r24, 0x08	; 8
    154e:	8c 93       	st	X, r24
    1550:	25 83       	std	Z+5, r18	; 0x05
    1552:	9f bf       	out	0x3f, r25	; 63
    1554:	e5 cf       	rjmp	.-54     	; 0x1520 <pinMode+0x2e>
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	a0 e0       	ldi	r26, 0x00	; 0
    155a:	f2 cf       	rjmp	.-28     	; 0x1540 <pinMode+0x4e>
    155c:	87 7f       	andi	r24, 0xF7	; 247
    155e:	8c 93       	st	X, r24
    1560:	26 83       	std	Z+6, r18	; 0x06
    1562:	f7 cf       	rjmp	.-18     	; 0x1552 <pinMode+0x60>

00001564 <UartClass::begin(unsigned long, unsigned int)>:
begin():
    1564:	7f 92       	push	r7
    1566:	8f 92       	push	r8
    1568:	9f 92       	push	r9
    156a:	af 92       	push	r10
    156c:	bf 92       	push	r11
    156e:	cf 92       	push	r12
    1570:	df 92       	push	r13
    1572:	ef 92       	push	r14
    1574:	ff 92       	push	r15
    1576:	0f 93       	push	r16
    1578:	1f 93       	push	r17
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	ec 01       	movw	r28, r24
    1580:	4a 01       	movw	r8, r20
    1582:	5b 01       	movw	r10, r22
    1584:	72 2e       	mov	r7, r18
    1586:	8e 89       	ldd	r24, Y+22	; 0x16
    1588:	88 23       	and	r24, r24
    158a:	39 f0       	breq	.+14     	; 0x159a <UartClass::begin(unsigned long, unsigned int)+0x36>
    158c:	e8 81       	ld	r30, Y
    158e:	f9 81       	ldd	r31, Y+1	; 0x01
    1590:	02 88       	ldd	r0, Z+18	; 0x12
    1592:	f3 89       	ldd	r31, Z+19	; 0x13
    1594:	e0 2d       	mov	r30, r0
    1596:	ce 01       	movw	r24, r28
    1598:	09 95       	icall
    159a:	0d 89       	ldd	r16, Y+21	; 0x15
    159c:	10 e0       	ldi	r17, 0x00	; 0
    159e:	e1 2c       	mov	r14, r1
    15a0:	81 14       	cp	r8, r1
    15a2:	88 eb       	ldi	r24, 0xB8	; 184
    15a4:	98 06       	cpc	r9, r24
    15a6:	8b e0       	ldi	r24, 0x0B	; 11
    15a8:	a8 06       	cpc	r10, r24
    15aa:	b1 04       	cpc	r11, r1
    15ac:	30 f0       	brcs	.+12     	; 0x15ba <UartClass::begin(unsigned long, unsigned int)+0x56>
    15ae:	b6 94       	lsr	r11
    15b0:	a7 94       	ror	r10
    15b2:	97 94       	ror	r9
    15b4:	87 94       	ror	r8
    15b6:	32 e0       	ldi	r19, 0x02	; 2
    15b8:	e3 2e       	mov	r14, r19
    15ba:	1e 8a       	std	Y+22, r1	; 0x16
    15bc:	ff b6       	in	r15, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	cc 84       	ldd	r12, Y+12	; 0x0c
    15c2:	dd 84       	ldd	r13, Y+13	; 0x0d
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	74 eb       	ldi	r23, 0xB4	; 180
    15c8:	84 ec       	ldi	r24, 0xC4	; 196
    15ca:	94 e0       	ldi	r25, 0x04	; 4
    15cc:	a5 01       	movw	r20, r10
    15ce:	94 01       	movw	r18, r8
    15d0:	0e 94 2d 20 	call	0x405a	; 0x405a <__udivmodsi4>
    15d4:	f6 01       	movw	r30, r12
    15d6:	20 87       	std	Z+8, r18	; 0x08
    15d8:	31 87       	std	Z+9, r19	; 0x09
    15da:	ec 85       	ldd	r30, Y+12	; 0x0c
    15dc:	fd 85       	ldd	r31, Y+13	; 0x0d
    15de:	77 82       	std	Z+7, r7	; 0x07
    15e0:	ec 85       	ldd	r30, Y+12	; 0x0c
    15e2:	fd 85       	ldd	r31, Y+13	; 0x0d
    15e4:	86 81       	ldd	r24, Z+6	; 0x06
    15e6:	89 7f       	andi	r24, 0xF9	; 249
    15e8:	80 6c       	ori	r24, 0xC0	; 192
    15ea:	8e 29       	or	r24, r14
    15ec:	86 83       	std	Z+6, r24	; 0x06
    15ee:	ec 85       	ldd	r30, Y+12	; 0x0c
    15f0:	fd 85       	ldd	r31, Y+13	; 0x0d
    15f2:	85 81       	ldd	r24, Z+5	; 0x05
    15f4:	80 68       	ori	r24, 0x80	; 128
    15f6:	85 83       	std	Z+5, r24	; 0x05
    15f8:	90 91 e2 05 	lds	r25, 0x05E2	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7e05e2>
    15fc:	8c 89       	ldd	r24, Y+20	; 0x14
    15fe:	80 95       	com	r24
    1600:	89 23       	and	r24, r25
    1602:	98 01       	movw	r18, r16
    1604:	22 0f       	add	r18, r18
    1606:	33 1f       	adc	r19, r19
    1608:	02 0f       	add	r16, r18
    160a:	13 1f       	adc	r17, r19
    160c:	c0 0f       	add	r28, r16
    160e:	d1 1f       	adc	r29, r17
    1610:	99 89       	ldd	r25, Y+17	; 0x11
    1612:	89 2b       	or	r24, r25
    1614:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7e05e2>
    1618:	62 e0       	ldi	r22, 0x02	; 2
    161a:	8f 85       	ldd	r24, Y+15	; 0x0f
    161c:	6a df       	rcall	.-300    	; 0x14f2 <pinMode>
    161e:	61 e0       	ldi	r22, 0x01	; 1
    1620:	88 89       	ldd	r24, Y+16	; 0x10
    1622:	67 df       	rcall	.-306    	; 0x14f2 <pinMode>
    1624:	ff be       	out	0x3f, r15	; 63
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	cf 90       	pop	r12
    1636:	bf 90       	pop	r11
    1638:	af 90       	pop	r10
    163a:	9f 90       	pop	r9
    163c:	8f 90       	pop	r8
    163e:	7f 90       	pop	r7
    1640:	08 95       	ret

00001642 <hd44780_pinIO::ioread(hd44780::iotype)>:
ioread():
    1642:	8f 92       	push	r8
    1644:	9f 92       	push	r9
    1646:	af 92       	push	r10
    1648:	bf 92       	push	r11
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	fc 01       	movw	r30, r24
    165c:	21 a1       	ldd	r18, Z+33	; 0x21
    165e:	2f 3f       	cpi	r18, 0xFF	; 255
    1660:	09 f4       	brne	.+2      	; 0x1664 <hd44780_pinIO::ioread(hd44780::iotype)+0x22>
    1662:	89 c0       	rjmp	.+274    	; 0x1776 <hd44780_pinIO::ioread(hd44780::iotype)+0x134>
    1664:	8b 01       	movw	r16, r22
    1666:	ec 01       	movw	r28, r24
waitReady():
    1668:	c4 8c       	ldd	r12, Z+28	; 0x1c
    166a:	d5 8c       	ldd	r13, Z+29	; 0x1d
    166c:	e6 8c       	ldd	r14, Z+30	; 0x1e
    166e:	f7 8c       	ldd	r15, Z+31	; 0x1f
    1670:	80 8c       	ldd	r8, Z+24	; 0x18
    1672:	91 8c       	ldd	r9, Z+25	; 0x19
    1674:	a2 8c       	ldd	r10, Z+26	; 0x1a
    1676:	b3 8c       	ldd	r11, Z+27	; 0x1b
_ZN7hd4478010_waitReadyEmm.isra.0():
    1678:	06 db       	rcall	.-2548   	; 0xc86 <micros>
    167a:	68 19       	sub	r22, r8
    167c:	79 09       	sbc	r23, r9
    167e:	8a 09       	sbc	r24, r10
    1680:	9b 09       	sbc	r25, r11
    1682:	6c 15       	cp	r22, r12
    1684:	7d 05       	cpc	r23, r13
    1686:	8e 05       	cpc	r24, r14
    1688:	9f 05       	cpc	r25, r15
    168a:	b0 f3       	brcs	.-20     	; 0x1678 <hd44780_pinIO::ioread(hd44780::iotype)+0x36>
ioread():
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	8b a1       	ldd	r24, Y+35	; 0x23
    1690:	30 df       	rcall	.-416    	; 0x14f2 <pinMode>
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	8c a1       	ldd	r24, Y+36	; 0x24
    1696:	2d df       	rcall	.-422    	; 0x14f2 <pinMode>
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	8d a1       	ldd	r24, Y+37	; 0x25
    169c:	2a df       	rcall	.-428    	; 0x14f2 <pinMode>
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	8e a1       	ldd	r24, Y+38	; 0x26
    16a2:	27 df       	rcall	.-434    	; 0x14f2 <pinMode>
    16a4:	61 e0       	ldi	r22, 0x01	; 1
    16a6:	01 30       	cpi	r16, 0x01	; 1
    16a8:	11 05       	cpc	r17, r1
    16aa:	09 f0       	breq	.+2      	; 0x16ae <hd44780_pinIO::ioread(hd44780::iotype)+0x6c>
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	88 a1       	ldd	r24, Y+32	; 0x20
    16b0:	d5 dd       	rcall	.-1110   	; 0x125c <digitalWrite>
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	89 a1       	ldd	r24, Y+33	; 0x21
    16b6:	d2 dd       	rcall	.-1116   	; 0x125c <digitalWrite>
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	8a a1       	ldd	r24, Y+34	; 0x22
    16bc:	cf dd       	rcall	.-1122   	; 0x125c <digitalWrite>
_delay_us():
    16be:	f6 e0       	ldi	r31, 0x06	; 6
    16c0:	fa 95       	dec	r31
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <hd44780_pinIO::ioread(hd44780::iotype)+0x7e>
    16c4:	00 c0       	rjmp	.+0      	; 0x16c6 <hd44780_pinIO::ioread(hd44780::iotype)+0x84>
ioread():
    16c6:	8b a1       	ldd	r24, Y+35	; 0x23
    16c8:	ae dd       	rcall	.-1188   	; 0x1226 <digitalRead>
    16ca:	10 e1       	ldi	r17, 0x10	; 16
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <hd44780_pinIO::ioread(hd44780::iotype)+0x90>
    16d0:	10 e0       	ldi	r17, 0x00	; 0
    16d2:	8c a1       	ldd	r24, Y+36	; 0x24
    16d4:	a8 dd       	rcall	.-1200   	; 0x1226 <digitalRead>
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	09 f4       	brne	.+2      	; 0x16dc <hd44780_pinIO::ioread(hd44780::iotype)+0x9a>
    16da:	10 62       	ori	r17, 0x20	; 32
    16dc:	8d a1       	ldd	r24, Y+37	; 0x25
    16de:	a3 dd       	rcall	.-1210   	; 0x1226 <digitalRead>
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <hd44780_pinIO::ioread(hd44780::iotype)+0xa4>
    16e4:	10 64       	ori	r17, 0x40	; 64
    16e6:	8e a1       	ldd	r24, Y+38	; 0x26
    16e8:	9e dd       	rcall	.-1220   	; 0x1226 <digitalRead>
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <hd44780_pinIO::ioread(hd44780::iotype)+0xae>
    16ee:	10 68       	ori	r17, 0x80	; 128
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	8a a1       	ldd	r24, Y+34	; 0x22
    16f4:	b3 dd       	rcall	.-1178   	; 0x125c <digitalWrite>
_delay_us():
    16f6:	86 e0       	ldi	r24, 0x06	; 6
    16f8:	8a 95       	dec	r24
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <hd44780_pinIO::ioread(hd44780::iotype)+0xb6>
    16fc:	00 c0       	rjmp	.+0      	; 0x16fe <hd44780_pinIO::ioread(hd44780::iotype)+0xbc>
ioread():
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	8a a1       	ldd	r24, Y+34	; 0x22
    1702:	ac dd       	rcall	.-1192   	; 0x125c <digitalWrite>
_delay_us():
    1704:	e6 e0       	ldi	r30, 0x06	; 6
    1706:	ea 95       	dec	r30
    1708:	f1 f7       	brne	.-4      	; 0x1706 <hd44780_pinIO::ioread(hd44780::iotype)+0xc4>
    170a:	00 c0       	rjmp	.+0      	; 0x170c <hd44780_pinIO::ioread(hd44780::iotype)+0xca>
ioread():
    170c:	8b a1       	ldd	r24, Y+35	; 0x23
    170e:	8b dd       	rcall	.-1258   	; 0x1226 <digitalRead>
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	09 f4       	brne	.+2      	; 0x1716 <hd44780_pinIO::ioread(hd44780::iotype)+0xd4>
    1714:	11 60       	ori	r17, 0x01	; 1
    1716:	8c a1       	ldd	r24, Y+36	; 0x24
    1718:	86 dd       	rcall	.-1268   	; 0x1226 <digitalRead>
    171a:	81 30       	cpi	r24, 0x01	; 1
    171c:	09 f4       	brne	.+2      	; 0x1720 <hd44780_pinIO::ioread(hd44780::iotype)+0xde>
    171e:	12 60       	ori	r17, 0x02	; 2
    1720:	8d a1       	ldd	r24, Y+37	; 0x25
    1722:	81 dd       	rcall	.-1278   	; 0x1226 <digitalRead>
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	09 f4       	brne	.+2      	; 0x172a <hd44780_pinIO::ioread(hd44780::iotype)+0xe8>
    1728:	14 60       	ori	r17, 0x04	; 4
    172a:	8e a1       	ldd	r24, Y+38	; 0x26
    172c:	7c dd       	rcall	.-1288   	; 0x1226 <digitalRead>
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	09 f4       	brne	.+2      	; 0x1734 <hd44780_pinIO::ioread(hd44780::iotype)+0xf2>
    1732:	18 60       	ori	r17, 0x08	; 8
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	8a a1       	ldd	r24, Y+34	; 0x22
    1738:	91 dd       	rcall	.-1246   	; 0x125c <digitalWrite>
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	8b a1       	ldd	r24, Y+35	; 0x23
    173e:	d9 de       	rcall	.-590    	; 0x14f2 <pinMode>
    1740:	61 e0       	ldi	r22, 0x01	; 1
    1742:	8c a1       	ldd	r24, Y+36	; 0x24
    1744:	d6 de       	rcall	.-596    	; 0x14f2 <pinMode>
    1746:	61 e0       	ldi	r22, 0x01	; 1
    1748:	8d a1       	ldd	r24, Y+37	; 0x25
    174a:	d3 de       	rcall	.-602    	; 0x14f2 <pinMode>
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	8e a1       	ldd	r24, Y+38	; 0x26
    1750:	d0 de       	rcall	.-608    	; 0x14f2 <pinMode>
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	89 a1       	ldd	r24, Y+33	; 0x21
    1756:	82 dd       	rcall	.-1276   	; 0x125c <digitalWrite>
    1758:	81 2f       	mov	r24, r17
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	ff 90       	pop	r15
    1766:	ef 90       	pop	r14
    1768:	df 90       	pop	r13
    176a:	cf 90       	pop	r12
    176c:	bf 90       	pop	r11
    176e:	af 90       	pop	r10
    1770:	9f 90       	pop	r9
    1772:	8f 90       	pop	r8
    1774:	08 95       	ret
    1776:	8d ef       	ldi	r24, 0xFD	; 253
    1778:	9f ef       	ldi	r25, 0xFF	; 255
    177a:	f0 cf       	rjmp	.-32     	; 0x175c <hd44780_pinIO::ioread(hd44780::iotype)+0x11a>

0000177c <hd44780_pinIO::ioinit()>:
ioinit():
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	ec 01       	movw	r28, r24
    1786:	61 e0       	ldi	r22, 0x01	; 1
    1788:	88 a1       	ldd	r24, Y+32	; 0x20
    178a:	b3 de       	rcall	.-666    	; 0x14f2 <pinMode>
    178c:	89 a1       	ldd	r24, Y+33	; 0x21
    178e:	8f 3f       	cpi	r24, 0xFF	; 255
    1790:	29 f0       	breq	.+10     	; 0x179c <hd44780_pinIO::ioinit()+0x20>
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	ae de       	rcall	.-676    	; 0x14f2 <pinMode>
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	89 a1       	ldd	r24, Y+33	; 0x21
    179a:	60 dd       	rcall	.-1344   	; 0x125c <digitalWrite>
    179c:	61 e0       	ldi	r22, 0x01	; 1
    179e:	8a a1       	ldd	r24, Y+34	; 0x22
    17a0:	a8 de       	rcall	.-688    	; 0x14f2 <pinMode>
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	8a a1       	ldd	r24, Y+34	; 0x22
    17a6:	5a dd       	rcall	.-1356   	; 0x125c <digitalWrite>
    17a8:	61 e0       	ldi	r22, 0x01	; 1
    17aa:	8b a1       	ldd	r24, Y+35	; 0x23
    17ac:	a2 de       	rcall	.-700    	; 0x14f2 <pinMode>
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	8c a1       	ldd	r24, Y+36	; 0x24
    17b2:	9f de       	rcall	.-706    	; 0x14f2 <pinMode>
    17b4:	61 e0       	ldi	r22, 0x01	; 1
    17b6:	8d a1       	ldd	r24, Y+37	; 0x25
    17b8:	9c de       	rcall	.-712    	; 0x14f2 <pinMode>
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	8e a1       	ldd	r24, Y+38	; 0x26
    17be:	99 de       	rcall	.-718    	; 0x14f2 <pinMode>
    17c0:	1f a1       	ldd	r17, Y+39	; 0x27
    17c2:	1f 3f       	cpi	r17, 0xFF	; 255
    17c4:	19 f1       	breq	.+70     	; 0x180c <hd44780_pinIO::ioinit()+0x90>
    17c6:	88 a5       	ldd	r24, Y+40	; 0x28
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	e9 f4       	brne	.+58     	; 0x1806 <hd44780_pinIO::ioinit()+0x8a>
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	81 2f       	mov	r24, r17
    17d0:	45 dd       	rcall	.-1398   	; 0x125c <digitalWrite>
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	81 2f       	mov	r24, r17
    17d6:	8d de       	rcall	.-742    	; 0x14f2 <pinMode>
    17d8:	61 e0       	ldi	r22, 0x01	; 1
    17da:	81 2f       	mov	r24, r17
    17dc:	8a de       	rcall	.-748    	; 0x14f2 <pinMode>
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	81 2f       	mov	r24, r17
    17e2:	3c dd       	rcall	.-1416   	; 0x125c <digitalWrite>
_delay_us():
    17e4:	81 e2       	ldi	r24, 0x21	; 33
    17e6:	8a 95       	dec	r24
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <hd44780_pinIO::ioinit()+0x6a>
    17ea:	00 00       	nop
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    17ec:	81 2f       	mov	r24, r17
    17ee:	1b dd       	rcall	.-1482   	; 0x1226 <digitalRead>
    17f0:	08 2f       	mov	r16, r24
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	81 2f       	mov	r24, r17
    17f6:	32 dd       	rcall	.-1436   	; 0x125c <digitalWrite>
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	81 2f       	mov	r24, r17
    17fc:	7a de       	rcall	.-780    	; 0x14f2 <pinMode>
    17fe:	01 30       	cpi	r16, 0x01	; 1
    1800:	11 f0       	breq	.+4      	; 0x1806 <hd44780_pinIO::ioinit()+0x8a>
ioinit():
    1802:	8e ef       	ldi	r24, 0xFE	; 254
    1804:	88 a7       	std	Y+40, r24	; 0x28
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	8f a1       	ldd	r24, Y+39	; 0x27
    180a:	73 de       	rcall	.-794    	; 0x14f2 <pinMode>
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	08 95       	ret

0000181a <analogWrite>:
analogWrite():
    181a:	ef 92       	push	r14
    181c:	ff 92       	push	r15
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	d8 2f       	mov	r29, r24
    1828:	8b 01       	movw	r16, r22
    182a:	89 32       	cpi	r24, 0x29	; 41
    182c:	08 f0       	brcs	.+2      	; 0x1830 <analogWrite+0x16>
    182e:	41 c0       	rjmp	.+130    	; 0x18b2 <analogWrite+0x98>
check_valid_digital_pin():
    1830:	e8 2e       	mov	r14, r24
    1832:	f1 2c       	mov	r15, r1
analogWrite():
    1834:	f7 01       	movw	r30, r14
    1836:	e9 58       	subi	r30, 0x89	; 137
    1838:	ff 4b       	sbci	r31, 0xBF	; 191
    183a:	c0 81       	ld	r28, Z
    183c:	cf 3f       	cpi	r28, 0xFF	; 255
    183e:	c9 f1       	breq	.+114    	; 0x18b2 <analogWrite+0x98>
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	57 de       	rcall	.-850    	; 0x14f2 <pinMode>
    1844:	f7 01       	movw	r30, r14
    1846:	e5 5f       	subi	r30, 0xF5	; 245
    1848:	ff 4b       	sbci	r31, 0xBF	; 191
    184a:	e0 81       	ld	r30, Z
    184c:	e0 38       	cpi	r30, 0x80	; 128
    184e:	09 f4       	brne	.+2      	; 0x1852 <analogWrite+0x38>
    1850:	e8 c0       	rjmp	.+464    	; 0x1a22 <analogWrite+0x208>
    1852:	01 15       	cp	r16, r1
    1854:	11 05       	cpc	r17, r1
    1856:	49 f4       	brne	.+18     	; 0x186a <analogWrite+0x50>
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	8d 2f       	mov	r24, r29
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	f9 cc       	rjmp	.-1550   	; 0x125c <digitalWrite>
    186a:	0f 3f       	cpi	r16, 0xFF	; 255
    186c:	11 05       	cpc	r17, r1
    186e:	11 f4       	brne	.+4      	; 0x1874 <analogWrite+0x5a>
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	f3 cf       	rjmp	.-26     	; 0x185a <analogWrite+0x40>
    1874:	c0 34       	cpi	r28, 0x40	; 64
    1876:	08 f0       	brcs	.+2      	; 0x187a <analogWrite+0x60>
    1878:	d8 c0       	rjmp	.+432    	; 0x1a2a <analogWrite+0x210>
    187a:	d7 01       	movw	r26, r14
    187c:	a0 56       	subi	r26, 0x60	; 96
    187e:	bf 4b       	sbci	r27, 0xBF	; 191
    1880:	9c 91       	ld	r25, X
    1882:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
    1886:	28 2f       	mov	r18, r24
    1888:	27 70       	andi	r18, 0x07	; 7
    188a:	29 13       	cpse	r18, r25
    188c:	1e c0       	rjmp	.+60     	; 0x18ca <analogWrite+0xb0>
    188e:	e0 e0       	ldi	r30, 0x00	; 0
    1890:	c5 30       	cpi	r28, 0x05	; 5
    1892:	10 f0       	brcs	.+4      	; 0x1898 <analogWrite+0x7e>
    1894:	cc 0f       	add	r28, r28
    1896:	e1 e0       	ldi	r30, 0x01	; 1
    1898:	8c 2f       	mov	r24, r28
    189a:	84 74       	andi	r24, 0x44	; 68
    189c:	89 f0       	breq	.+34     	; 0x18c0 <analogWrite+0xa6>
    189e:	ec 5f       	subi	r30, 0xFC	; 252
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	e8 5d       	subi	r30, 0xD8	; 216
    18a4:	f5 4f       	sbci	r31, 0xF5	; 245
    18a6:	00 83       	st	Z, r16
    18a8:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    18ac:	c8 2b       	or	r28, r24
    18ae:	c0 93 01 0a 	sts	0x0A01, r28	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	ef 90       	pop	r14
    18be:	08 95       	ret
    18c0:	8c 2f       	mov	r24, r28
    18c2:	82 72       	andi	r24, 0x22	; 34
    18c4:	69 f3       	breq	.-38     	; 0x18a0 <analogWrite+0x86>
    18c6:	ee 5f       	subi	r30, 0xFE	; 254
    18c8:	eb cf       	rjmp	.-42     	; 0x18a0 <analogWrite+0x86>
    18ca:	88 71       	andi	r24, 0x18	; 24
    18cc:	96 30       	cpi	r25, 0x06	; 6
    18ce:	a9 f4       	brne	.+42     	; 0x18fa <analogWrite+0xe0>
    18d0:	88 31       	cpi	r24, 0x18	; 24
    18d2:	b9 f4       	brne	.+46     	; 0x1902 <analogWrite+0xe8>
    18d4:	e0 e0       	ldi	r30, 0x00	; 0
    18d6:	c5 30       	cpi	r28, 0x05	; 5
    18d8:	10 f0       	brcs	.+4      	; 0x18de <analogWrite+0xc4>
    18da:	cc 0f       	add	r28, r28
    18dc:	e1 e0       	ldi	r30, 0x01	; 1
    18de:	8c 2f       	mov	r24, r28
    18e0:	84 74       	andi	r24, 0x44	; 68
    18e2:	d9 f0       	breq	.+54     	; 0x191a <analogWrite+0x100>
    18e4:	ec 5f       	subi	r30, 0xFC	; 252
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	e8 59       	subi	r30, 0x98	; 152
    18ea:	f5 4f       	sbci	r31, 0xF5	; 245
    18ec:	00 83       	st	Z, r16
    18ee:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    18f2:	c8 2b       	or	r28, r24
    18f4:	c0 93 41 0a 	sts	0x0A41, r28	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    18f8:	dc cf       	rjmp	.-72     	; 0x18b2 <analogWrite+0x98>
    18fa:	91 30       	cpi	r25, 0x01	; 1
    18fc:	11 f4       	brne	.+4      	; 0x1902 <analogWrite+0xe8>
    18fe:	88 23       	and	r24, r24
    1900:	49 f3       	breq	.-46     	; 0x18d4 <analogWrite+0xba>
    1902:	e0 34       	cpi	r30, 0x40	; 64
    1904:	39 f1       	breq	.+78     	; 0x1954 <analogWrite+0x13a>
    1906:	70 f4       	brcc	.+28     	; 0x1924 <analogWrite+0x10a>
    1908:	80 ee       	ldi	r24, 0xE0	; 224
    190a:	8e 0f       	add	r24, r30
    190c:	85 30       	cpi	r24, 0x05	; 5
    190e:	90 f0       	brcs	.+36     	; 0x1934 <analogWrite+0x11a>
    1910:	00 38       	cpi	r16, 0x80	; 128
    1912:	11 05       	cpc	r17, r1
    1914:	0c f0       	brlt	.+2      	; 0x1918 <analogWrite+0xfe>
    1916:	ac cf       	rjmp	.-168    	; 0x1870 <analogWrite+0x56>
    1918:	9f cf       	rjmp	.-194    	; 0x1858 <analogWrite+0x3e>
    191a:	8c 2f       	mov	r24, r28
    191c:	82 72       	andi	r24, 0x22	; 34
    191e:	19 f3       	breq	.-58     	; 0x18e6 <analogWrite+0xcc>
    1920:	ee 5f       	subi	r30, 0xFE	; 254
    1922:	e1 cf       	rjmp	.-62     	; 0x18e6 <analogWrite+0xcc>
    1924:	e0 38       	cpi	r30, 0x80	; 128
    1926:	a1 f7       	brne	.-24     	; 0x1910 <analogWrite+0xf6>
    1928:	00 93 a3 06 	sts	0x06A3, r16	; 0x8006a3 <__TEXT_REGION_LENGTH__+0x7e06a3>
    192c:	81 e4       	ldi	r24, 0x41	; 65
    192e:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
    1932:	bf cf       	rjmp	.-130    	; 0x18b2 <analogWrite+0x98>
    1934:	30 e1       	ldi	r19, 0x10	; 16
    1936:	e3 9f       	mul	r30, r19
    1938:	f0 01       	movw	r30, r0
    193a:	11 24       	eor	r1, r1
    193c:	f7 5f       	subi	r31, 0xF7	; 247
    193e:	81 81       	ldd	r24, Z+1	; 0x01
    1940:	87 70       	andi	r24, 0x07	; 7
    1942:	87 30       	cpi	r24, 0x07	; 7
    1944:	29 f7       	brne	.-54     	; 0x1910 <analogWrite+0xf6>
    1946:	84 85       	ldd	r24, Z+12	; 0x0c
    1948:	84 87       	std	Z+12, r24	; 0x0c
    194a:	05 87       	std	Z+13, r16	; 0x0d
    194c:	81 81       	ldd	r24, Z+1	; 0x01
    194e:	80 61       	ori	r24, 0x10	; 16
    1950:	81 83       	std	Z+1, r24	; 0x01
    1952:	af cf       	rjmp	.-162    	; 0x18b2 <analogWrite+0x98>
    1954:	01 15       	cp	r16, r1
    1956:	11 05       	cpc	r17, r1
    1958:	19 f0       	breq	.+6      	; 0x1960 <analogWrite+0x146>
    195a:	0f 3f       	cpi	r16, 0xFF	; 255
    195c:	11 05       	cpc	r17, r1
    195e:	11 f0       	breq	.+4      	; 0x1964 <analogWrite+0x14a>
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	03 c0       	rjmp	.+6      	; 0x196a <analogWrite+0x150>
    1964:	21 e0       	ldi	r18, 0x01	; 1
    1966:	10 e0       	ldi	r17, 0x00	; 0
    1968:	00 e0       	ldi	r16, 0x00	; 0
    196a:	8f ef       	ldi	r24, 0xFF	; 255
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	80 1b       	sub	r24, r16
    1970:	91 0b       	sbc	r25, r17
    1972:	30 91 ae 0b 	lds	r19, 0x0BAE	; 0x800bae <__TEXT_REGION_LENGTH__+0x7e0bae>
    1976:	30 91 af 0b 	lds	r19, 0x0BAF	; 0x800baf <__TEXT_REGION_LENGTH__+0x7e0baf>
    197a:	33 23       	and	r19, r19
    197c:	29 f0       	breq	.+10     	; 0x1988 <analogWrite+0x16e>
    197e:	33 30       	cpi	r19, 0x03	; 3
    1980:	08 f0       	brcs	.+2      	; 0x1984 <analogWrite+0x16a>
    1982:	3c c0       	rjmp	.+120    	; 0x19fc <analogWrite+0x1e2>
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	f7 01       	movw	r30, r14
    198a:	e0 56       	subi	r30, 0x60	; 96
    198c:	ff 4b       	sbci	r31, 0xBF	; 191
    198e:	e0 81       	ld	r30, Z
    1990:	30 e2       	ldi	r19, 0x20	; 32
    1992:	e3 9f       	mul	r30, r19
    1994:	f0 01       	movw	r30, r0
    1996:	11 24       	eor	r1, r1
    1998:	fc 5f       	subi	r31, 0xFC	; 252
    199a:	d7 01       	movw	r26, r14
    199c:	ac 5c       	subi	r26, 0xCC	; 204
    199e:	bf 4b       	sbci	r27, 0xBF	; 191
    19a0:	3c 91       	ld	r19, X
    19a2:	3f 3f       	cpi	r19, 0xFF	; 255
    19a4:	81 f1       	breq	.+96     	; 0x1a06 <analogWrite+0x1ec>
    19a6:	70 96       	adiw	r30, 0x10	; 16
    19a8:	e3 0f       	add	r30, r19
    19aa:	f1 1d       	adc	r31, r1
    19ac:	3f b7       	in	r19, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	4c 2f       	mov	r20, r28
    19b4:	4a 7a       	andi	r20, 0xAA	; 170
    19b6:	51 f1       	breq	.+84     	; 0x1a0c <analogWrite+0x1f2>
    19b8:	80 93 ac 0b 	sts	0x0BAC, r24	; 0x800bac <__TEXT_REGION_LENGTH__+0x7e0bac>
    19bc:	90 93 ad 0b 	sts	0x0BAD, r25	; 0x800bad <__TEXT_REGION_LENGTH__+0x7e0bad>
    19c0:	80 91 92 0b 	lds	r24, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    19c4:	8c 23       	and	r24, r28
    19c6:	39 f5       	brne	.+78     	; 0x1a16 <analogWrite+0x1fc>
    19c8:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    19cc:	89 2f       	mov	r24, r25
    19ce:	8e 7f       	andi	r24, 0xFE	; 254
    19d0:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    19d4:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
    19d8:	80 ff       	sbrs	r24, 0
    19da:	fc cf       	rjmp	.-8      	; 0x19d4 <analogWrite+0x1ba>
    19dc:	80 91 92 0b 	lds	r24, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    19e0:	c8 2b       	or	r28, r24
    19e2:	88 ed       	ldi	r24, 0xD8	; 216
    19e4:	84 bf       	out	0x34, r24	; 52
    19e6:	c0 93 92 0b 	sts	0x0B92, r28	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    19ea:	90 93 80 0b 	sts	0x0B80, r25	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    19ee:	80 81       	ld	r24, Z
    19f0:	21 11       	cpse	r18, r1
    19f2:	15 c0       	rjmp	.+42     	; 0x1a1e <analogWrite+0x204>
    19f4:	8f 77       	andi	r24, 0x7F	; 127
    19f6:	80 83       	st	Z, r24
    19f8:	3f bf       	out	0x3f, r19	; 63
    19fa:	5b cf       	rjmp	.-330    	; 0x18b2 <analogWrite+0x98>
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	c1 cf       	rjmp	.-126    	; 0x1988 <analogWrite+0x16e>
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	e0 e0       	ldi	r30, 0x00	; 0
    1a0a:	d0 cf       	rjmp	.-96     	; 0x19ac <analogWrite+0x192>
    1a0c:	80 93 a8 0b 	sts	0x0BA8, r24	; 0x800ba8 <__TEXT_REGION_LENGTH__+0x7e0ba8>
    1a10:	90 93 a9 0b 	sts	0x0BA9, r25	; 0x800ba9 <__TEXT_REGION_LENGTH__+0x7e0ba9>
    1a14:	d5 cf       	rjmp	.-86     	; 0x19c0 <analogWrite+0x1a6>
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <__TEXT_REGION_LENGTH__+0x7e0b84>
    1a1c:	e8 cf       	rjmp	.-48     	; 0x19ee <analogWrite+0x1d4>
    1a1e:	80 68       	ori	r24, 0x80	; 128
    1a20:	ea cf       	rjmp	.-44     	; 0x19f6 <analogWrite+0x1dc>
    1a22:	c0 34       	cpi	r28, 0x40	; 64
    1a24:	08 f4       	brcc	.+2      	; 0x1a28 <analogWrite+0x20e>
    1a26:	29 cf       	rjmp	.-430    	; 0x187a <analogWrite+0x60>
    1a28:	7f cf       	rjmp	.-258    	; 0x1928 <analogWrite+0x10e>
    1a2a:	e0 32       	cpi	r30, 0x20	; 32
    1a2c:	08 f4       	brcc	.+2      	; 0x1a30 <analogWrite+0x216>
    1a2e:	70 cf       	rjmp	.-288    	; 0x1910 <analogWrite+0xf6>
    1a30:	e5 32       	cpi	r30, 0x25	; 37
    1a32:	08 f4       	brcc	.+2      	; 0x1a36 <analogWrite+0x21c>
    1a34:	7f cf       	rjmp	.-258    	; 0x1934 <analogWrite+0x11a>
    1a36:	e0 34       	cpi	r30, 0x40	; 64
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <analogWrite+0x222>
    1a3a:	92 cf       	rjmp	.-220    	; 0x1960 <analogWrite+0x146>
    1a3c:	69 cf       	rjmp	.-302    	; 0x1910 <analogWrite+0xf6>

00001a3e <hd44780_pinIO::iosetBacklight(unsigned char)>:
iosetBacklight():
    1a3e:	fc 01       	movw	r30, r24
    1a40:	87 a1       	ldd	r24, Z+39	; 0x27
    1a42:	8f 3f       	cpi	r24, 0xFF	; 255
    1a44:	59 f1       	breq	.+86     	; 0x1a9c <hd44780_pinIO::iosetBacklight(unsigned char)+0x5e>
    1a46:	90 a5       	ldd	r25, Z+40	; 0x28
    1a48:	9e 3f       	cpi	r25, 0xFE	; 254
    1a4a:	49 f4       	brne	.+18     	; 0x1a5e <hd44780_pinIO::iosetBacklight(unsigned char)+0x20>
    1a4c:	66 23       	and	r22, r22
    1a4e:	29 f0       	breq	.+10     	; 0x1a5a <hd44780_pinIO::iosetBacklight(unsigned char)+0x1c>
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	4f dd       	rcall	.-1378   	; 0x14f2 <pinMode>
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	08 95       	ret
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	fa cf       	rjmp	.-12     	; 0x1a52 <hd44780_pinIO::iosetBacklight(unsigned char)+0x14>
    1a5e:	2a ed       	ldi	r18, 0xDA	; 218
    1a60:	28 0f       	add	r18, r24
    1a62:	22 30       	cpi	r18, 0x02	; 2
    1a64:	20 f0       	brcs	.+8      	; 0x1a6e <hd44780_pinIO::iosetBacklight(unsigned char)+0x30>
    1a66:	2c ef       	ldi	r18, 0xFC	; 252
    1a68:	28 0f       	add	r18, r24
    1a6a:	20 31       	cpi	r18, 0x10	; 16
    1a6c:	60 f4       	brcc	.+24     	; 0x1a86 <hd44780_pinIO::iosetBacklight(unsigned char)+0x48>
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	91 30       	cpi	r25, 0x01	; 1
    1a72:	11 f4       	brne	.+4      	; 0x1a78 <hd44780_pinIO::iosetBacklight(unsigned char)+0x3a>
    1a74:	d2 de       	rcall	.-604    	; 0x181a <analogWrite>
    1a76:	ee cf       	rjmp	.-36     	; 0x1a54 <hd44780_pinIO::iosetBacklight(unsigned char)+0x16>
    1a78:	2f ef       	ldi	r18, 0xFF	; 255
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	a9 01       	movw	r20, r18
    1a7e:	46 1b       	sub	r20, r22
    1a80:	57 0b       	sbc	r21, r23
    1a82:	ba 01       	movw	r22, r20
    1a84:	f7 cf       	rjmp	.-18     	; 0x1a74 <hd44780_pinIO::iosetBacklight(unsigned char)+0x36>
    1a86:	66 23       	and	r22, r22
    1a88:	29 f0       	breq	.+10     	; 0x1a94 <hd44780_pinIO::iosetBacklight(unsigned char)+0x56>
    1a8a:	91 30       	cpi	r25, 0x01	; 1
    1a8c:	29 f4       	brne	.+10     	; 0x1a98 <hd44780_pinIO::iosetBacklight(unsigned char)+0x5a>
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	e5 db       	rcall	.-2102   	; 0x125c <digitalWrite>
    1a92:	e0 cf       	rjmp	.-64     	; 0x1a54 <hd44780_pinIO::iosetBacklight(unsigned char)+0x16>
    1a94:	99 23       	and	r25, r25
    1a96:	d9 f3       	breq	.-10     	; 0x1a8e <hd44780_pinIO::iosetBacklight(unsigned char)+0x50>
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	fa cf       	rjmp	.-12     	; 0x1a90 <hd44780_pinIO::iosetBacklight(unsigned char)+0x52>
    1a9c:	8d ef       	ldi	r24, 0xFD	; 253
    1a9e:	9f ef       	ldi	r25, 0xFF	; 255
    1aa0:	08 95       	ret

00001aa2 <random(long, long)>:
random():
    1aa2:	8f 92       	push	r8
    1aa4:	9f 92       	push	r9
    1aa6:	af 92       	push	r10
    1aa8:	bf 92       	push	r11
    1aaa:	cf 92       	push	r12
    1aac:	df 92       	push	r13
    1aae:	ef 92       	push	r14
    1ab0:	ff 92       	push	r15
    1ab2:	4b 01       	movw	r8, r22
    1ab4:	5c 01       	movw	r10, r24
    1ab6:	82 16       	cp	r8, r18
    1ab8:	93 06       	cpc	r9, r19
    1aba:	a4 06       	cpc	r10, r20
    1abc:	b5 06       	cpc	r11, r21
    1abe:	9c f4       	brge	.+38     	; 0x1ae6 <random(long, long)+0x44>
    1ac0:	69 01       	movw	r12, r18
    1ac2:	7a 01       	movw	r14, r20
    1ac4:	c8 18       	sub	r12, r8
    1ac6:	d9 08       	sbc	r13, r9
    1ac8:	ea 08       	sbc	r14, r10
    1aca:	fb 08       	sbc	r15, r11
    1acc:	41 f0       	breq	.+16     	; 0x1ade <random(long, long)+0x3c>
    1ace:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <random>
    1ad2:	a7 01       	movw	r20, r14
    1ad4:	96 01       	movw	r18, r12
    1ad6:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodsi4>
    1ada:	6b 01       	movw	r12, r22
    1adc:	7c 01       	movw	r14, r24
    1ade:	8c 0c       	add	r8, r12
    1ae0:	9d 1c       	adc	r9, r13
    1ae2:	ae 1c       	adc	r10, r14
    1ae4:	bf 1c       	adc	r11, r15
    1ae6:	c5 01       	movw	r24, r10
    1ae8:	b4 01       	movw	r22, r8
    1aea:	ff 90       	pop	r15
    1aec:	ef 90       	pop	r14
    1aee:	df 90       	pop	r13
    1af0:	cf 90       	pop	r12
    1af2:	bf 90       	pop	r11
    1af4:	af 90       	pop	r10
    1af6:	9f 90       	pop	r9
    1af8:	8f 90       	pop	r8
    1afa:	08 95       	ret

00001afc <initColorsDrift2()>:
initColorsDrift2():
    1afc:	cf 92       	push	r12
    1afe:	df 92       	push	r13
    1b00:	ef 92       	push	r14
    1b02:	ff 92       	push	r15
    1b04:	0f 93       	push	r16
    1b06:	1f 93       	push	r17
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	20 da       	rcall	.-3008   	; 0xf4e <getPalleteNumber()>
    1b0e:	e8 2f       	mov	r30, r24
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	e1 54       	subi	r30, 0x41	; 65
    1b14:	f6 4f       	sbci	r31, 0xF6	; 246
    1b16:	c4 91       	lpm	r28, Z
    1b18:	3b da       	rcall	.-2954   	; 0xf90 <getDwellFrames()>
    1b1a:	8c 01       	movw	r16, r24
    1b1c:	21 da       	rcall	.-3006   	; 0xf60 <getTransitionFrames()>
    1b1e:	80 0f       	add	r24, r16
    1b20:	91 1f       	adc	r25, r17
    1b22:	c8 9f       	mul	r28, r24
    1b24:	60 01       	movw	r12, r0
    1b26:	c9 9f       	mul	r28, r25
    1b28:	d0 0c       	add	r13, r0
    1b2a:	11 24       	eor	r1, r1
    1b2c:	10 e0       	ldi	r17, 0x00	; 0
    1b2e:	00 e0       	ldi	r16, 0x00	; 0
    1b30:	d0 e0       	ldi	r29, 0x00	; 0
    1b32:	c0 e0       	ldi	r28, 0x00	; 0
    1b34:	0d 2c       	mov	r0, r13
    1b36:	00 0c       	add	r0, r0
    1b38:	ee 08       	sbc	r14, r14
    1b3a:	ff 08       	sbc	r15, r15
    1b3c:	a7 01       	movw	r20, r14
    1b3e:	96 01       	movw	r18, r12
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	cb 01       	movw	r24, r22
    1b46:	ad df       	rcall	.-166    	; 0x1aa2 <random(long, long)>
    1b48:	cb 01       	movw	r24, r22
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	f5 95       	asr	r31
    1b4e:	e7 95       	ror	r30
    1b50:	e3 55       	subi	r30, 0x53	; 83
    1b52:	fe 4b       	sbci	r31, 0xBE	; 190
    1b54:	60 83       	st	Z, r22
    1b56:	9e 01       	movw	r18, r28
    1b58:	35 95       	asr	r19
    1b5a:	27 95       	ror	r18
    1b5c:	f9 01       	movw	r30, r18
    1b5e:	ee 0f       	add	r30, r30
    1b60:	ff 1f       	adc	r31, r31
    1b62:	e2 0f       	add	r30, r18
    1b64:	f3 1f       	adc	r31, r19
    1b66:	e1 55       	subi	r30, 0x51	; 81
    1b68:	fe 4b       	sbci	r31, 0xBE	; 190
    1b6a:	c0 ff       	sbrs	r28, 0
    1b6c:	18 c0       	rjmp	.+48     	; 0x1b9e <initColorsDrift2()+0xa2>
    1b6e:	24 e0       	ldi	r18, 0x04	; 4
    1b70:	96 95       	lsr	r25
    1b72:	87 95       	ror	r24
    1b74:	2a 95       	dec	r18
    1b76:	e1 f7       	brne	.-8      	; 0x1b70 <initColorsDrift2()+0x74>
    1b78:	80 7f       	andi	r24, 0xF0	; 240
    1b7a:	90 81       	ld	r25, Z
    1b7c:	89 23       	and	r24, r25
    1b7e:	80 83       	st	Z, r24
    1b80:	21 96       	adiw	r28, 0x01	; 1
    1b82:	0d 5f       	subi	r16, 0xFD	; 253
    1b84:	1f 4f       	sbci	r17, 0xFF	; 255
    1b86:	c8 3c       	cpi	r28, 0xC8	; 200
    1b88:	d1 05       	cpc	r29, r1
    1b8a:	c1 f6       	brne	.-80     	; 0x1b3c <initColorsDrift2()+0x40>
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	ff 90       	pop	r15
    1b96:	ef 90       	pop	r14
    1b98:	df 90       	pop	r13
    1b9a:	cf 90       	pop	r12
    1b9c:	08 95       	ret
    1b9e:	70 83       	st	Z, r23
    1ba0:	ef cf       	rjmp	.-34     	; 0x1b80 <initColorsDrift2()+0x84>

00001ba2 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc.part.2():
    1ba2:	fb 01       	movw	r30, r22
    1ba4:	01 90       	ld	r0, Z+
    1ba6:	00 20       	and	r0, r0
    1ba8:	e9 f7       	brne	.-6      	; 0x1ba4 <Print::write(char const*) [clone .part.2]+0x2>
    1baa:	31 97       	sbiw	r30, 0x01	; 1
    1bac:	af 01       	movw	r20, r30
    1bae:	46 1b       	sub	r20, r22
    1bb0:	57 0b       	sbc	r21, r23
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	ed 91       	ld	r30, X+
    1bb6:	fc 91       	ld	r31, X
    1bb8:	02 80       	ldd	r0, Z+2	; 0x02
    1bba:	f3 81       	ldd	r31, Z+3	; 0x03
    1bbc:	e0 2d       	mov	r30, r0
    1bbe:	09 94       	ijmp

00001bc0 <Print::printNumber(unsigned long, unsigned char)>:
printNumber():
    1bc0:	8f 92       	push	r8
    1bc2:	9f 92       	push	r9
    1bc4:	af 92       	push	r10
    1bc6:	bf 92       	push	r11
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	a1 97       	sbiw	r28, 0x21	; 33
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	7c 01       	movw	r14, r24
    1be0:	fa 01       	movw	r30, r20
    1be2:	cb 01       	movw	r24, r22
    1be4:	19 a2       	std	Y+33, r1	; 0x21
    1be6:	22 30       	cpi	r18, 0x02	; 2
    1be8:	08 f4       	brcc	.+2      	; 0x1bec <Print::printNumber(unsigned long, unsigned char)+0x2c>
    1bea:	2a e0       	ldi	r18, 0x0A	; 10
    1bec:	8e 01       	movw	r16, r28
    1bee:	0f 5d       	subi	r16, 0xDF	; 223
    1bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf2:	82 2e       	mov	r8, r18
    1bf4:	91 2c       	mov	r9, r1
    1bf6:	b1 2c       	mov	r11, r1
    1bf8:	a1 2c       	mov	r10, r1
    1bfa:	bf 01       	movw	r22, r30
    1bfc:	a5 01       	movw	r20, r10
    1bfe:	94 01       	movw	r18, r8
    1c00:	0e 94 2d 20 	call	0x405a	; 0x405a <__udivmodsi4>
    1c04:	f9 01       	movw	r30, r18
    1c06:	ca 01       	movw	r24, r20
    1c08:	6a 30       	cpi	r22, 0x0A	; 10
    1c0a:	ec f4       	brge	.+58     	; 0x1c46 <Print::printNumber(unsigned long, unsigned char)+0x86>
    1c0c:	60 5d       	subi	r22, 0xD0	; 208
    1c0e:	d8 01       	movw	r26, r16
    1c10:	6e 93       	st	-X, r22
    1c12:	8d 01       	movw	r16, r26
    1c14:	23 2b       	or	r18, r19
    1c16:	24 2b       	or	r18, r20
    1c18:	25 2b       	or	r18, r21
    1c1a:	79 f7       	brne	.-34     	; 0x1bfa <Print::printNumber(unsigned long, unsigned char)+0x3a>
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
write():
    1c20:	10 97       	sbiw	r26, 0x00	; 0
    1c22:	19 f0       	breq	.+6      	; 0x1c2a <Print::printNumber(unsigned long, unsigned char)+0x6a>
    1c24:	bd 01       	movw	r22, r26
    1c26:	c7 01       	movw	r24, r14
    1c28:	bc df       	rcall	.-136    	; 0x1ba2 <Print::write(char const*) [clone .part.2]>
printNumber():
    1c2a:	a1 96       	adiw	r28, 0x21	; 33
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	bf 90       	pop	r11
    1c3e:	af 90       	pop	r10
    1c40:	9f 90       	pop	r9
    1c42:	8f 90       	pop	r8
    1c44:	08 95       	ret
    1c46:	69 5c       	subi	r22, 0xC9	; 201
    1c48:	e2 cf       	rjmp	.-60     	; 0x1c0e <Print::printNumber(unsigned long, unsigned char)+0x4e>

00001c4a <Print::printFloat(double, unsigned char) [clone .constprop.11]>:
printFloat():
    1c4a:	4f 92       	push	r4
    1c4c:	5f 92       	push	r5
    1c4e:	6f 92       	push	r6
    1c50:	7f 92       	push	r7
    1c52:	8f 92       	push	r8
    1c54:	9f 92       	push	r9
    1c56:	af 92       	push	r10
    1c58:	bf 92       	push	r11
    1c5a:	cf 92       	push	r12
    1c5c:	df 92       	push	r13
    1c5e:	ef 92       	push	r14
    1c60:	ff 92       	push	r15
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	6b 01       	movw	r12, r22
    1c6a:	7c 01       	movw	r14, r24
    1c6c:	74 2e       	mov	r7, r20
    1c6e:	ac 01       	movw	r20, r24
    1c70:	9b 01       	movw	r18, r22
    1c72:	0e 94 74 22 	call	0x44e8	; 0x44e8 <__unordsf2>
write():
    1c76:	65 ef       	ldi	r22, 0xF5	; 245
    1c78:	70 e4       	ldi	r23, 0x40	; 64
printFloat():
    1c7a:	81 11       	cpse	r24, r1
    1c7c:	26 c0       	rjmp	.+76     	; 0x1cca <Print::printFloat(double, unsigned char) [clone .constprop.11]+0x80>
    1c7e:	46 01       	movw	r8, r12
    1c80:	57 01       	movw	r10, r14
    1c82:	e8 94       	clt
    1c84:	b7 f8       	bld	r11, 7
    1c86:	2f ef       	ldi	r18, 0xFF	; 255
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f e7       	ldi	r20, 0x7F	; 127
    1c8c:	5f e7       	ldi	r21, 0x7F	; 127
    1c8e:	c5 01       	movw	r24, r10
    1c90:	b4 01       	movw	r22, r8
    1c92:	0e 94 74 22 	call	0x44e8	; 0x44e8 <__unordsf2>
    1c96:	81 11       	cpse	r24, r1
    1c98:	0c c0       	rjmp	.+24     	; 0x1cb2 <Print::printFloat(double, unsigned char) [clone .constprop.11]+0x68>
    1c9a:	2f ef       	ldi	r18, 0xFF	; 255
    1c9c:	3f ef       	ldi	r19, 0xFF	; 255
    1c9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ca0:	5f e7       	ldi	r21, 0x7F	; 127
    1ca2:	c5 01       	movw	r24, r10
    1ca4:	b4 01       	movw	r22, r8
    1ca6:	0e 94 c3 20 	call	0x4186	; 0x4186 <__cmpsf2>
write():
    1caa:	69 ef       	ldi	r22, 0xF9	; 249
    1cac:	70 e4       	ldi	r23, 0x40	; 64
printFloat():
    1cae:	18 16       	cp	r1, r24
    1cb0:	64 f0       	brlt	.+24     	; 0x1cca <Print::printFloat(double, unsigned char) [clone .constprop.11]+0x80>
    1cb2:	2f ef       	ldi	r18, 0xFF	; 255
    1cb4:	3f ef       	ldi	r19, 0xFF	; 255
    1cb6:	4f e7       	ldi	r20, 0x7F	; 127
    1cb8:	5f e4       	ldi	r21, 0x4F	; 79
    1cba:	c7 01       	movw	r24, r14
    1cbc:	b6 01       	movw	r22, r12
    1cbe:	0e 94 0d 22 	call	0x441a	; 0x441a <__gesf2>
    1cc2:	18 16       	cp	r1, r24
    1cc4:	a4 f4       	brge	.+40     	; 0x1cee <Print::printFloat(double, unsigned char) [clone .constprop.11]+0xa4>
write():
    1cc6:	6d ef       	ldi	r22, 0xFD	; 253
    1cc8:	70 e4       	ldi	r23, 0x40	; 64
    1cca:	83 e2       	ldi	r24, 0x23	; 35
    1ccc:	94 e4       	ldi	r25, 0x44	; 68
printFloat():
    1cce:	cf 91       	pop	r28
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	ff 90       	pop	r15
    1cd6:	ef 90       	pop	r14
    1cd8:	df 90       	pop	r13
    1cda:	cf 90       	pop	r12
    1cdc:	bf 90       	pop	r11
    1cde:	af 90       	pop	r10
    1ce0:	9f 90       	pop	r9
    1ce2:	8f 90       	pop	r8
    1ce4:	7f 90       	pop	r7
    1ce6:	6f 90       	pop	r6
    1ce8:	5f 90       	pop	r5
    1cea:	4f 90       	pop	r4
write():
    1cec:	5a cf       	rjmp	.-332    	; 0x1ba2 <Print::write(char const*) [clone .part.2]>
printFloat():
    1cee:	2f ef       	ldi	r18, 0xFF	; 255
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	5f ec       	ldi	r21, 0xCF	; 207
    1cf6:	c7 01       	movw	r24, r14
    1cf8:	b6 01       	movw	r22, r12
    1cfa:	0e 94 c3 20 	call	0x4186	; 0x4186 <__cmpsf2>
    1cfe:	87 fd       	sbrc	r24, 7
    1d00:	e2 cf       	rjmp	.-60     	; 0x1cc6 <Print::printFloat(double, unsigned char) [clone .constprop.11]+0x7c>
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	a9 01       	movw	r20, r18
    1d08:	c7 01       	movw	r24, r14
    1d0a:	b6 01       	movw	r22, r12
    1d0c:	0e 94 c3 20 	call	0x4186	; 0x4186 <__cmpsf2>
    1d10:	10 e0       	ldi	r17, 0x00	; 0
    1d12:	00 e0       	ldi	r16, 0x00	; 0
    1d14:	87 ff       	sbrs	r24, 7
    1d16:	0a c0       	rjmp	.+20     	; 0x1d2c <Print::printFloat(double, unsigned char) [clone .constprop.11]+0xe2>
    1d18:	6d e2       	ldi	r22, 0x2D	; 45
    1d1a:	83 e2       	ldi	r24, 0x23	; 35
    1d1c:	94 e4       	ldi	r25, 0x44	; 68
    1d1e:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(char)>
    1d22:	8c 01       	movw	r16, r24
    1d24:	f7 fa       	bst	r15, 7
    1d26:	f0 94       	com	r15
    1d28:	f7 f8       	bld	r15, 7
    1d2a:	f0 94       	com	r15
    1d2c:	c0 e0       	ldi	r28, 0x00	; 0
    1d2e:	60 e0       	ldi	r22, 0x00	; 0
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	9f e3       	ldi	r25, 0x3F	; 63
    1d36:	7c 16       	cp	r7, r28
    1d38:	41 f0       	breq	.+16     	; 0x1d4a <Print::printFloat(double, unsigned char) [clone .constprop.11]+0x100>
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e2       	ldi	r20, 0x20	; 32
    1d40:	51 e4       	ldi	r21, 0x41	; 65
    1d42:	0e 94 c7 20 	call	0x418e	; 0x418e <__divsf3>
    1d46:	cf 5f       	subi	r28, 0xFF	; 255
    1d48:	f6 cf       	rjmp	.-20     	; 0x1d36 <Print::printFloat(double, unsigned char) [clone .constprop.11]+0xec>
    1d4a:	a7 01       	movw	r20, r14
    1d4c:	96 01       	movw	r18, r12
    1d4e:	0e 94 5f 20 	call	0x40be	; 0x40be <__addsf3>
    1d52:	2b 01       	movw	r4, r22
    1d54:	3c 01       	movw	r6, r24
    1d56:	0e 94 2f 21 	call	0x425e	; 0x425e <__fixunssfsi>
    1d5a:	4b 01       	movw	r8, r22
    1d5c:	5c 01       	movw	r10, r24
print():
    1d5e:	2a e0       	ldi	r18, 0x0A	; 10
    1d60:	bc 01       	movw	r22, r24
    1d62:	a4 01       	movw	r20, r8
    1d64:	83 e2       	ldi	r24, 0x23	; 35
    1d66:	94 e4       	ldi	r25, 0x44	; 68
    1d68:	2b df       	rcall	.-426    	; 0x1bc0 <Print::printNumber(unsigned long, unsigned char)>
printFloat():
    1d6a:	7c 01       	movw	r14, r24
    1d6c:	e0 0e       	add	r14, r16
    1d6e:	f1 1e       	adc	r15, r17
    1d70:	cc 23       	and	r28, r28
    1d72:	c9 f1       	breq	.+114    	; 0x1de6 <Print::printFloat(double, unsigned char) [clone .constprop.11]+0x19c>
    1d74:	c5 01       	movw	r24, r10
    1d76:	b4 01       	movw	r22, r8
    1d78:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__floatunsisf>
    1d7c:	9b 01       	movw	r18, r22
    1d7e:	ac 01       	movw	r20, r24
    1d80:	c3 01       	movw	r24, r6
    1d82:	b2 01       	movw	r22, r4
    1d84:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__subsf3>
    1d88:	4b 01       	movw	r8, r22
    1d8a:	5c 01       	movw	r10, r24
write():
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	71 e4       	ldi	r23, 0x41	; 65
    1d90:	83 e2       	ldi	r24, 0x23	; 35
    1d92:	94 e4       	ldi	r25, 0x44	; 68
    1d94:	06 df       	rcall	.-500    	; 0x1ba2 <Print::write(char const*) [clone .part.2]>
printFloat():
    1d96:	e8 0e       	add	r14, r24
    1d98:	f9 1e       	adc	r15, r25
    1d9a:	c1 50       	subi	r28, 0x01	; 1
    1d9c:	20 f1       	brcs	.+72     	; 0x1de6 <Print::printFloat(double, unsigned char) [clone .constprop.11]+0x19c>
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e2       	ldi	r20, 0x20	; 32
    1da4:	51 e4       	ldi	r21, 0x41	; 65
    1da6:	c5 01       	movw	r24, r10
    1da8:	b4 01       	movw	r22, r8
    1daa:	0e 94 11 22 	call	0x4422	; 0x4422 <__mulsf3>
    1dae:	2b 01       	movw	r4, r22
    1db0:	3c 01       	movw	r6, r24
    1db2:	0e 94 2f 21 	call	0x425e	; 0x425e <__fixunssfsi>
print():
    1db6:	4b 01       	movw	r8, r22
    1db8:	b1 2c       	mov	r11, r1
    1dba:	a1 2c       	mov	r10, r1
    1dbc:	2a e0       	ldi	r18, 0x0A	; 10
    1dbe:	b5 01       	movw	r22, r10
    1dc0:	a4 01       	movw	r20, r8
    1dc2:	83 e2       	ldi	r24, 0x23	; 35
    1dc4:	94 e4       	ldi	r25, 0x44	; 68
    1dc6:	fc de       	rcall	.-520    	; 0x1bc0 <Print::printNumber(unsigned long, unsigned char)>
printFloat():
    1dc8:	e8 0e       	add	r14, r24
    1dca:	f9 1e       	adc	r15, r25
    1dcc:	c5 01       	movw	r24, r10
    1dce:	b4 01       	movw	r22, r8
    1dd0:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__floatunsisf>
    1dd4:	9b 01       	movw	r18, r22
    1dd6:	ac 01       	movw	r20, r24
    1dd8:	c3 01       	movw	r24, r6
    1dda:	b2 01       	movw	r22, r4
    1ddc:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__subsf3>
    1de0:	4b 01       	movw	r8, r22
    1de2:	5c 01       	movw	r10, r24
    1de4:	da cf       	rjmp	.-76     	; 0x1d9a <Print::printFloat(double, unsigned char) [clone .constprop.11]+0x150>
    1de6:	c7 01       	movw	r24, r14
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	df 90       	pop	r13
    1df4:	cf 90       	pop	r12
    1df6:	bf 90       	pop	r11
    1df8:	af 90       	pop	r10
    1dfa:	9f 90       	pop	r9
    1dfc:	8f 90       	pop	r8
    1dfe:	7f 90       	pop	r7
    1e00:	6f 90       	pop	r6
    1e02:	5f 90       	pop	r5
    1e04:	4f 90       	pop	r4
    1e06:	08 95       	ret

00001e08 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>:
getModeColors():
    1e08:	2f 92       	push	r2
    1e0a:	3f 92       	push	r3
    1e0c:	4f 92       	push	r4
    1e0e:	5f 92       	push	r5
    1e10:	6f 92       	push	r6
    1e12:	7f 92       	push	r7
    1e14:	8f 92       	push	r8
    1e16:	9f 92       	push	r9
    1e18:	af 92       	push	r10
    1e1a:	bf 92       	push	r11
    1e1c:	cf 92       	push	r12
    1e1e:	df 92       	push	r13
    1e20:	ef 92       	push	r14
    1e22:	ff 92       	push	r15
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	2a 97       	sbiw	r28, 0x0a	; 10
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	1c 01       	movw	r2, r24
    1e38:	6d 83       	std	Y+5, r22	; 0x05
    1e3a:	7e 83       	std	Y+6, r23	; 0x06
    1e3c:	4f 83       	std	Y+7, r20	; 0x07
    1e3e:	58 87       	std	Y+8, r21	; 0x08
    1e40:	28 01       	movw	r4, r16
    1e42:	39 01       	movw	r6, r18
    1e44:	a5 d8       	rcall	.-3766   	; 0xf90 <getDwellFrames()>
    1e46:	5c 01       	movw	r10, r24
    1e48:	8b d8       	rcall	.-3818   	; 0xf60 <getTransitionFrames()>
    1e4a:	6c 01       	movw	r12, r24
    1e4c:	80 d8       	rcall	.-3840   	; 0xf4e <getPalleteNumber()>
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    1e54:	84 30       	cpi	r24, 0x04	; 4
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x52>
    1e58:	70 c0       	rjmp	.+224    	; 0x1f3a <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x132>
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	8b 5f       	subi	r24, 0xFB	; 251
    1e60:	9b 4b       	sbci	r25, 0xBB	; 187
    1e62:	fc 01       	movw	r30, r24
    1e64:	80 81       	ld	r24, Z
    1e66:	88 23       	and	r24, r24
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x64>
    1e6a:	6a c0       	rjmp	.+212    	; 0x1f40 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x138>
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	dc 01       	movw	r26, r24
    1e72:	f9 81       	ldd	r31, Y+1	; 0x01
    1e74:	2f 2f       	mov	r18, r31
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	a9 01       	movw	r20, r18
    1e7a:	41 54       	subi	r20, 0x41	; 65
    1e7c:	56 4f       	sbci	r21, 0xF6	; 246
    1e7e:	7a 01       	movw	r14, r20
    1e80:	fa 01       	movw	r30, r20
    1e82:	44 91       	lpm	r20, Z
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	64 0d       	add	r22, r4
    1e8a:	75 1d       	adc	r23, r5
    1e8c:	86 1d       	adc	r24, r6
    1e8e:	97 1d       	adc	r25, r7
    1e90:	85 01       	movw	r16, r10
    1e92:	0c 0d       	add	r16, r12
    1e94:	1d 1d       	adc	r17, r13
    1e96:	40 9f       	mul	r20, r16
    1e98:	90 01       	movw	r18, r0
    1e9a:	41 9f       	mul	r20, r17
    1e9c:	30 0d       	add	r19, r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	50 e0       	ldi	r21, 0x00	; 0
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 2d 20 	call	0x405a	; 0x405a <__udivmodsi4>
    1ea8:	98 01       	movw	r18, r16
    1eaa:	50 e0       	ldi	r21, 0x00	; 0
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	0e 94 2d 20 	call	0x405a	; 0x405a <__udivmodsi4>
    1eb2:	a2 2f       	mov	r26, r18
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	49 81       	ldd	r20, Y+1	; 0x01
    1eb8:	e8 e1       	ldi	r30, 0x18	; 24
    1eba:	4e 9f       	mul	r20, r30
    1ebc:	a0 01       	movw	r20, r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	49 87       	std	Y+9, r20	; 0x09
    1ec2:	5a 87       	std	Y+10, r21	; 0x0a
    1ec4:	fa 01       	movw	r30, r20
    1ec6:	53 e0       	ldi	r21, 0x03	; 3
    1ec8:	25 9f       	mul	r18, r21
    1eca:	e0 0d       	add	r30, r0
    1ecc:	f1 1d       	adc	r31, r1
    1ece:	11 24       	eor	r1, r1
    1ed0:	8f 01       	movw	r16, r30
    1ed2:	0d 5c       	subi	r16, 0xCD	; 205
    1ed4:	1a 4f       	sbci	r17, 0xFA	; 250
    1ed6:	af 01       	movw	r20, r30
    1ed8:	4c 5c       	subi	r20, 0xCC	; 204
    1eda:	5a 4f       	sbci	r21, 0xFA	; 250
    1edc:	49 83       	std	Y+1, r20	; 0x01
    1ede:	5a 83       	std	Y+2, r21	; 0x02
    1ee0:	af 01       	movw	r20, r30
    1ee2:	4b 5c       	subi	r20, 0xCB	; 203
    1ee4:	5a 4f       	sbci	r21, 0xFA	; 250
    1ee6:	4b 83       	std	Y+3, r20	; 0x03
    1ee8:	5c 83       	std	Y+4, r21	; 0x04
    1eea:	6a 15       	cp	r22, r10
    1eec:	7b 05       	cpc	r23, r11
    1eee:	68 f5       	brcc	.+90     	; 0x1f4a <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x142>
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	04 91       	lpm	r16, Z
    1ef4:	f1 01       	movw	r30, r2
    1ef6:	00 83       	st	Z, r16
    1ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    1efa:	fa 81       	ldd	r31, Y+2	; 0x02
    1efc:	14 91       	lpm	r17, Z
    1efe:	ed 81       	ldd	r30, Y+5	; 0x05
    1f00:	fe 81       	ldd	r31, Y+6	; 0x06
    1f02:	10 83       	st	Z, r17
    1f04:	fa 01       	movw	r30, r20
    1f06:	64 91       	lpm	r22, Z
    1f08:	ef 81       	ldd	r30, Y+7	; 0x07
    1f0a:	f8 85       	ldd	r31, Y+8	; 0x08
    1f0c:	60 83       	st	Z, r22
    1f0e:	2a 96       	adiw	r28, 0x0a	; 10
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	ff 90       	pop	r15
    1f1e:	ef 90       	pop	r14
    1f20:	df 90       	pop	r13
    1f22:	cf 90       	pop	r12
    1f24:	bf 90       	pop	r11
    1f26:	af 90       	pop	r10
    1f28:	9f 90       	pop	r9
    1f2a:	8f 90       	pop	r8
    1f2c:	7f 90       	pop	r7
    1f2e:	6f 90       	pop	r6
    1f30:	5f 90       	pop	r5
    1f32:	4f 90       	pop	r4
    1f34:	3f 90       	pop	r3
    1f36:	2f 90       	pop	r2
    1f38:	08 95       	ret
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	8f cf       	rjmp	.-226    	; 0x1e5e <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x56>
    1f40:	88 ec       	ldi	r24, 0xC8	; 200
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a0 e0       	ldi	r26, 0x00	; 0
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	94 cf       	rjmp	.-216    	; 0x1e72 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x6a>
    1f4a:	ab 01       	movw	r20, r22
    1f4c:	4a 19       	sub	r20, r10
    1f4e:	5b 09       	sbc	r21, r11
    1f50:	f7 01       	movw	r30, r14
    1f52:	e4 90       	lpm	r14, Z
    1f54:	cd 01       	movw	r24, r26
    1f56:	01 96       	adiw	r24, 0x01	; 1
    1f58:	bb 24       	eor	r11, r11
    1f5a:	b3 94       	inc	r11
    1f5c:	b2 0e       	add	r11, r18
    1f5e:	e8 16       	cp	r14, r24
    1f60:	19 06       	cpc	r1, r25
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x15e>
    1f64:	0c f4       	brge	.+2      	; 0x1f68 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x160>
    1f66:	b1 2c       	mov	r11, r1
    1f68:	ba 01       	movw	r22, r20
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__floatunsisf>
    1f72:	2b 01       	movw	r4, r22
    1f74:	3c 01       	movw	r6, r24
    1f76:	b6 01       	movw	r22, r12
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__floatunsisf>
    1f80:	9b 01       	movw	r18, r22
    1f82:	ac 01       	movw	r20, r24
    1f84:	c3 01       	movw	r24, r6
    1f86:	b2 01       	movw	r22, r4
    1f88:	0e 94 c7 20 	call	0x418e	; 0x418e <__divsf3>
    1f8c:	6b 01       	movw	r12, r22
    1f8e:	7c 01       	movw	r14, r24
    1f90:	25 ec       	ldi	r18, 0xC5	; 197
    1f92:	30 e2       	ldi	r19, 0x20	; 32
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 0d 22 	call	0x441a	; 0x441a <__gesf2>
    1f9c:	18 16       	cp	r1, r24
    1f9e:	9c f4       	brge	.+38     	; 0x1fc6 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x1be>
    1fa0:	69 e1       	ldi	r22, 0x19	; 25
    1fa2:	75 e0       	ldi	r23, 0x05	; 5
    1fa4:	83 e2       	ldi	r24, 0x23	; 35
    1fa6:	94 e4       	ldi	r25, 0x44	; 68
    1fa8:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
print():
    1fac:	42 e0       	ldi	r20, 0x02	; 2
    1fae:	c7 01       	movw	r24, r14
    1fb0:	b6 01       	movw	r22, r12
    1fb2:	4b de       	rcall	.-874    	; 0x1c4a <Print::printFloat(double, unsigned char) [clone .constprop.11]>
write():
    1fb4:	63 e0       	ldi	r22, 0x03	; 3
    1fb6:	71 e4       	ldi	r23, 0x41	; 65
    1fb8:	83 e2       	ldi	r24, 0x23	; 35
    1fba:	94 e4       	ldi	r25, 0x44	; 68
    1fbc:	f2 dd       	rcall	.-1052   	; 0x1ba2 <Print::write(char const*) [clone .part.2]>
getModeColors():
    1fbe:	83 e2       	ldi	r24, 0x23	; 35
    1fc0:	94 e4       	ldi	r25, 0x44	; 68
    1fc2:	0e 94 2d 06 	call	0xc5a	; 0xc5a <UartClass::flush()>
    1fc6:	29 85       	ldd	r18, Y+9	; 0x09
    1fc8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fca:	43 e0       	ldi	r20, 0x03	; 3
    1fcc:	b4 9e       	mul	r11, r20
    1fce:	20 0d       	add	r18, r0
    1fd0:	31 1d       	adc	r19, r1
    1fd2:	11 24       	eor	r1, r1
    1fd4:	29 87       	std	Y+9, r18	; 0x09
    1fd6:	3a 87       	std	Y+10, r19	; 0x0a
    1fd8:	f9 01       	movw	r30, r18
    1fda:	ed 5c       	subi	r30, 0xCD	; 205
    1fdc:	fa 4f       	sbci	r31, 0xFA	; 250
    1fde:	74 90       	lpm	r7, Z
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	04 91       	lpm	r16, Z
    1fe4:	a7 01       	movw	r20, r14
    1fe6:	96 01       	movw	r18, r12
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	80 e8       	ldi	r24, 0x80	; 128
    1fee:	9f e3       	ldi	r25, 0x3F	; 63
    1ff0:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__subsf3>
    1ff4:	4b 01       	movw	r8, r22
    1ff6:	5c 01       	movw	r10, r24
    1ff8:	67 2d       	mov	r22, r7
    1ffa:	70 e0       	ldi	r23, 0x00	; 0
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__floatsisf>
    2004:	a7 01       	movw	r20, r14
    2006:	96 01       	movw	r18, r12
    2008:	0e 94 11 22 	call	0x4422	; 0x4422 <__mulsf3>
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 5f 20 	call	0x40be	; 0x40be <__addsf3>
    2018:	2b 01       	movw	r4, r22
    201a:	3c 01       	movw	r6, r24
    201c:	60 2f       	mov	r22, r16
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__floatsisf>
    2028:	a5 01       	movw	r20, r10
    202a:	94 01       	movw	r18, r8
    202c:	0e 94 11 22 	call	0x4422	; 0x4422 <__mulsf3>
    2030:	9b 01       	movw	r18, r22
    2032:	ac 01       	movw	r20, r24
    2034:	c3 01       	movw	r24, r6
    2036:	b2 01       	movw	r22, r4
    2038:	0e 94 5f 20 	call	0x40be	; 0x40be <__addsf3>
    203c:	0e 94 2f 21 	call	0x425e	; 0x425e <__fixunssfsi>
    2040:	f1 01       	movw	r30, r2
    2042:	60 83       	st	Z, r22
    2044:	e9 85       	ldd	r30, Y+9	; 0x09
    2046:	fa 85       	ldd	r31, Y+10	; 0x0a
    2048:	ec 5c       	subi	r30, 0xCC	; 204
    204a:	fa 4f       	sbci	r31, 0xFA	; 250
    204c:	64 91       	lpm	r22, Z
    204e:	e9 81       	ldd	r30, Y+1	; 0x01
    2050:	fa 81       	ldd	r31, Y+2	; 0x02
    2052:	14 91       	lpm	r17, Z
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__floatsisf>
    205e:	a7 01       	movw	r20, r14
    2060:	96 01       	movw	r18, r12
    2062:	0e 94 11 22 	call	0x4422	; 0x4422 <__mulsf3>
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 5f 20 	call	0x40be	; 0x40be <__addsf3>
    2072:	2b 01       	movw	r4, r22
    2074:	3c 01       	movw	r6, r24
    2076:	61 2f       	mov	r22, r17
    2078:	70 e0       	ldi	r23, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__floatsisf>
    2082:	a5 01       	movw	r20, r10
    2084:	94 01       	movw	r18, r8
    2086:	0e 94 11 22 	call	0x4422	; 0x4422 <__mulsf3>
    208a:	9b 01       	movw	r18, r22
    208c:	ac 01       	movw	r20, r24
    208e:	c3 01       	movw	r24, r6
    2090:	b2 01       	movw	r22, r4
    2092:	0e 94 5f 20 	call	0x40be	; 0x40be <__addsf3>
    2096:	0e 94 2f 21 	call	0x425e	; 0x425e <__fixunssfsi>
    209a:	ed 81       	ldd	r30, Y+5	; 0x05
    209c:	fe 81       	ldd	r31, Y+6	; 0x06
    209e:	60 83       	st	Z, r22
    20a0:	29 85       	ldd	r18, Y+9	; 0x09
    20a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    20a4:	2b 5c       	subi	r18, 0xCB	; 203
    20a6:	3a 4f       	sbci	r19, 0xFA	; 250
    20a8:	f9 01       	movw	r30, r18
    20aa:	f4 91       	lpm	r31, Z
    20ac:	f9 83       	std	Y+1, r31	; 0x01
    20ae:	eb 81       	ldd	r30, Y+3	; 0x03
    20b0:	fc 81       	ldd	r31, Y+4	; 0x04
    20b2:	f4 91       	lpm	r31, Z
    20b4:	fb 83       	std	Y+3, r31	; 0x03
    20b6:	29 81       	ldd	r18, Y+1	; 0x01
    20b8:	62 2f       	mov	r22, r18
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__floatsisf>
    20c4:	a7 01       	movw	r20, r14
    20c6:	96 01       	movw	r18, r12
    20c8:	0e 94 11 22 	call	0x4422	; 0x4422 <__mulsf3>
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 5f 20 	call	0x40be	; 0x40be <__addsf3>
    20d8:	6b 01       	movw	r12, r22
    20da:	7c 01       	movw	r14, r24
    20dc:	3b 81       	ldd	r19, Y+3	; 0x03
    20de:	63 2f       	mov	r22, r19
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__floatsisf>
    20ea:	a5 01       	movw	r20, r10
    20ec:	94 01       	movw	r18, r8
    20ee:	0e 94 11 22 	call	0x4422	; 0x4422 <__mulsf3>
    20f2:	9b 01       	movw	r18, r22
    20f4:	ac 01       	movw	r20, r24
    20f6:	c7 01       	movw	r24, r14
    20f8:	b6 01       	movw	r22, r12
    20fa:	0e 94 5f 20 	call	0x40be	; 0x40be <__addsf3>
    20fe:	0e 94 2f 21 	call	0x425e	; 0x425e <__fixunssfsi>
    2102:	02 cf       	rjmp	.-508    	; 0x1f08 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x100>

00002104 <updatePatternWave()>:
updatePatternWave():
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	00 d0       	rcall	.+0      	; 0x210e <updatePatternWave()+0xa>
    210e:	1f 92       	push	r1
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	00 91 0d 44 	lds	r16, 0x440D	; 0x80440d <frameNumber>
    2118:	10 91 0e 44 	lds	r17, 0x440E	; 0x80440e <frameNumber+0x1>
    211c:	20 91 0f 44 	lds	r18, 0x440F	; 0x80440f <frameNumber+0x2>
    2120:	30 91 10 44 	lds	r19, 0x4410	; 0x804410 <frameNumber+0x3>
    2124:	ae 01       	movw	r20, r28
    2126:	4d 5f       	subi	r20, 0xFD	; 253
    2128:	5f 4f       	sbci	r21, 0xFF	; 255
    212a:	be 01       	movw	r22, r28
    212c:	6e 5f       	subi	r22, 0xFE	; 254
    212e:	7f 4f       	sbci	r23, 0xFF	; 255
    2130:	ce 01       	movw	r24, r28
    2132:	01 96       	adiw	r24, 0x01	; 1
    2134:	69 de       	rcall	.-814    	; 0x1e08 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
    2136:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    213a:	84 30       	cpi	r24, 0x04	; 4
    213c:	91 f0       	breq	.+36     	; 0x2162 <updatePatternWave()+0x5e>
    213e:	83 e0       	ldi	r24, 0x03	; 3
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	8b 5f       	subi	r24, 0xFB	; 251
    2144:	9b 4b       	sbci	r25, 0xBB	; 187
    2146:	fc 01       	movw	r30, r24
    2148:	20 81       	ld	r18, Z
    214a:	4b 81       	ldd	r20, Y+3	; 0x03
    214c:	6a 81       	ldd	r22, Y+2	; 0x02
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	0f d8       	rcall	.-4066   	; 0x1170 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)>
    2152:	23 96       	adiw	r28, 0x03	; 3
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	08 95       	ret
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	ed cf       	rjmp	.-38     	; 0x2142 <updatePatternWave()+0x3e>

00002168 <initLookupDrift2()>:
initLookupDrift2():
    2168:	8f 92       	push	r8
    216a:	9f 92       	push	r9
    216c:	af 92       	push	r10
    216e:	bf 92       	push	r11
    2170:	cf 92       	push	r12
    2172:	df 92       	push	r13
    2174:	ef 92       	push	r14
    2176:	ff 92       	push	r15
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	09 ed       	ldi	r16, 0xD9	; 217
    2182:	12 e4       	ldi	r17, 0x42	; 66
    2184:	d0 e0       	ldi	r29, 0x00	; 0
    2186:	c0 e0       	ldi	r28, 0x00	; 0
    2188:	0e 94 b0 07 	call	0xf60	; 0xf60 <getTransitionFrames()>
    218c:	c8 17       	cp	r28, r24
    218e:	d9 07       	cpc	r29, r25
    2190:	08 f0       	brcs	.+2      	; 0x2194 <initLookupDrift2()+0x2c>
    2192:	41 c0       	rjmp	.+130    	; 0x2216 <initLookupDrift2()+0xae>
getModeRatio():
    2194:	0e 94 b0 07 	call	0xf60	; 0xf60 <getTransitionFrames()>
    2198:	7c 01       	movw	r14, r24
    219a:	be 01       	movw	r22, r28
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__floatunsisf>
    21a4:	4b 01       	movw	r8, r22
    21a6:	5c 01       	movw	r10, r24
    21a8:	b7 01       	movw	r22, r14
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__floatunsisf>
    21b2:	9b 01       	movw	r18, r22
    21b4:	ac 01       	movw	r20, r24
    21b6:	c5 01       	movw	r24, r10
    21b8:	b4 01       	movw	r22, r8
    21ba:	0e 94 c7 20 	call	0x418e	; 0x418e <__divsf3>
    21be:	6b 01       	movw	r12, r22
    21c0:	7c 01       	movw	r14, r24
    21c2:	25 ec       	ldi	r18, 0xC5	; 197
    21c4:	30 e2       	ldi	r19, 0x20	; 32
    21c6:	40 e8       	ldi	r20, 0x80	; 128
    21c8:	5f e3       	ldi	r21, 0x3F	; 63
    21ca:	0e 94 0d 22 	call	0x441a	; 0x441a <__gesf2>
    21ce:	18 16       	cp	r1, r24
    21d0:	9c f4       	brge	.+38     	; 0x21f8 <initLookupDrift2()+0x90>
    21d2:	6f ed       	ldi	r22, 0xDF	; 223
    21d4:	74 e0       	ldi	r23, 0x04	; 4
    21d6:	83 e2       	ldi	r24, 0x23	; 35
    21d8:	94 e4       	ldi	r25, 0x44	; 68
    21da:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
print():
    21de:	42 e0       	ldi	r20, 0x02	; 2
    21e0:	c7 01       	movw	r24, r14
    21e2:	b6 01       	movw	r22, r12
    21e4:	32 dd       	rcall	.-1436   	; 0x1c4a <Print::printFloat(double, unsigned char) [clone .constprop.11]>
write():
    21e6:	63 e0       	ldi	r22, 0x03	; 3
    21e8:	71 e4       	ldi	r23, 0x41	; 65
    21ea:	83 e2       	ldi	r24, 0x23	; 35
    21ec:	94 e4       	ldi	r25, 0x44	; 68
    21ee:	d9 dc       	rcall	.-1614   	; 0x1ba2 <Print::write(char const*) [clone .part.2]>
getModeRatio():
    21f0:	83 e2       	ldi	r24, 0x23	; 35
    21f2:	94 e4       	ldi	r25, 0x44	; 68
    21f4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <UartClass::flush()>
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e8       	ldi	r19, 0x80	; 128
    21fc:	4f e7       	ldi	r20, 0x7F	; 127
    21fe:	53 e4       	ldi	r21, 0x43	; 67
    2200:	c7 01       	movw	r24, r14
    2202:	b6 01       	movw	r22, r12
    2204:	0e 94 11 22 	call	0x4422	; 0x4422 <__mulsf3>
    2208:	0e 94 2f 21 	call	0x425e	; 0x425e <__fixunssfsi>
    220c:	f8 01       	movw	r30, r16
    220e:	61 93       	st	Z+, r22
    2210:	8f 01       	movw	r16, r30
initLookupDrift2():
    2212:	21 96       	adiw	r28, 0x01	; 1
    2214:	b9 cf       	rjmp	.-142    	; 0x2188 <initLookupDrift2()+0x20>
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	1f 91       	pop	r17
    221c:	0f 91       	pop	r16
    221e:	ff 90       	pop	r15
    2220:	ef 90       	pop	r14
    2222:	df 90       	pop	r13
    2224:	cf 90       	pop	r12
    2226:	bf 90       	pop	r11
    2228:	af 90       	pop	r10
    222a:	9f 90       	pop	r9
    222c:	8f 90       	pop	r8
    222e:	08 95       	ret

00002230 <__cxa_pure_virtual>:
__cxa_pure_virtual():
    2230:	0e 94 a4 22 	call	0x4548	; 0x4548 <abort>

00002234 <resetReceive()>:
resetReceive():
    2234:	80 91 44 41 	lds	r24, 0x4144	; 0x804144 <bitnum>
    2238:	85 30       	cpi	r24, 0x05	; 5
    223a:	50 f0       	brcs	.+20     	; 0x2250 <resetReceive()+0x1c>
    223c:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    2240:	60 93 1e 44 	sts	0x441E, r22	; 0x80441e <lastRFMsgAt>
    2244:	70 93 1f 44 	sts	0x441F, r23	; 0x80441f <lastRFMsgAt+0x1>
    2248:	80 93 20 44 	sts	0x4420, r24	; 0x804420 <lastRFMsgAt+0x2>
    224c:	90 93 21 44 	sts	0x4421, r25	; 0x804421 <lastRFMsgAt+0x3>
    2250:	10 92 44 41 	sts	0x4144, r1	; 0x804144 <bitnum>
    2254:	ed e4       	ldi	r30, 0x4D	; 77
    2256:	f1 e4       	ldi	r31, 0x41	; 65
    2258:	80 e2       	ldi	r24, 0x20	; 32
    225a:	df 01       	movw	r26, r30
    225c:	1d 92       	st	X+, r1
    225e:	8a 95       	dec	r24
    2260:	e9 f7       	brne	.-6      	; 0x225c <resetReceive()+0x28>
    2262:	10 92 75 41 	sts	0x4175, r1	; 0x804175 <gotMessage>
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	80 93 35 0b 	sts	0x0B35, r24	; 0x800b35 <__TEXT_REGION_LENGTH__+0x7e0b35>
    226c:	08 95       	ret

0000226e <setMode(unsigned char)>:
setMode():
    226e:	af 92       	push	r10
    2270:	bf 92       	push	r11
    2272:	cf 92       	push	r12
    2274:	df 92       	push	r13
    2276:	ef 92       	push	r14
    2278:	ff 92       	push	r15
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	80 93 19 44 	sts	0x4419, r24	; 0x804419 <currentMode>
    2286:	88 e5       	ldi	r24, 0x58	; 88
    2288:	92 e0       	ldi	r25, 0x02	; 2
    228a:	ed ea       	ldi	r30, 0xAD	; 173
    228c:	f1 e4       	ldi	r31, 0x41	; 65
    228e:	df 01       	movw	r26, r30
    2290:	9c 01       	movw	r18, r24
    2292:	1d 92       	st	X+, r1
    2294:	21 50       	subi	r18, 0x01	; 1
    2296:	30 40       	sbci	r19, 0x00	; 0
    2298:	e1 f7       	brne	.-8      	; 0x2292 <setMode(unsigned char)+0x24>
    229a:	ee eb       	ldi	r30, 0xBE	; 190
    229c:	f4 e4       	ldi	r31, 0x44	; 68
    229e:	df 01       	movw	r26, r30
    22a0:	9c 01       	movw	r18, r24
    22a2:	1d 92       	st	X+, r1
    22a4:	21 50       	subi	r18, 0x01	; 1
    22a6:	30 40       	sbci	r19, 0x00	; 0
    22a8:	e1 f7       	brne	.-8      	; 0x22a2 <setMode(unsigned char)+0x34>
    22aa:	85 e0       	ldi	r24, 0x05	; 5
    22ac:	a8 2e       	mov	r10, r24
    22ae:	84 e4       	ldi	r24, 0x44	; 68
    22b0:	b8 2e       	mov	r11, r24
    22b2:	01 e1       	ldi	r16, 0x11	; 17
    22b4:	14 e4       	ldi	r17, 0x44	; 68
    22b6:	d0 e0       	ldi	r29, 0x00	; 0
    22b8:	c0 e0       	ldi	r28, 0x00	; 0
    22ba:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    22be:	38 e0       	ldi	r19, 0x08	; 8
    22c0:	83 9f       	mul	r24, r19
    22c2:	c0 01       	movw	r24, r0
    22c4:	11 24       	eor	r1, r1
    22c6:	8c 0f       	add	r24, r28
    22c8:	9d 1f       	adc	r25, r29
    22ca:	fc 01       	movw	r30, r24
    22cc:	e9 57       	subi	r30, 0x79	; 121
    22ce:	fb 4f       	sbci	r31, 0xFB	; 251
    22d0:	24 91       	lpm	r18, Z
    22d2:	2f 3f       	cpi	r18, 0xFF	; 255
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <setMode(unsigned char)+0x6a>
    22d6:	66 c0       	rjmp	.+204    	; 0x23a4 <setMode(unsigned char)+0x136>
    22d8:	fc 01       	movw	r30, r24
    22da:	e5 5c       	subi	r30, 0xC5	; 197
    22dc:	f9 4f       	sbci	r31, 0xF9	; 249
    22de:	e4 91       	lpm	r30, Z
    22e0:	ce 2e       	mov	r12, r30
    22e2:	d1 2c       	mov	r13, r1
    22e4:	f1 2c       	mov	r15, r1
    22e6:	e1 2c       	mov	r14, r1
random():
    22e8:	c1 14       	cp	r12, r1
    22ea:	d1 04       	cpc	r13, r1
    22ec:	e1 04       	cpc	r14, r1
    22ee:	f1 04       	cpc	r15, r1
    22f0:	39 f0       	breq	.+14     	; 0x2300 <setMode(unsigned char)+0x92>
    22f2:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <random>
    22f6:	a7 01       	movw	r20, r14
    22f8:	96 01       	movw	r18, r12
    22fa:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodsi4>
    22fe:	6b 01       	movw	r12, r22
setMode():
    2300:	fe 01       	movw	r30, r28
    2302:	ef 5e       	subi	r30, 0xEF	; 239
    2304:	fb 4b       	sbci	r31, 0xBB	; 187
    2306:	c0 82       	st	Z, r12
    2308:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    230c:	b8 e0       	ldi	r27, 0x08	; 8
    230e:	8b 9f       	mul	r24, r27
    2310:	c0 01       	movw	r24, r0
    2312:	11 24       	eor	r1, r1
    2314:	8c 0f       	add	r24, r28
    2316:	9d 1f       	adc	r25, r29
    2318:	fc 01       	movw	r30, r24
    231a:	e9 57       	subi	r30, 0x79	; 121
    231c:	fb 4f       	sbci	r31, 0xFB	; 251
    231e:	e4 91       	lpm	r30, Z
    2320:	ef 3f       	cpi	r30, 0xFF	; 255
    2322:	09 f0       	breq	.+2      	; 0x2326 <setMode(unsigned char)+0xb8>
    2324:	43 c0       	rjmp	.+134    	; 0x23ac <setMode(unsigned char)+0x13e>
    2326:	fc 01       	movw	r30, r24
    2328:	e9 5d       	subi	r30, 0xD9	; 217
    232a:	f6 4f       	sbci	r31, 0xF6	; 246
    232c:	e4 91       	lpm	r30, Z
    232e:	ce 2e       	mov	r12, r30
    2330:	d1 2c       	mov	r13, r1
    2332:	f1 2c       	mov	r15, r1
    2334:	e1 2c       	mov	r14, r1
random():
    2336:	c1 14       	cp	r12, r1
    2338:	d1 04       	cpc	r13, r1
    233a:	e1 04       	cpc	r14, r1
    233c:	f1 04       	cpc	r15, r1
    233e:	39 f0       	breq	.+14     	; 0x234e <setMode(unsigned char)+0xe0>
    2340:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <random>
    2344:	a7 01       	movw	r20, r14
    2346:	96 01       	movw	r18, r12
    2348:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodsi4>
    234c:	6b 01       	movw	r12, r22
setMode():
    234e:	fe 01       	movw	r30, r28
    2350:	eb 5f       	subi	r30, 0xFB	; 251
    2352:	fb 4b       	sbci	r31, 0xBB	; 187
    2354:	c0 82       	st	Z, r12
    2356:	21 96       	adiw	r28, 0x01	; 1
    2358:	bf ef       	ldi	r27, 0xFF	; 255
    235a:	ab 1a       	sub	r10, r27
    235c:	bb 0a       	sbc	r11, r27
    235e:	0f 5f       	subi	r16, 0xFF	; 255
    2360:	1f 4f       	sbci	r17, 0xFF	; 255
    2362:	c8 30       	cpi	r28, 0x08	; 8
    2364:	d1 05       	cpc	r29, r1
    2366:	09 f0       	breq	.+2      	; 0x236a <setMode(unsigned char)+0xfc>
    2368:	a8 cf       	rjmp	.-176    	; 0x22ba <setMode(unsigned char)+0x4c>
    236a:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    236e:	8a 30       	cpi	r24, 0x0A	; 10
    2370:	11 f4       	brne	.+4      	; 0x2376 <setMode(unsigned char)+0x108>
    2372:	fa de       	rcall	.-524    	; 0x2168 <initLookupDrift2()>
    2374:	c3 db       	rcall	.-2170   	; 0x1afc <initColorsDrift2()>
    2376:	10 92 0d 44 	sts	0x440D, r1	; 0x80440d <frameNumber>
    237a:	10 92 0e 44 	sts	0x440E, r1	; 0x80440e <frameNumber+0x1>
    237e:	10 92 0f 44 	sts	0x440F, r1	; 0x80440f <frameNumber+0x2>
    2382:	10 92 10 44 	sts	0x4410, r1	; 0x804410 <frameNumber+0x3>
    2386:	10 92 9f 41 	sts	0x419F, r1	; 0x80419f <currentSettingLeft>
    238a:	10 92 9e 41 	sts	0x419E, r1	; 0x80419e <currentSettingRight>
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	1f 91       	pop	r17
    2394:	0f 91       	pop	r16
    2396:	ff 90       	pop	r15
    2398:	ef 90       	pop	r14
    239a:	df 90       	pop	r13
    239c:	cf 90       	pop	r12
    239e:	bf 90       	pop	r11
    23a0:	af 90       	pop	r10
    23a2:	08 95       	ret
    23a4:	e4 91       	lpm	r30, Z
    23a6:	d8 01       	movw	r26, r16
    23a8:	ec 93       	st	X, r30
    23aa:	ae cf       	rjmp	.-164    	; 0x2308 <setMode(unsigned char)+0x9a>
    23ac:	fc 01       	movw	r30, r24
    23ae:	e1 5d       	subi	r30, 0xD1	; 209
    23b0:	fb 4f       	sbci	r31, 0xFB	; 251
    23b2:	e4 91       	lpm	r30, Z
    23b4:	d5 01       	movw	r26, r10
    23b6:	ec 93       	st	X, r30
    23b8:	ce cf       	rjmp	.-100    	; 0x2356 <setMode(unsigned char)+0xe8>

000023ba <__vector_22>:
__vector_22():
    23ba:	1f 92       	push	r1
    23bc:	0f 92       	push	r0
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	0f 92       	push	r0
    23c2:	11 24       	eor	r1, r1
    23c4:	0b b6       	in	r0, 0x3b	; 59
    23c6:	0f 92       	push	r0
    23c8:	2f 93       	push	r18
    23ca:	3f 93       	push	r19
    23cc:	4f 93       	push	r20
    23ce:	5f 93       	push	r21
    23d0:	6f 93       	push	r22
    23d2:	7f 93       	push	r23
    23d4:	8f 93       	push	r24
    23d6:	9f 93       	push	r25
    23d8:	af 93       	push	r26
    23da:	bf 93       	push	r27
    23dc:	ef 93       	push	r30
    23de:	ff 93       	push	r31
    23e0:	83 e2       	ldi	r24, 0x23	; 35
    23e2:	94 e4       	ldi	r25, 0x44	; 68
    23e4:	0e 94 bf 05 	call	0xb7e	; 0xb7e <UartClass::_tx_data_empty_irq()>
    23e8:	ff 91       	pop	r31
    23ea:	ef 91       	pop	r30
    23ec:	bf 91       	pop	r27
    23ee:	af 91       	pop	r26
    23f0:	9f 91       	pop	r25
    23f2:	8f 91       	pop	r24
    23f4:	7f 91       	pop	r23
    23f6:	6f 91       	pop	r22
    23f8:	5f 91       	pop	r21
    23fa:	4f 91       	pop	r20
    23fc:	3f 91       	pop	r19
    23fe:	2f 91       	pop	r18
    2400:	0f 90       	pop	r0
    2402:	0b be       	out	0x3b, r0	; 59
    2404:	0f 90       	pop	r0
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	0f 90       	pop	r0
    240a:	1f 90       	pop	r1
    240c:	18 95       	reti

0000240e <__vector_21>:
__vector_21():
    240e:	1f 92       	push	r1
    2410:	0f 92       	push	r0
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	0f 92       	push	r0
    2416:	11 24       	eor	r1, r1
    2418:	0b b6       	in	r0, 0x3b	; 59
    241a:	0f 92       	push	r0
    241c:	2f 93       	push	r18
    241e:	8f 93       	push	r24
    2420:	9f 93       	push	r25
    2422:	ef 93       	push	r30
    2424:	ff 93       	push	r31
_rx_complete_irq():
    2426:	e0 91 2f 44 	lds	r30, 0x442F	; 0x80442f <Serial0+0xc>
    242a:	f0 91 30 44 	lds	r31, 0x4430	; 0x804430 <Serial0+0xd>
    242e:	81 81       	ldd	r24, Z+1	; 0x01
    2430:	81 fd       	sbrc	r24, 1
    2432:	1d c0       	rjmp	.+58     	; 0x246e <__vector_21+0x60>
    2434:	90 81       	ld	r25, Z
    2436:	80 91 3a 44 	lds	r24, 0x443A	; 0x80443a <Serial0+0x17>
    243a:	8f 5f       	subi	r24, 0xFF	; 255
    243c:	8f 73       	andi	r24, 0x3F	; 63
    243e:	20 91 3b 44 	lds	r18, 0x443B	; 0x80443b <Serial0+0x18>
    2442:	82 17       	cp	r24, r18
    2444:	41 f0       	breq	.+16     	; 0x2456 <__vector_21+0x48>
    2446:	e0 91 3a 44 	lds	r30, 0x443A	; 0x80443a <Serial0+0x17>
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	ed 5d       	subi	r30, 0xDD	; 221
    244e:	fb 4b       	sbci	r31, 0xBB	; 187
    2450:	93 8f       	std	Z+27, r25	; 0x1b
    2452:	80 93 3a 44 	sts	0x443A, r24	; 0x80443a <Serial0+0x17>
__vector_21():
    2456:	ff 91       	pop	r31
    2458:	ef 91       	pop	r30
    245a:	9f 91       	pop	r25
    245c:	8f 91       	pop	r24
    245e:	2f 91       	pop	r18
    2460:	0f 90       	pop	r0
    2462:	0b be       	out	0x3b, r0	; 59
    2464:	0f 90       	pop	r0
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	0f 90       	pop	r0
    246a:	1f 90       	pop	r1
    246c:	18 95       	reti
_rx_complete_irq():
    246e:	80 81       	ld	r24, Z
    2470:	f2 cf       	rjmp	.-28     	; 0x2456 <__vector_21+0x48>

00002472 <__vector_31>:
__vector_31():
    2472:	1f 92       	push	r1
    2474:	0f 92       	push	r0
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	0f 92       	push	r0
    247a:	11 24       	eor	r1, r1
    247c:	8f 93       	push	r24
    247e:	9f 93       	push	r25
    2480:	af 93       	push	r26
    2482:	bf 93       	push	r27
    2484:	80 91 49 41 	lds	r24, 0x4149	; 0x804149 <timer_millis>
    2488:	90 91 4a 41 	lds	r25, 0x414A	; 0x80414a <timer_millis+0x1>
    248c:	a0 91 4b 41 	lds	r26, 0x414B	; 0x80414b <timer_millis+0x2>
    2490:	b0 91 4c 41 	lds	r27, 0x414C	; 0x80414c <timer_millis+0x3>
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	a1 1d       	adc	r26, r1
    2498:	b1 1d       	adc	r27, r1
    249a:	80 93 49 41 	sts	0x4149, r24	; 0x804149 <timer_millis>
    249e:	90 93 4a 41 	sts	0x414A, r25	; 0x80414a <timer_millis+0x1>
    24a2:	a0 93 4b 41 	sts	0x414B, r26	; 0x80414b <timer_millis+0x2>
    24a6:	b0 93 4c 41 	sts	0x414C, r27	; 0x80414c <timer_millis+0x3>
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    24b0:	bf 91       	pop	r27
    24b2:	af 91       	pop	r26
    24b4:	9f 91       	pop	r25
    24b6:	8f 91       	pop	r24
    24b8:	0f 90       	pop	r0
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	0f 90       	pop	r0
    24be:	1f 90       	pop	r1
    24c0:	18 95       	reti

000024c2 <__vector_44>:
__vector_44():
    24c2:	1f 92       	push	r1
    24c4:	0f 92       	push	r0
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	0f 92       	push	r0
    24ca:	11 24       	eor	r1, r1
    24cc:	0b b6       	in	r0, 0x3b	; 59
    24ce:	0f 92       	push	r0
    24d0:	2f 93       	push	r18
    24d2:	3f 93       	push	r19
    24d4:	4f 93       	push	r20
    24d6:	5f 93       	push	r21
    24d8:	6f 93       	push	r22
    24da:	7f 93       	push	r23
    24dc:	8f 93       	push	r24
    24de:	9f 93       	push	r25
    24e0:	af 93       	push	r26
    24e2:	bf 93       	push	r27
    24e4:	ef 93       	push	r30
    24e6:	ff 93       	push	r31
    24e8:	40 91 3c 0b 	lds	r20, 0x0B3C	; 0x800b3c <__TEXT_REGION_LENGTH__+0x7e0b3c>
    24ec:	50 91 3d 0b 	lds	r21, 0x0B3D	; 0x800b3d <__TEXT_REGION_LENGTH__+0x7e0b3d>
digitalReadFast():
    24f0:	86 b3       	in	r24, 0x16	; 22
__vector_44():
    24f2:	28 2f       	mov	r18, r24
    24f4:	28 70       	andi	r18, 0x08	; 8
    24f6:	83 fd       	sbrc	r24, 3
    24f8:	2a c0       	rjmp	.+84     	; 0x254e <__vector_44+0x8c>
    24fa:	81 e4       	ldi	r24, 0x41	; 65
    24fc:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <__TEXT_REGION_LENGTH__+0x7e0b34>
    2500:	80 91 45 41 	lds	r24, 0x4145	; 0x804145 <__vector_44::lasttime>
    2504:	90 91 46 41 	lds	r25, 0x4146	; 0x804146 <__vector_44::lasttime+0x1>
    2508:	ba 01       	movw	r22, r20
    250a:	68 1b       	sub	r22, r24
    250c:	79 0b       	sbc	r23, r25
    250e:	cb 01       	movw	r24, r22
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	40 93 45 41 	sts	0x4145, r20	; 0x804145 <__vector_44::lasttime>
    2518:	50 93 46 41 	sts	0x4146, r21	; 0x804146 <__vector_44::lasttime+0x1>
    251c:	60 93 47 41 	sts	0x4147, r22	; 0x804147 <__vector_44::lasttime+0x2>
    2520:	70 93 48 41 	sts	0x4148, r23	; 0x804148 <__vector_44::lasttime+0x3>
    2524:	22 23       	and	r18, r18
    2526:	81 f1       	breq	.+96     	; 0x2588 <__vector_44+0xc6>
    2528:	20 91 22 44 	lds	r18, 0x4422	; 0x804422 <receiving>
    252c:	22 23       	and	r18, r18
    252e:	89 f0       	breq	.+34     	; 0x2552 <__vector_44+0x90>
    2530:	8d 3d       	cpi	r24, 0xDD	; 221
    2532:	95 40       	sbci	r25, 0x05	; 5
    2534:	b0 f0       	brcs	.+44     	; 0x2562 <__vector_44+0xa0>
    2536:	10 92 22 44 	sts	0x4422, r1	; 0x804422 <receiving>
    253a:	10 92 44 41 	sts	0x4144, r1	; 0x804144 <bitnum>
    253e:	ed e4       	ldi	r30, 0x4D	; 77
    2540:	f1 e4       	ldi	r31, 0x41	; 65
    2542:	80 e2       	ldi	r24, 0x20	; 32
    2544:	df 01       	movw	r26, r30
    2546:	1d 92       	st	X+, r1
    2548:	8a 95       	dec	r24
    254a:	e9 f7       	brne	.-6      	; 0x2546 <__vector_44+0x84>
    254c:	0a c0       	rjmp	.+20     	; 0x2562 <__vector_44+0xa0>
    254e:	81 e5       	ldi	r24, 0x51	; 81
    2550:	d5 cf       	rjmp	.-86     	; 0x24fc <__vector_44+0x3a>
    2552:	88 51       	subi	r24, 0x18	; 24
    2554:	91 41       	sbci	r25, 0x11	; 17
    2556:	81 3e       	cpi	r24, 0xE1	; 225
    2558:	94 40       	sbci	r25, 0x04	; 4
    255a:	18 f4       	brcc	.+6      	; 0x2562 <__vector_44+0xa0>
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	80 93 22 44 	sts	0x4422, r24	; 0x804422 <receiving>
    2562:	ff 91       	pop	r31
    2564:	ef 91       	pop	r30
    2566:	bf 91       	pop	r27
    2568:	af 91       	pop	r26
    256a:	9f 91       	pop	r25
    256c:	8f 91       	pop	r24
    256e:	7f 91       	pop	r23
    2570:	6f 91       	pop	r22
    2572:	5f 91       	pop	r21
    2574:	4f 91       	pop	r20
    2576:	3f 91       	pop	r19
    2578:	2f 91       	pop	r18
    257a:	0f 90       	pop	r0
    257c:	0b be       	out	0x3b, r0	; 59
    257e:	0f 90       	pop	r0
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	0f 90       	pop	r0
    2584:	1f 90       	pop	r1
    2586:	18 95       	reti
    2588:	20 91 22 44 	lds	r18, 0x4422	; 0x804422 <receiving>
    258c:	22 23       	and	r18, r18
    258e:	49 f3       	breq	.-46     	; 0x2562 <__vector_44+0xa0>
    2590:	9c 01       	movw	r18, r24
    2592:	2b 5f       	subi	r18, 0xFB	; 251
    2594:	31 09       	sbc	r19, r1
    2596:	24 3d       	cpi	r18, 0xD4	; 212
    2598:	32 40       	sbci	r19, 0x02	; 2
    259a:	d8 f5       	brcc	.+118    	; 0x2612 <__vector_44+0x150>
    259c:	80 91 43 41 	lds	r24, 0x4143	; 0x804143 <dataIn>
    25a0:	88 0f       	add	r24, r24
    25a2:	80 93 43 41 	sts	0x4143, r24	; 0x804143 <dataIn>
    25a6:	80 91 44 41 	lds	r24, 0x4144	; 0x804144 <bitnum>
    25aa:	87 70       	andi	r24, 0x07	; 7
    25ac:	87 30       	cpi	r24, 0x07	; 7
    25ae:	09 f5       	brne	.+66     	; 0x25f2 <__vector_44+0x130>
    25b0:	80 91 43 41 	lds	r24, 0x4143	; 0x804143 <dataIn>
    25b4:	e0 91 44 41 	lds	r30, 0x4144	; 0x804144 <bitnum>
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	93 e0       	ldi	r25, 0x03	; 3
    25bc:	f5 95       	asr	r31
    25be:	e7 95       	ror	r30
    25c0:	9a 95       	dec	r25
    25c2:	e1 f7       	brne	.-8      	; 0x25bc <__vector_44+0xfa>
    25c4:	e3 5b       	subi	r30, 0xB3	; 179
    25c6:	fe 4b       	sbci	r31, 0xBE	; 190
    25c8:	80 83       	st	Z, r24
    25ca:	80 91 44 41 	lds	r24, 0x4144	; 0x804144 <bitnum>
    25ce:	87 30       	cpi	r24, 0x07	; 7
    25d0:	71 f4       	brne	.+28     	; 0x25ee <__vector_44+0x12c>
    25d2:	80 91 43 41 	lds	r24, 0x4143	; 0x804143 <dataIn>
    25d6:	82 95       	swap	r24
    25d8:	86 95       	lsr	r24
    25da:	86 95       	lsr	r24
    25dc:	83 70       	andi	r24, 0x03	; 3
    25de:	21 f1       	breq	.+72     	; 0x2628 <__vector_44+0x166>
    25e0:	81 30       	cpi	r24, 0x01	; 1
    25e2:	21 f1       	breq	.+72     	; 0x262c <__vector_44+0x16a>
    25e4:	82 30       	cpi	r24, 0x02	; 2
    25e6:	21 f1       	breq	.+72     	; 0x2630 <__vector_44+0x16e>
    25e8:	8f ef       	ldi	r24, 0xFF	; 255
    25ea:	80 93 02 40 	sts	0x4002, r24	; 0x804002 <pktLength>
    25ee:	10 92 43 41 	sts	0x4143, r1	; 0x804143 <dataIn>
    25f2:	90 91 44 41 	lds	r25, 0x4144	; 0x804144 <bitnum>
    25f6:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <pktLength>
    25fa:	98 17       	cp	r25, r24
    25fc:	d8 f0       	brcs	.+54     	; 0x2634 <__vector_44+0x172>
    25fe:	10 92 44 41 	sts	0x4144, r1	; 0x804144 <bitnum>
    2602:	10 92 22 44 	sts	0x4422, r1	; 0x804422 <receiving>
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	80 93 75 41 	sts	0x4175, r24	; 0x804175 <gotMessage>
    260c:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <__TEXT_REGION_LENGTH__+0x7e0b35>
    2610:	a8 cf       	rjmp	.-176    	; 0x2562 <__vector_44+0xa0>
    2612:	82 50       	subi	r24, 0x02	; 2
    2614:	94 40       	sbci	r25, 0x04	; 4
    2616:	84 3d       	cpi	r24, 0xD4	; 212
    2618:	92 40       	sbci	r25, 0x02	; 2
    261a:	08 f0       	brcs	.+2      	; 0x261e <__vector_44+0x15c>
    261c:	8c cf       	rjmp	.-232    	; 0x2536 <__vector_44+0x74>
    261e:	80 91 43 41 	lds	r24, 0x4143	; 0x804143 <dataIn>
    2622:	88 0f       	add	r24, r24
    2624:	8f 5f       	subi	r24, 0xFF	; 255
    2626:	bd cf       	rjmp	.-134    	; 0x25a2 <__vector_44+0xe0>
    2628:	8f e1       	ldi	r24, 0x1F	; 31
    262a:	df cf       	rjmp	.-66     	; 0x25ea <__vector_44+0x128>
    262c:	8f e3       	ldi	r24, 0x3F	; 63
    262e:	dd cf       	rjmp	.-70     	; 0x25ea <__vector_44+0x128>
    2630:	8f e7       	ldi	r24, 0x7F	; 127
    2632:	db cf       	rjmp	.-74     	; 0x25ea <__vector_44+0x128>
    2634:	80 91 44 41 	lds	r24, 0x4144	; 0x804144 <bitnum>
    2638:	8f 5f       	subi	r24, 0xFF	; 255
    263a:	80 93 44 41 	sts	0x4144, r24	; 0x804144 <bitnum>
    263e:	91 cf       	rjmp	.-222    	; 0x2562 <__vector_44+0xa0>

00002640 <__vector_30>:
__vector_30():
    2640:	1f 92       	push	r1
    2642:	0f 92       	push	r0
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	0f 92       	push	r0
    2648:	11 24       	eor	r1, r1
    264a:	0b b6       	in	r0, 0x3b	; 59
    264c:	0f 92       	push	r0
    264e:	2f 93       	push	r18
    2650:	3f 93       	push	r19
    2652:	4f 93       	push	r20
    2654:	5f 93       	push	r21
    2656:	8f 93       	push	r24
    2658:	9f 93       	push	r25
    265a:	ef 93       	push	r30
    265c:	ff 93       	push	r31
    265e:	90 91 00 40 	lds	r25, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    2662:	89 2f       	mov	r24, r25
    2664:	88 0f       	add	r24, r24
    2666:	88 0f       	add	r24, r24
    2668:	9a b1       	in	r25, 0x0a	; 10
    266a:	e9 2f       	mov	r30, r25
    266c:	ef 70       	andi	r30, 0x0F	; 15
    266e:	e6 95       	lsr	r30
    2670:	e6 95       	lsr	r30
    2672:	20 91 01 40 	lds	r18, 0x4001	; 0x804001 <__vector_30::EncL_Prev>
    2676:	22 0f       	add	r18, r18
    2678:	22 0f       	add	r18, r18
    267a:	e2 2b       	or	r30, r18
    267c:	e0 93 01 40 	sts	0x4001, r30	; 0x804001 <__vector_30::EncL_Prev>
    2680:	93 70       	andi	r25, 0x03	; 3
    2682:	98 2b       	or	r25, r24
    2684:	90 93 00 40 	sts	0x4000, r25	; 0x804000 <__DATA_REGION_ORIGIN__>
    2688:	ef 70       	andi	r30, 0x0F	; 15
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	ed 56       	subi	r30, 0x6D	; 109
    268e:	f9 4f       	sbci	r31, 0xF9	; 249
    2690:	84 91       	lpm	r24, Z
    2692:	e0 91 42 41 	lds	r30, 0x4142	; 0x804142 <__vector_30::EncL_Val>
    2696:	8e 0f       	add	r24, r30
    2698:	80 93 42 41 	sts	0x4142, r24	; 0x804142 <__vector_30::EncL_Val>
    269c:	9f 70       	andi	r25, 0x0F	; 15
    269e:	e9 2f       	mov	r30, r25
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	ed 56       	subi	r30, 0x6D	; 109
    26a4:	f9 4f       	sbci	r31, 0xF9	; 249
    26a6:	94 91       	lpm	r25, Z
    26a8:	e0 91 41 41 	lds	r30, 0x4141	; 0x804141 <__vector_30::EncR_Val>
    26ac:	9e 0f       	add	r25, r30
    26ae:	90 93 41 41 	sts	0x4141, r25	; 0x804141 <__vector_30::EncR_Val>
    26b2:	84 30       	cpi	r24, 0x04	; 4
    26b4:	0c f4       	brge	.+2      	; 0x26b8 <__vector_30+0x78>
    26b6:	81 c0       	rjmp	.+258    	; 0x27ba <__vector_30+0x17a>
    26b8:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	ef 5e       	subi	r30, 0xEF	; 239
    26c0:	fb 4b       	sbci	r31, 0xBB	; 187
    26c2:	20 81       	ld	r18, Z
    26c4:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    26c8:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    26cc:	38 e0       	ldi	r19, 0x08	; 8
    26ce:	83 9f       	mul	r24, r19
    26d0:	a0 01       	movw	r20, r0
    26d2:	11 24       	eor	r1, r1
    26d4:	e4 0f       	add	r30, r20
    26d6:	f5 2f       	mov	r31, r21
    26d8:	f1 1d       	adc	r31, r1
    26da:	e5 5c       	subi	r30, 0xC5	; 197
    26dc:	f9 4f       	sbci	r31, 0xF9	; 249
    26de:	e4 91       	lpm	r30, Z
    26e0:	2e 17       	cp	r18, r30
    26e2:	40 f4       	brcc	.+16     	; 0x26f4 <__vector_30+0xb4>
    26e4:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	ef 5e       	subi	r30, 0xEF	; 239
    26ec:	fb 4b       	sbci	r31, 0xBB	; 187
    26ee:	20 81       	ld	r18, Z
    26f0:	2f 5f       	subi	r18, 0xFF	; 255
    26f2:	20 83       	st	Z, r18
    26f4:	81 50       	subi	r24, 0x01	; 1
    26f6:	85 30       	cpi	r24, 0x05	; 5
    26f8:	10 f5       	brcc	.+68     	; 0x273e <__vector_30+0xfe>
    26fa:	80 91 9f 41 	lds	r24, 0x419F	; 0x80419f <currentSettingLeft>
    26fe:	86 30       	cpi	r24, 0x06	; 6
    2700:	f0 f4       	brcc	.+60     	; 0x273e <__vector_30+0xfe>
    2702:	80 91 9f 41 	lds	r24, 0x419F	; 0x80419f <currentSettingLeft>
    2706:	80 fd       	sbrc	r24, 0
    2708:	1a c0       	rjmp	.+52     	; 0x273e <__vector_30+0xfe>
    270a:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	ef 5e       	subi	r30, 0xEF	; 239
    2712:	fb 4b       	sbci	r31, 0xBB	; 187
    2714:	20 81       	ld	r18, Z
    2716:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	ee 5e       	subi	r30, 0xEE	; 238
    271e:	fb 4b       	sbci	r31, 0xBB	; 187
    2720:	80 81       	ld	r24, Z
    2722:	82 17       	cp	r24, r18
    2724:	60 f4       	brcc	.+24     	; 0x273e <__vector_30+0xfe>
    2726:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	ef 5e       	subi	r30, 0xEF	; 239
    272e:	fb 4b       	sbci	r31, 0xBB	; 187
    2730:	80 81       	ld	r24, Z
    2732:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	ee 5e       	subi	r30, 0xEE	; 238
    273a:	fb 4b       	sbci	r31, 0xBB	; 187
    273c:	80 83       	st	Z, r24
    273e:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    2742:	81 60       	ori	r24, 0x01	; 1
    2744:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
    2748:	10 92 42 41 	sts	0x4142, r1	; 0x804142 <__vector_30::EncL_Val>
    274c:	94 30       	cpi	r25, 0x04	; 4
    274e:	0c f4       	brge	.+2      	; 0x2752 <__vector_30+0x112>
    2750:	72 c0       	rjmp	.+228    	; 0x2836 <__vector_30+0x1f6>
    2752:	e0 91 9e 41 	lds	r30, 0x419E	; 0x80419e <currentSettingRight>
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	eb 5f       	subi	r30, 0xFB	; 251
    275a:	fb 4b       	sbci	r31, 0xBB	; 187
    275c:	20 81       	ld	r18, Z
    275e:	e0 91 9e 41 	lds	r30, 0x419E	; 0x80419e <currentSettingRight>
    2762:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    2766:	38 e0       	ldi	r19, 0x08	; 8
    2768:	83 9f       	mul	r24, r19
    276a:	c0 01       	movw	r24, r0
    276c:	11 24       	eor	r1, r1
    276e:	e8 0f       	add	r30, r24
    2770:	f9 2f       	mov	r31, r25
    2772:	f1 1d       	adc	r31, r1
    2774:	e9 5d       	subi	r30, 0xD9	; 217
    2776:	f6 4f       	sbci	r31, 0xF6	; 246
    2778:	e4 91       	lpm	r30, Z
    277a:	2e 17       	cp	r18, r30
    277c:	40 f4       	brcc	.+16     	; 0x278e <__vector_30+0x14e>
    277e:	e0 91 9e 41 	lds	r30, 0x419E	; 0x80419e <currentSettingRight>
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	eb 5f       	subi	r30, 0xFB	; 251
    2786:	fb 4b       	sbci	r31, 0xBB	; 187
    2788:	80 81       	ld	r24, Z
    278a:	8f 5f       	subi	r24, 0xFF	; 255
    278c:	80 83       	st	Z, r24
    278e:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    2792:	81 60       	ori	r24, 0x01	; 1
    2794:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
    2798:	10 92 41 41 	sts	0x4141, r1	; 0x804141 <__vector_30::EncR_Val>
    279c:	ff 91       	pop	r31
    279e:	ef 91       	pop	r30
    27a0:	9f 91       	pop	r25
    27a2:	8f 91       	pop	r24
    27a4:	5f 91       	pop	r21
    27a6:	4f 91       	pop	r20
    27a8:	3f 91       	pop	r19
    27aa:	2f 91       	pop	r18
    27ac:	0f 90       	pop	r0
    27ae:	0b be       	out	0x3b, r0	; 59
    27b0:	0f 90       	pop	r0
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	0f 90       	pop	r0
    27b6:	1f 90       	pop	r1
    27b8:	18 95       	reti
    27ba:	8d 3f       	cpi	r24, 0xFD	; 253
    27bc:	3c f6       	brge	.-114    	; 0x274c <__vector_30+0x10c>
    27be:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	ef 5e       	subi	r30, 0xEF	; 239
    27c6:	fb 4b       	sbci	r31, 0xBB	; 187
    27c8:	80 81       	ld	r24, Z
    27ca:	88 23       	and	r24, r24
    27cc:	41 f0       	breq	.+16     	; 0x27de <__vector_30+0x19e>
    27ce:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	ef 5e       	subi	r30, 0xEF	; 239
    27d6:	fb 4b       	sbci	r31, 0xBB	; 187
    27d8:	80 81       	ld	r24, Z
    27da:	81 50       	subi	r24, 0x01	; 1
    27dc:	80 83       	st	Z, r24
    27de:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    27e2:	81 50       	subi	r24, 0x01	; 1
    27e4:	82 30       	cpi	r24, 0x02	; 2
    27e6:	08 f0       	brcs	.+2      	; 0x27ea <__vector_30+0x1aa>
    27e8:	aa cf       	rjmp	.-172    	; 0x273e <__vector_30+0xfe>
    27ea:	80 91 9f 41 	lds	r24, 0x419F	; 0x80419f <currentSettingLeft>
    27ee:	86 30       	cpi	r24, 0x06	; 6
    27f0:	08 f0       	brcs	.+2      	; 0x27f4 <__vector_30+0x1b4>
    27f2:	a5 cf       	rjmp	.-182    	; 0x273e <__vector_30+0xfe>
    27f4:	80 91 9f 41 	lds	r24, 0x419F	; 0x80419f <currentSettingLeft>
    27f8:	80 ff       	sbrs	r24, 0
    27fa:	a1 cf       	rjmp	.-190    	; 0x273e <__vector_30+0xfe>
    27fc:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	ef 5e       	subi	r30, 0xEF	; 239
    2804:	fb 4b       	sbci	r31, 0xBB	; 187
    2806:	20 81       	ld	r18, Z
    2808:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    280c:	e1 50       	subi	r30, 0x01	; 1
    280e:	ff 0b       	sbc	r31, r31
    2810:	ef 5e       	subi	r30, 0xEF	; 239
    2812:	fb 4b       	sbci	r31, 0xBB	; 187
    2814:	80 81       	ld	r24, Z
    2816:	28 17       	cp	r18, r24
    2818:	08 f0       	brcs	.+2      	; 0x281c <__vector_30+0x1dc>
    281a:	91 cf       	rjmp	.-222    	; 0x273e <__vector_30+0xfe>
    281c:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	ef 5e       	subi	r30, 0xEF	; 239
    2824:	fb 4b       	sbci	r31, 0xBB	; 187
    2826:	80 81       	ld	r24, Z
    2828:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    282c:	e1 50       	subi	r30, 0x01	; 1
    282e:	ff 0b       	sbc	r31, r31
    2830:	ef 5e       	subi	r30, 0xEF	; 239
    2832:	fb 4b       	sbci	r31, 0xBB	; 187
    2834:	83 cf       	rjmp	.-250    	; 0x273c <__vector_30+0xfc>
    2836:	9d 3f       	cpi	r25, 0xFD	; 253
    2838:	0c f0       	brlt	.+2      	; 0x283c <__vector_30+0x1fc>
    283a:	b0 cf       	rjmp	.-160    	; 0x279c <__vector_30+0x15c>
    283c:	e0 91 9e 41 	lds	r30, 0x419E	; 0x80419e <currentSettingRight>
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	eb 5f       	subi	r30, 0xFB	; 251
    2844:	fb 4b       	sbci	r31, 0xBB	; 187
    2846:	80 81       	ld	r24, Z
    2848:	88 23       	and	r24, r24
    284a:	09 f4       	brne	.+2      	; 0x284e <__vector_30+0x20e>
    284c:	a0 cf       	rjmp	.-192    	; 0x278e <__vector_30+0x14e>
    284e:	e0 91 9e 41 	lds	r30, 0x419E	; 0x80419e <currentSettingRight>
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	eb 5f       	subi	r30, 0xFB	; 251
    2856:	fb 4b       	sbci	r31, 0xBB	; 187
    2858:	80 81       	ld	r24, Z
    285a:	81 50       	subi	r24, 0x01	; 1
    285c:	97 cf       	rjmp	.-210    	; 0x278c <__vector_30+0x14c>

0000285e <global constructors keyed to 65535_0_DriftAnimate_V2.ino.cpp.o.3545>:
_GLOBAL__I_65535_0_DriftAnimate_V2.ino.cpp.o.3545():
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	e3 e2       	ldi	r30, 0x23	; 35
    2868:	f4 e4       	ldi	r31, 0x44	; 68
    286a:	12 82       	std	Z+2, r1	; 0x02
    286c:	13 82       	std	Z+3, r1	; 0x03
    286e:	88 ee       	ldi	r24, 0xE8	; 232
    2870:	93 e0       	ldi	r25, 0x03	; 3
    2872:	a0 e0       	ldi	r26, 0x00	; 0
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	84 83       	std	Z+4, r24	; 0x04
    2878:	95 83       	std	Z+5, r25	; 0x05
    287a:	a6 83       	std	Z+6, r26	; 0x06
    287c:	b7 83       	std	Z+7, r27	; 0x07
    287e:	81 e6       	ldi	r24, 0x61	; 97
    2880:	90 e4       	ldi	r25, 0x40	; 64
    2882:	80 83       	st	Z, r24
    2884:	91 83       	std	Z+1, r25	; 0x01
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	98 e0       	ldi	r25, 0x08	; 8
    288a:	84 87       	std	Z+12, r24	; 0x0c
    288c:	95 87       	std	Z+13, r25	; 0x0d
    288e:	06 e1       	ldi	r16, 0x16	; 22
    2890:	06 87       	std	Z+14, r16	; 0x0e
    2892:	11 e0       	ldi	r17, 0x01	; 1
    2894:	17 87       	std	Z+15, r17	; 0x0f
    2896:	10 8a       	std	Z+16, r1	; 0x10
    2898:	11 8a       	std	Z+17, r1	; 0x11
    289a:	85 e0       	ldi	r24, 0x05	; 5
    289c:	82 8b       	std	Z+18, r24	; 0x12
    289e:	84 e0       	ldi	r24, 0x04	; 4
    28a0:	83 8b       	std	Z+19, r24	; 0x13
    28a2:	14 8b       	std	Z+20, r17	; 0x14
    28a4:	15 8a       	std	Z+21, r1	; 0x15
    28a6:	16 8a       	std	Z+22, r1	; 0x16
    28a8:	17 8a       	std	Z+23, r1	; 0x17
    28aa:	10 8e       	std	Z+24, r1	; 0x18
    28ac:	11 8e       	std	Z+25, r1	; 0x19
    28ae:	12 8e       	std	Z+26, r1	; 0x1a
    28b0:	c9 e2       	ldi	r28, 0x29	; 41
    28b2:	d7 e4       	ldi	r29, 0x47	; 71
    28b4:	1a 82       	std	Y+2, r1	; 0x02
    28b6:	1b 82       	std	Y+3, r1	; 0x03
    28b8:	8d ec       	ldi	r24, 0xCD	; 205
    28ba:	90 e4       	ldi	r25, 0x40	; 64
    28bc:	88 83       	st	Y, r24
    28be:	99 83       	std	Y+1, r25	; 0x01
    28c0:	1f 82       	std	Y+7, r1	; 0x07
    28c2:	18 86       	std	Y+8, r1	; 0x08
    28c4:	80 ed       	ldi	r24, 0xD0	; 208
    28c6:	97 e0       	ldi	r25, 0x07	; 7
    28c8:	a0 e0       	ldi	r26, 0x00	; 0
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	88 8b       	std	Y+16, r24	; 0x10
    28ce:	99 8b       	std	Y+17, r25	; 0x11
    28d0:	aa 8b       	std	Y+18, r26	; 0x12
    28d2:	bb 8b       	std	Y+19, r27	; 0x13
    28d4:	86 e2       	ldi	r24, 0x26	; 38
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	a0 e0       	ldi	r26, 0x00	; 0
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	8c 8b       	std	Y+20, r24	; 0x14
    28de:	9d 8b       	std	Y+21, r25	; 0x15
    28e0:	ae 8b       	std	Y+22, r26	; 0x16
    28e2:	bf 8b       	std	Y+23, r27	; 0x17
    28e4:	1c 86       	std	Y+12, r1	; 0x0c
    28e6:	1d 86       	std	Y+13, r1	; 0x0d
    28e8:	1e 86       	std	Y+14, r1	; 0x0e
    28ea:	1f 86       	std	Y+15, r1	; 0x0f
    28ec:	1b 86       	std	Y+11, r1	; 0x0b
    28ee:	0e 94 43 06 	call	0xc86	; 0xc86 <micros>
    28f2:	68 8f       	std	Y+24, r22	; 0x18
    28f4:	79 8f       	std	Y+25, r23	; 0x19
    28f6:	8a 8f       	std	Y+26, r24	; 0x1a
    28f8:	9b 8f       	std	Y+27, r25	; 0x1b
    28fa:	1c 8e       	std	Y+28, r1	; 0x1c
    28fc:	1d 8e       	std	Y+29, r1	; 0x1d
    28fe:	1e 8e       	std	Y+30, r1	; 0x1e
    2900:	1f 8e       	std	Y+31, r1	; 0x1f
    2902:	83 ee       	ldi	r24, 0xE3	; 227
    2904:	90 e4       	ldi	r25, 0x40	; 64
    2906:	88 83       	st	Y, r24
    2908:	99 83       	std	Y+1, r25	; 0x01
    290a:	8a e1       	ldi	r24, 0x1A	; 26
    290c:	88 a3       	std	Y+32, r24	; 0x20
    290e:	8d e1       	ldi	r24, 0x1D	; 29
    2910:	8a a3       	std	Y+34, r24	; 0x22
    2912:	8b e1       	ldi	r24, 0x1B	; 27
    2914:	89 a3       	std	Y+33, r24	; 0x21
    2916:	0b a3       	std	Y+35, r16	; 0x23
    2918:	87 e1       	ldi	r24, 0x17	; 23
    291a:	8c a3       	std	Y+36, r24	; 0x24
    291c:	88 e1       	ldi	r24, 0x18	; 24
    291e:	8d a3       	std	Y+37, r24	; 0x25
    2920:	89 e1       	ldi	r24, 0x19	; 25
    2922:	8e a3       	std	Y+38, r24	; 0x26
    2924:	8f ef       	ldi	r24, 0xFF	; 255
    2926:	8f a3       	std	Y+39, r24	; 0x27
    2928:	88 a7       	std	Y+40, r24	; 0x28
    292a:	e6 e1       	ldi	r30, 0x16	; 22
    292c:	f7 e4       	ldi	r31, 0x47	; 71
    292e:	15 82       	std	Z+5, r1	; 0x05
    2930:	8e eb       	ldi	r24, 0xBE	; 190
    2932:	94 e4       	ldi	r25, 0x44	; 68
    2934:	86 83       	std	Z+6, r24	; 0x06
    2936:	97 83       	std	Z+7, r25	; 0x07
    2938:	14 86       	std	Z+12, r1	; 0x0c
    293a:	15 86       	std	Z+13, r1	; 0x0d
    293c:	16 86       	std	Z+14, r1	; 0x0e
    293e:	17 86       	std	Z+15, r1	; 0x0f
    2940:	13 87       	std	Z+11, r17	; 0x0b
    2942:	10 87       	std	Z+8, r17	; 0x08
    2944:	11 86       	std	Z+9, r1	; 0x09
    2946:	82 e0       	ldi	r24, 0x02	; 2
    2948:	82 87       	std	Z+10, r24	; 0x0a
    294a:	88 e5       	ldi	r24, 0x58	; 88
    294c:	92 e0       	ldi	r25, 0x02	; 2
    294e:	82 83       	std	Z+2, r24	; 0x02
    2950:	93 83       	std	Z+3, r25	; 0x03
    2952:	88 ec       	ldi	r24, 0xC8	; 200
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	80 83       	st	Z, r24
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	86 e0       	ldi	r24, 0x06	; 6
    295c:	84 83       	std	Z+4, r24	; 0x04
    295e:	84 e0       	ldi	r24, 0x04	; 4
    2960:	94 e0       	ldi	r25, 0x04	; 4
    2962:	80 8b       	std	Z+16, r24	; 0x10
    2964:	91 8b       	std	Z+17, r25	; 0x11
    2966:	80 e4       	ldi	r24, 0x40	; 64
    2968:	82 8b       	std	Z+18, r24	; 0x12
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	1f 91       	pop	r17
    2970:	0f 91       	pop	r16
    2972:	08 95       	ret

00002974 <main>:
main():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	63 97       	sbiw	r28, 0x13	; 19
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	de bf       	out	0x3e, r29	; 62
init_clock():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1205
      /* Overclocked - generally quite reliable at room temperature, but a dumb frequency (see PWM section) */
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x0A << 2));
    #elif (F_CPU == 24000000)
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x09 << 2));
    #elif (F_CPU == 20000000)
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x08 << 2));
    2982:	88 ed       	ldi	r24, 0xD8	; 216
    2984:	90 e2       	ldi	r25, 0x20	; 32
    2986:	84 bf       	out	0x34, r24	; 52
    2988:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
init_TCA0():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1450
}

void __attribute__((weak)) init_TCA0() {
  /* TCA0_PINS from pins_arduino.h */
  /* Enable Split Mode to get more PWM pins, since analogWrite() only provides 8-bit PWM anyway*/
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
    298c:	21 e0       	ldi	r18, 0x01	; 1
    298e:	20 93 03 0a 	sts	0x0A03, r18	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7e0a03>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1455

  //Only 1 WGM is available in split mode

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
    2992:	8e ef       	ldi	r24, 0xFE	; 254
    2994:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7e0a26>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1456
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
    2998:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7e0a27>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1487
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) //use 64 divider unless it's 5 MHz or under
    #if defined(MILLIS_USE_TIMERA0) && (TIME_TRACKING_TIMER_DIVIDER != 64)
      #error "wiring.c and timers.h want to set millis timer TCA0 to different divider"
    #endif
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
    299c:	9b e0       	ldi	r25, 0x0B	; 11
    299e:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7e0a00>
init_timers():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1436
uint8_t PeripheralControl = 0xFF;

void init_timers() {
  init_TCA0();
  #if (defined(TCA1))
    PORTMUX.TCAROUTEA = TCA0_PINS | TCA1_PINS;
    29a2:	32 e0       	ldi	r19, 0x02	; 2
    29a4:	30 93 e6 05 	sts	0x05E6, r19	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
init_TCA1():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1505

#if defined(TCA1)
void __attribute__((weak)) init_TCA1() {

  /* Enable Split Mode */
  TCA1.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
    29a8:	20 93 43 0a 	sts	0x0A43, r18	; 0x800a43 <__TEXT_REGION_LENGTH__+0x7e0a43>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1508

  /* Period setting, 8-bit register in SPLIT mode */
  TCA1.SPLIT.LPER    = PWM_TIMER_PERIOD;
    29ac:	80 93 66 0a 	sts	0x0A66, r24	; 0x800a66 <__TEXT_REGION_LENGTH__+0x7e0a66>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1509
  TCA1.SPLIT.HPER    = PWM_TIMER_PERIOD;
    29b0:	80 93 67 0a 	sts	0x0A67, r24	; 0x800a67 <__TEXT_REGION_LENGTH__+0x7e0a67>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1520
    TCA1.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) //use 64 divider unless it's 5 MHz or under
    #if defined(MILLIS_USE_TIMERA1) && (TIME_TRACKING_TIMER_DIVIDER != 64)
      #error "wiring.c and timers.h want to set millis timer TCA1 to different divider"
    #endif
    TCA1.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
    29b4:	90 93 40 0a 	sts	0x0A40, r25	; 0x800a40 <__TEXT_REGION_LENGTH__+0x7e0a40>
init_TCBs():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1542
 * Set up routing (defined in pins_arduino.h)
 * Notice how there's no semicolon until after the preprocessor conditionals.
 * In other words, that's all one line.
 */

  PORTMUX.TCBROUTEA = 0
    29b8:	90 93 e7 05 	sts	0x05E7, r25	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7e05e7>
main():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1561
                        | TCB4_PINS
  #endif
        ;
  // Start with TCB0 - we take advantage of the fact that we can get a pointer
  // to TCB09's struct, and increment it to go through all of them.
  TCB_t *timer_B = (TCB_t *)&TCB0;
    29bc:	e0 e0       	ldi	r30, 0x00	; 0
    29be:	fb e0       	ldi	r31, 0x0B	; 11
init_TCBs():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1581
  #endif

  // Timer B Setup loop for TCB[0:end]
  do {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
    29c0:	37 e0       	ldi	r19, 0x07	; 7
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1584

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD; // TOP = 254 see section at start
    29c2:	2e ef       	ldi	r18, 0xFE	; 254
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1587
    // default duty 50% - we have to set something here because of the
    // errata, otherwise CCMP will not get the CCMPL either.
    timer_B->CCMPH = PWM_TIMER_COMPARE;
    29c4:	90 e8       	ldi	r25, 0x80	; 128
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1590

    // Use TCA clock (250kHz, +/- 50%) and enable
    timer_B->CTRLA = (TCB_CLKSEL_TCA0_gc) | (TCB_ENABLE_bm);
    29c6:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1581
  #endif

  // Timer B Setup loop for TCB[0:end]
  do {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
    29c8:	31 83       	std	Z+1, r19	; 0x01
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1584

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD; // TOP = 254 see section at start
    29ca:	24 87       	std	Z+12, r18	; 0x0c
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1587
    // default duty 50% - we have to set something here because of the
    // errata, otherwise CCMP will not get the CCMPL either.
    timer_B->CCMPH = PWM_TIMER_COMPARE;
    29cc:	95 87       	std	Z+13, r25	; 0x0d
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1590

    // Use TCA clock (250kHz, +/- 50%) and enable
    timer_B->CTRLA = (TCB_CLKSEL_TCA0_gc) | (TCB_ENABLE_bm);
    29ce:	80 83       	st	Z, r24
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1593

    // Increment pointer to next TCB instance
    timer_B++;
    29d0:	70 96       	adiw	r30, 0x10	; 16
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1596

    // Stop when pointing to the last timer.
  } while (timer_B <= timer_B_end);
    29d2:	e0 34       	cpi	r30, 0x40	; 64
    29d4:	4b e0       	ldi	r20, 0x0B	; 11
    29d6:	f4 07       	cpc	r31, r20
    29d8:	b9 f7       	brne	.-18     	; 0x29c8 <main+0x54>
init_TCD0():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1633
 * prescaler is 1. Similarly, it cannot be enabled right after disabling it - the ENRDY bit must*
 * be set in the status register. We skip checking this here because, as we do many places the  *
 * initiialization functions assume that the chip starts from a reset condtition.               */

void __attribute__((weak)) init_TCD0() {
  TCD0.CMPACLR  = 0x0FFF;
    29da:	2f ef       	ldi	r18, 0xFF	; 255
    29dc:	3f e0       	ldi	r19, 0x0F	; 15
    29de:	20 93 aa 0b 	sts	0x0BAA, r18	; 0x800baa <__TEXT_REGION_LENGTH__+0x7e0baa>
    29e2:	30 93 ab 0b 	sts	0x0BAB, r19	; 0x800bab <__TEXT_REGION_LENGTH__+0x7e0bab>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1637
  // Match with CMPBCLR clears all outputs. For normal PWM this just needs to be higher than
  // it will count to - so set to maximum (other settings used for non-overlapping PWM and
  // other advanced functionality)
  TCD0.CTRLC    = 0x80;                   // WOD outputs PWM B, WOC outputs PWM A
    29e6:	90 93 82 0b 	sts	0x0B82, r25	; 0x800b82 <__TEXT_REGION_LENGTH__+0x7e0b82>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1639
  // That doesn't need to be that way, but I declare that that's all we support through analogWrite()
  TCD0.CTRLB    = TCD_WGMODE_ONERAMP_gc;
    29ea:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <__TEXT_REGION_LENGTH__+0x7e0b81>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1644
  // One ramp or dual slope are the only options that are viable to reproduce classic behavior.
  // and the latter is incompatible with using it as millis timer, and we want to share as much
  // code as we can between the TCD0 and non-TCD0 millis. IIRC with dual slope, one value needs
  // to be inverted and the other does not.
  TCD0.CMPBCLR  = TIMERD0_TOP_SETTING;
    29ee:	2d ef       	ldi	r18, 0xFD	; 253
    29f0:	31 e0       	ldi	r19, 0x01	; 1
    29f2:	20 93 ae 0b 	sts	0x0BAE, r18	; 0x800bae <__TEXT_REGION_LENGTH__+0x7e0bae>
    29f6:	30 93 af 0b 	sts	0x0BAF, r19	; 0x800baf <__TEXT_REGION_LENGTH__+0x7e0baf>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1654
  #if (defined(TIMERD0_SET_CLOCK) && TIMERD0_SET_CLOCK == 0x08)
    _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x05 << 2));
  #endif


  TCD0.CTRLA    = TIMERD0_CLOCK_SETTING | TCD_ENABLE_bm;
    29fa:	91 e7       	ldi	r25, 0x71	; 113
    29fc:	90 93 80 0b 	sts	0x0B80, r25	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
init_ADC0():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1097
    #elif F_CPU >  28000000
      ADC0.CTRLC = ADC_PRESC_DIV24_gc; //1.33 @ 32 MHz, 1.
    #elif F_CPU >= 24000000
      ADC0.CTRLC = ADC_PRESC_DIV20_gc; //1.2 @ 24, 1.25 @ 25, 1.4 @ 28  MHz
    #elif F_CPU >= 20000000
      ADC0.CTRLC = ADC_PRESC_DIV16_gc; //1.25 @ 20 MHz
    2a00:	94 e0       	ldi	r25, 0x04	; 4
    2a02:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1107
    #elif F_CPU >= 4000000
      ADC0.CTRLC = ADC_PRESC_DIV4_gc;  //1 MHz
    #else  // 1 MHz / 2 = 500 kHz - the lowest setting
      ADC0.CTRLC = ADC_PRESC_DIV2_gc;
    #endif
    ADC0.SAMPCTRL = 14; //16 ADC clock sampling time - should be about the same amount of *time* as originally?
    2a06:	9e e0       	ldi	r25, 0x0E	; 14
    2a08:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x7e0605>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1109
    // This is WAY conservative! We could drop it down...
    ADC0.CTRLD = ADC_INITDLY_DLY64_gc; //VREF can take 50uS to become ready, and we're running the ADC clock
    2a0c:	90 e6       	ldi	r25, 0x60	; 96
    2a0e:	90 93 03 06 	sts	0x0603, r25	; 0x800603 <__TEXT_REGION_LENGTH__+0x7e0603>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1112
    // at around 1 MHz, so we want 64 ADC clocks when we start up a new reference so we don't get bad readings at first
    /* Enable ADC */
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_10BIT_gc;
    2a12:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7e0600>
analogReference():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:124


void analogReference(uint8_t mode) {
  check_valid_analog_ref(mode);
  if (mode < 7 && mode !=4) {
    VREF.ADC0REF = (VREF.ADC0REF & ~(VREF_REFSEL_gm))|(mode);
    2a16:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2a1a:	88 7f       	andi	r24, 0xF8	; 248
    2a1c:	85 60       	ori	r24, 0x05	; 5
    2a1e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
DACReference():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:131
}

void DACReference(uint8_t mode) {
  check_valid_analog_ref(mode);
  if (mode < 7 && mode !=4) {
    VREF.DAC0REF = (VREF.DAC0REF & ~(VREF_REFSEL_gm))|(mode);
    2a22:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2a26:	88 7f       	andi	r24, 0xF8	; 248
    2a28:	85 60       	ori	r24, 0x05	; 5
    2a2a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
init_millis():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1046
      //RTC.CLKSEL = 0; this is the power on value
    #endif
      RTC.INTCTRL = 0x01; //enable overflow interrupt
      RTC.CTRLA = (RTC_RUNSTDBY_bm|RTC_RTCEN_bm|RTC_PRESCALER_DIV32_gc);//fire it up, prescale by 32.
    #else //It's a type b timer
      _timer->CCMP = TIME_TRACKING_TIMER_PERIOD;
    2a2e:	8f e0       	ldi	r24, 0x0F	; 15
    2a30:	97 e2       	ldi	r25, 0x27	; 39
    2a32:	80 93 2c 0b 	sts	0x0B2C, r24	; 0x800b2c <__TEXT_REGION_LENGTH__+0x7e0b2c>
    2a36:	90 93 2d 0b 	sts	0x0B2D, r25	; 0x800b2d <__TEXT_REGION_LENGTH__+0x7e0b2d>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1048
      // Enable timer interrupt, but clear the rest of register
      _timer->INTCTRL = TCB_CAPT_bm;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	80 93 25 0b 	sts	0x0B25, r24	; 0x800b25 <__TEXT_REGION_LENGTH__+0x7e0b25>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1050
      // Clear timer mode (since it will have been set as PWM by init())
      _timer->CTRLB = 0;
    2a40:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <__TEXT_REGION_LENGTH__+0x7e0b21>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1052
      // CLK_PER/1 is 0b00, . CLK_PER/2 is 0b01, so bitwise OR of valid divider with enable works
      _timer->CTRLA = TIME_TRACKING_TIMER_DIVIDER|TCB_ENABLE_bm;  // Keep this last before enabling interrupts to ensure tracking as accurate as possible
    2a44:	83 e0       	ldi	r24, 0x03	; 3
    2a46:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <__TEXT_REGION_LENGTH__+0x7e0b20>
main():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/main.cpp:53
  onBeforeInit(); //Emnpty callback called before init but after the .init stuff. First normal code executed
  init(); //Interrupts are turned on just prior to init() returning.
  initVariant();
  if (!onAfterInit()) sei();  //enable interrupts.
    2a4a:	78 94       	sei
setupPins():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:990
  }
}


void setupPins() {
  pinMode(LEDPIN, OUTPUT);
    2a4c:	61 e0       	ldi	r22, 0x01	; 1
    2a4e:	86 e0       	ldi	r24, 0x06	; 6
    2a50:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <pinMode>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:991
  pinMode(ENC1_PINA, INPUT_PULLUP);
    2a54:	62 e0       	ldi	r22, 0x02	; 2
    2a56:	8e e0       	ldi	r24, 0x0E	; 14
    2a58:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <pinMode>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:992
  pinMode(ENC1_PINB, INPUT_PULLUP);
    2a5c:	62 e0       	ldi	r22, 0x02	; 2
    2a5e:	8f e0       	ldi	r24, 0x0F	; 15
    2a60:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <pinMode>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:993
  pinMode(ENC1_BTN, INPUT_PULLUP);
    2a64:	62 e0       	ldi	r22, 0x02	; 2
    2a66:	8b e0       	ldi	r24, 0x0B	; 11
    2a68:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <pinMode>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:994
  pinMode(ENC2_PINA, INPUT_PULLUP);
    2a6c:	62 e0       	ldi	r22, 0x02	; 2
    2a6e:	80 e1       	ldi	r24, 0x10	; 16
    2a70:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <pinMode>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:995
  pinMode(ENC2_PINB, INPUT_PULLUP);
    2a74:	62 e0       	ldi	r22, 0x02	; 2
    2a76:	81 e1       	ldi	r24, 0x11	; 17
    2a78:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <pinMode>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:996
  pinMode(ENC2_BTN, INPUT_PULLUP);
    2a7c:	62 e0       	ldi	r22, 0x02	; 2
    2a7e:	8c e0       	ldi	r24, 0x0C	; 12
    2a80:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <pinMode>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:997
  pinMode(MODE_BTN, INPUT_PULLUP);
    2a84:	62 e0       	ldi	r22, 0x02	; 2
    2a86:	8d e0       	ldi	r24, 0x0D	; 13
    2a88:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <pinMode>
setupPCINT():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1003
}

#define debugSerial Serial0

void setupPCINT() {
  if (!MVIO.STATUS) {
    2a8c:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2a90:	81 11       	cpse	r24, r1
    2a92:	56 c0       	rjmp	.+172    	; 0x2b40 <main+0x1cc>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1004
    uint32_t start = millis();
    2a94:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    2a98:	4b 01       	movw	r8, r22
    2a9a:	5c 01       	movw	r10, r24
analogRead():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:143
    pin = digitalPinToAnalogInput(pin);
    if(pin == NOT_A_PIN) return -1;

  }
  /* Select channel */
  ADC0.MUXPOS = ((pin & 0x7F) << ADC_MUXPOS_gp);
    2a9c:	15 e4       	ldi	r17, 0x45	; 69
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:147
  /* Reference should be already set up */

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
    2a9e:	01 e0       	ldi	r16, 0x01	; 1
setupPCINT():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1005
    while ((!MVIO.STATUS) && millis() - start > 2000) {
    2aa0:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2aa4:	81 11       	cpse	r24, r1
    2aa6:	4c c0       	rjmp	.+152    	; 0x2b40 <main+0x1cc>
    2aa8:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    2aac:	68 19       	sub	r22, r8
    2aae:	79 09       	sbc	r23, r9
    2ab0:	8a 09       	sbc	r24, r10
    2ab2:	9b 09       	sbc	r25, r11
    2ab4:	61 3d       	cpi	r22, 0xD1	; 209
    2ab6:	77 40       	sbci	r23, 0x07	; 7
    2ab8:	81 05       	cpc	r24, r1
    2aba:	91 05       	cpc	r25, r1
    2abc:	08 f4       	brcc	.+2      	; 0x2ac0 <main+0x14c>
    2abe:	40 c0       	rjmp	.+128    	; 0x2b40 <main+0x1cc>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1006
      if (millis() - start > 1000) {
    2ac0:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    2ac4:	68 19       	sub	r22, r8
    2ac6:	79 09       	sbc	r23, r9
    2ac8:	8a 09       	sbc	r24, r10
    2aca:	9b 09       	sbc	r25, r11
    2acc:	69 3e       	cpi	r22, 0xE9	; 233
    2ace:	73 40       	sbci	r23, 0x03	; 3
    2ad0:	81 05       	cpc	r24, r1
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	28 f3       	brcs	.-54     	; 0x2aa0 <main+0x12c>
write():
    2ad6:	66 e0       	ldi	r22, 0x06	; 6
    2ad8:	71 e4       	ldi	r23, 0x41	; 65
    2ada:	83 e2       	ldi	r24, 0x23	; 35
    2adc:	94 e4       	ldi	r25, 0x44	; 68
    2ade:	61 d8       	rcall	.-3902   	; 0x1ba2 <Print::write(char const*) [clone .part.2]>
    2ae0:	63 e0       	ldi	r22, 0x03	; 3
    2ae2:	71 e4       	ldi	r23, 0x41	; 65
    2ae4:	83 e2       	ldi	r24, 0x23	; 35
    2ae6:	94 e4       	ldi	r25, 0x44	; 68
    2ae8:	5c d8       	rcall	.-3912   	; 0x1ba2 <Print::write(char const*) [clone .part.2]>
analogRead():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:143
    pin = digitalPinToAnalogInput(pin);
    if(pin == NOT_A_PIN) return -1;

  }
  /* Select channel */
  ADC0.MUXPOS = ((pin & 0x7F) << ADC_MUXPOS_gp);
    2aea:	10 93 08 06 	sts	0x0608, r17	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:147
  /* Reference should be already set up */

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
    2aee:	00 93 0a 06 	sts	0x060A, r16	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:150

  /* Wait for result ready */
  while(!(ADC0.INTFLAGS & ADC_RESRDY_bm));
    2af2:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
    2af6:	80 ff       	sbrs	r24, 0
    2af8:	fc cf       	rjmp	.-8      	; 0x2af2 <main+0x17e>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:156

  #if (defined(__AVR_DA__) && (!defined(NO_ADC_WORKAROUND)))
    // That may become defined when DA-series silicon is available with the fix
    ADC0.MUXPOS = 0x40;
  #endif
  return ADC0.RES;
    2afa:	c0 90 10 06 	lds	r12, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    2afe:	d0 90 11 06 	lds	r13, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
print():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:78
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    2b02:	0d 2c       	mov	r0, r13
    2b04:	00 0c       	add	r0, r0
    2b06:	ee 08       	sbc	r14, r14
    2b08:	ff 08       	sbc	r15, r15
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:96
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2b0a:	2a e0       	ldi	r18, 0x0A	; 10
    2b0c:	b7 01       	movw	r22, r14
    2b0e:	a6 01       	movw	r20, r12
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:91
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    2b10:	f7 fe       	sbrs	r15, 7
    2b12:	0d c0       	rjmp	.+26     	; 0x2b2e <main+0x1ba>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:92
      int t = print('-');
    2b14:	6d e2       	ldi	r22, 0x2D	; 45
    2b16:	83 e2       	ldi	r24, 0x23	; 35
    2b18:	94 e4       	ldi	r25, 0x44	; 68
    2b1a:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(char)>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:93
      n = -n;
    2b1e:	44 27       	eor	r20, r20
    2b20:	55 27       	eor	r21, r21
    2b22:	ba 01       	movw	r22, r20
    2b24:	4c 19       	sub	r20, r12
    2b26:	5d 09       	sbc	r21, r13
    2b28:	6e 09       	sbc	r22, r14
    2b2a:	7f 09       	sbc	r23, r15
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:94
      return printNumber(n, 10) + t;
    2b2c:	2a e0       	ldi	r18, 0x0A	; 10
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:96
    }
    return printNumber(n, 10);
    2b2e:	83 e2       	ldi	r24, 0x23	; 35
    2b30:	94 e4       	ldi	r25, 0x44	; 68
    2b32:	46 d8       	rcall	.-3956   	; 0x1bc0 <Print::printNumber(unsigned long, unsigned char)>
write():
    2b34:	63 e0       	ldi	r22, 0x03	; 3
    2b36:	71 e4       	ldi	r23, 0x41	; 65
    2b38:	83 e2       	ldi	r24, 0x23	; 35
    2b3a:	94 e4       	ldi	r25, 0x44	; 68
    2b3c:	32 d8       	rcall	.-3996   	; 0x1ba2 <Print::write(char const*) [clone .part.2]>
    2b3e:	b0 cf       	rjmp	.-160    	; 0x2aa0 <main+0x12c>
setupPCINT():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1012
        Serial.println("MVIO failed to initialize? No VDDIO2?");
        Serial.println(analogRead(ADC_VDDIO2DIV10));
      }
    }
  }
  VPORTC.INTFLAGS = VPORTC.INTFLAGS;
    2b40:	8b b1       	in	r24, 0x0b	; 11
    2b42:	8b b9       	out	0x0b, r24	; 11
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1013
  PORTC.PIN0CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    2b44:	89 e0       	ldi	r24, 0x09	; 9
    2b46:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__TEXT_REGION_LENGTH__+0x7e0450>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1014
  PORTC.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    2b4a:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <__TEXT_REGION_LENGTH__+0x7e0451>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1015
  PORTC.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    2b4e:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <__TEXT_REGION_LENGTH__+0x7e0452>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1016
  PORTC.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    2b52:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x7e0453>
swap():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.cpp:175
  return false;
}

bool UartClass::swap(uint8_t state) {
  if (state == 1) { // Use alternative pin position
    _pin_set = state;
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	80 93 38 44 	sts	0x4438, r24	; 0x804438 <Serial0+0x15>
setup():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:265
void setup() {
  setupPins();
  setupPCINT();
  //setupRF();
  Serial.swap(1);
  Serial.begin(115200);
    2b5c:	40 e0       	ldi	r20, 0x00	; 0
    2b5e:	52 ec       	ldi	r21, 0xC2	; 194
    2b60:	61 e0       	ldi	r22, 0x01	; 1
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	83 e2       	ldi	r24, 0x23	; 35
    2b66:	94 e4       	ldi	r25, 0x44	; 68
    2b68:	0e 94 09 09 	call	0x1212	; 0x1212 <UartClass::begin(unsigned long)>
write():
    2b6c:	6c e2       	ldi	r22, 0x2C	; 44
    2b6e:	71 e4       	ldi	r23, 0x41	; 65
    2b70:	83 e2       	ldi	r24, 0x23	; 35
    2b72:	94 e4       	ldi	r25, 0x44	; 68
    2b74:	16 d8       	rcall	.-4052   	; 0x1ba2 <Print::write(char const*) [clone .part.2]>
    2b76:	63 e0       	ldi	r22, 0x03	; 3
    2b78:	71 e4       	ldi	r23, 0x41	; 65
    2b7a:	83 e2       	ldi	r24, 0x23	; 35
    2b7c:	94 e4       	ldi	r25, 0x44	; 68
    2b7e:	11 d8       	rcall	.-4062   	; 0x1ba2 <Print::write(char const*) [clone .part.2]>
setup():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:267
  Serial.println("Hi, I started!");
  lcd.print(F("Woah, I'm on a DB!"));
    2b80:	62 eb       	ldi	r22, 0xB2	; 178
    2b82:	76 e0       	ldi	r23, 0x06	; 6
    2b84:	89 e2       	ldi	r24, 0x29	; 41
    2b86:	97 e4       	ldi	r25, 0x47	; 71
    2b88:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:268
  lcd.setCursor(0, 1);
    2b8c:	41 e0       	ldi	r20, 0x01	; 1
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	89 e2       	ldi	r24, 0x29	; 41
    2b92:	97 e4       	ldi	r25, 0x47	; 71
    2b94:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:269
  lcd.print(F("Nothing works!"));
    2b98:	63 ea       	ldi	r22, 0xA3	; 163
    2b9a:	76 e0       	ldi	r23, 0x06	; 6
    2b9c:	89 e2       	ldi	r24, 0x29	; 41
    2b9e:	97 e4       	ldi	r25, 0x47	; 71
    2ba0:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:270
  delay(2000);
    2ba4:	60 ed       	ldi	r22, 0xD0	; 208
    2ba6:	77 e0       	ldi	r23, 0x07	; 7
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 82 06 	call	0xd04	; 0xd04 <delay>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:271
  lcd.clear();
    2bb0:	0e 94 f5 06 	call	0xdea	; 0xdea <hd44780::clear() [clone .constprop.25]>
operator*():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:43
  EERef(int index)
    : index(index)                 {}

  //Access/read members.
  uint8_t operator*() const            {
    return eeprom_read_byte((uint8_t *)index);
    2bb4:	8f e0       	ldi	r24, 0x0F	; 15
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
loadMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:414
  currentSettingLeft = 0;
  currentSettingRight = 0;
}

void loadMode() {
  if (EEPROM.read(0x0F) != 255) {
    2bbc:	8f 3f       	cpi	r24, 0xFF	; 255
    2bbe:	e9 f0       	breq	.+58     	; 0x2bfa <main+0x286>
operator*():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:43
    2bc0:	8f e0       	ldi	r24, 0x0F	; 15
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
loadMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:415
    currentMode = EEPROM.read(0x0F);
    2bc8:	80 93 19 44 	sts	0x4419, r24	; 0x804419 <currentMode>
    2bcc:	10 e0       	ldi	r17, 0x00	; 0
    2bce:	00 e0       	ldi	r16, 0x00	; 0
operator*():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:43
    2bd0:	c8 01       	movw	r24, r16
    2bd2:	40 96       	adiw	r24, 0x10	; 16
    2bd4:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
loadMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:417
    for (byte i = 0; i < 8; i++) {
      currentValueLeft[i] = EEPROM.read(0x10 + i);
    2bd8:	f8 01       	movw	r30, r16
    2bda:	ef 5e       	subi	r30, 0xEF	; 239
    2bdc:	fb 4b       	sbci	r31, 0xBB	; 187
    2bde:	80 83       	st	Z, r24
operator*():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:43
    2be0:	c8 01       	movw	r24, r16
    2be2:	48 96       	adiw	r24, 0x18	; 24
    2be4:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
loadMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:418
      currentValueRight[i] = EEPROM.read(0x18 + i);
    2be8:	f8 01       	movw	r30, r16
    2bea:	eb 5f       	subi	r30, 0xFB	; 251
    2bec:	fb 4b       	sbci	r31, 0xBB	; 187
    2bee:	80 83       	st	Z, r24
    2bf0:	0f 5f       	subi	r16, 0xFF	; 255
    2bf2:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:416
}

void loadMode() {
  if (EEPROM.read(0x0F) != 255) {
    currentMode = EEPROM.read(0x0F);
    for (byte i = 0; i < 8; i++) {
    2bf4:	08 30       	cpi	r16, 0x08	; 8
    2bf6:	11 05       	cpc	r17, r1
    2bf8:	59 f7       	brne	.-42     	; 0x2bd0 <main+0x25c>
map():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
#include "Common.h"

/* C++ prototypes */
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    2bfa:	21 2c       	mov	r2, r1
    2bfc:	31 2c       	mov	r3, r1
    2bfe:	21 01       	movw	r4, r2
    2c00:	2a 94       	dec	r2
processRFPacket():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:330
    currentValueRight[5] = recvMessage[14];
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(F("REMOTE OVERRIDE"));
    delay(1000);
    UIChanged = 7;
    2c02:	b7 e0       	ldi	r27, 0x07	; 7
    2c04:	cb 2e       	mov	r12, r27
advanceMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:339

void advanceMode() {
  if (currentMode >= maxMode) {
    setMode(0);
  } else {
    if (currentMode == 1) currentMode++;
    2c06:	12 e0       	ldi	r17, 0x02	; 2
    2c08:	71 2e       	mov	r7, r17
getFrameDelay():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:301
  if (currentMode == 1 || currentMode == 0) {
    return 80;
  } else if (currentMode == 3) {
    return 30 + 10 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
  }
  return 30 + 20 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
    2c0a:	04 e1       	ldi	r16, 0x14	; 20
    2c0c:	60 2e       	mov	r6, r16
handleReceive():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1089
  TCB3.EVCTRL = 0x51; //filter, falling edge, ICIE=1
  TCB3.CTRLA = 0x03; //enable
}

byte handleReceive() {
  if (gotMessage) {
    2c0e:	80 91 75 41 	lds	r24, 0x4175	; 0x804175 <gotMessage>
    2c12:	88 23       	and	r24, r24
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <main+0x2a4>
    2c16:	a3 c1       	rjmp	.+838    	; 0x2f5e <main+0x5ea>
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1136
}

byte checkCSC() {
  byte rxchecksum = 0;
  byte rxchecksum2 = 0;
  for (byte i = 0; i < pktLength >> 3; i++) {
    2c18:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1135
  return;
}

byte checkCSC() {
  byte rxchecksum = 0;
  byte rxchecksum2 = 0;
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1134
  TCB3.INTCTRL = 0x01;
  return;
}

byte checkCSC() {
  byte rxchecksum = 0;
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
checkCSC():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1136
  byte rxchecksum2 = 0;
  for (byte i = 0; i < pktLength >> 3; i++) {
    2c1e:	e4 2f       	mov	r30, r20
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <pktLength>
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	a3 e0       	ldi	r26, 0x03	; 3
    2c2a:	35 95       	asr	r19
    2c2c:	27 95       	ror	r18
    2c2e:	aa 95       	dec	r26
    2c30:	e1 f7       	brne	.-8      	; 0x2c2a <main+0x2b6>
    2c32:	e2 17       	cp	r30, r18
    2c34:	f3 07       	cpc	r31, r19
    2c36:	7c f4       	brge	.+30     	; 0x2c56 <main+0x2e2>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1137
    rxchecksum = rxchecksum ^ rxBuffer[i];
    2c38:	e3 5b       	subi	r30, 0xB3	; 179
    2c3a:	fe 4b       	sbci	r31, 0xBE	; 190
    2c3c:	20 81       	ld	r18, Z
    2c3e:	92 27       	eor	r25, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1138
    rxchecksum2 = _crc8_ccitt_update(rxchecksum2, rxBuffer[i]);
    2c40:	20 81       	ld	r18, Z
_crc8_ccitt_update():
c:\arduino-1.8.13\hardware\tools\avr\avr\include\util/crc16.h:399
        "    brcc   2f" "\n\t"
        "    eor    %0, %2" "\n\t"
        "2:  dec    %1" "\n\t"
        "    brne   1b" "\n\t"
        : "=r" (__crc), "=d" (__i), "=d" (__pattern)
        : "0" (__crc), "r" (__data));
    2c42:	82 27       	eor	r24, r18
    2c44:	28 e0       	ldi	r18, 0x08	; 8
    2c46:	37 e0       	ldi	r19, 0x07	; 7
    2c48:	88 0f       	add	r24, r24
    2c4a:	08 f4       	brcc	.+2      	; 0x2c4e <main+0x2da>
    2c4c:	83 27       	eor	r24, r19
    2c4e:	2a 95       	dec	r18
    2c50:	d9 f7       	brne	.-10     	; 0x2c48 <main+0x2d4>
checkCSC():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1136
}

byte checkCSC() {
  byte rxchecksum = 0;
  byte rxchecksum2 = 0;
  for (byte i = 0; i < pktLength >> 3; i++) {
    2c52:	4f 5f       	subi	r20, 0xFF	; 255
    2c54:	e4 cf       	rjmp	.-56     	; 0x2c1e <main+0x2aa>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1140
    rxchecksum = rxchecksum ^ rxBuffer[i];
    rxchecksum2 = _crc8_ccitt_update(rxchecksum2, rxBuffer[i]);
  }
  if (pktLength >> 3 == 3) {
    2c56:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <pktLength>
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	73 e0       	ldi	r23, 0x03	; 3
    2c5e:	35 95       	asr	r19
    2c60:	27 95       	ror	r18
    2c62:	7a 95       	dec	r23
    2c64:	e1 f7       	brne	.-8      	; 0x2c5e <main+0x2ea>
    2c66:	23 30       	cpi	r18, 0x03	; 3
    2c68:	31 05       	cpc	r19, r1
    2c6a:	91 f5       	brne	.+100    	; 0x2cd0 <main+0x35c>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1141
    rxchecksum = (rxchecksum & 0x0F) ^ (rxchecksum >> 4) ^ ((rxBuffer[3] & 0xF0) >> 4);
    2c6c:	20 91 50 41 	lds	r18, 0x4150	; 0x804150 <rxBuffer+0x3>
    2c70:	39 2f       	mov	r19, r25
    2c72:	3f 70       	andi	r19, 0x0F	; 15
    2c74:	22 95       	swap	r18
    2c76:	2f 70       	andi	r18, 0x0F	; 15
    2c78:	23 27       	eor	r18, r19
    2c7a:	92 95       	swap	r25
    2c7c:	9f 70       	andi	r25, 0x0F	; 15
    2c7e:	92 27       	eor	r25, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1142
    rxchecksum2 = (rxchecksum2 & 0x0F) ^ (rxchecksum2 >> 4) ^ ((rxBuffer[3] & 0xF0) >> 4);
    2c80:	20 91 50 41 	lds	r18, 0x4150	; 0x804150 <rxBuffer+0x3>
    2c84:	38 2f       	mov	r19, r24
    2c86:	3f 70       	andi	r19, 0x0F	; 15
    2c88:	22 95       	swap	r18
    2c8a:	2f 70       	andi	r18, 0x0F	; 15
    2c8c:	23 27       	eor	r18, r19
    2c8e:	82 95       	swap	r24
    2c90:	8f 70       	andi	r24, 0x0F	; 15
    2c92:	82 27       	eor	r24, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1143
    if (rxchecksum == rxchecksum2)rxchecksum2++;
    2c94:	98 13       	cpse	r25, r24
    2c96:	02 c0       	rjmp	.+4      	; 0x2c9c <main+0x328>
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	89 0f       	add	r24, r25
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1144
    return (rxBuffer[3] & 0x0F) == rxchecksum ? 1 : ((rxBuffer[3] & 0x0F) == rxchecksum2 ) ? 2 : 0;
    2c9c:	20 91 50 41 	lds	r18, 0x4150	; 0x804150 <rxBuffer+0x3>
    2ca0:	2f 70       	andi	r18, 0x0F	; 15
    2ca2:	92 17       	cp	r25, r18
    2ca4:	91 f1       	breq	.+100    	; 0x2d0a <main+0x396>
    2ca6:	90 91 50 41 	lds	r25, 0x4150	; 0x804150 <rxBuffer+0x3>
    2caa:	9f 70       	andi	r25, 0x0F	; 15
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1147
  } else {
    if (rxchecksum == rxchecksum2)rxchecksum2++;
    return ((rxBuffer[pktLength >> 3] == rxchecksum) ? 1 : ((rxBuffer[pktLength >> 3] == rxchecksum2 ) ? 2 : 0));
    2cac:	98 17       	cp	r25, r24
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1102
      return 0;
    }
    if (lastPacketSig == getPacketSig() && lastPacketTime) {

      lastPacketTime = millis();
      resetReceive();
    2cae:	69 f1       	breq	.+90     	; 0x2d0a <main+0x396>
handleReceive():
    2cb0:	c1 da       	rcall	.-2686   	; 0x2234 <resetReceive()>
loop():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:279

void loop() {
  byte rlen = handleReceive();
  if (rlen) {
    processRFPacket(rlen);
  } else if ((!receiving)  && (millis() - lastRFMsgAt > 100)) {
    2cb2:	80 91 22 44 	lds	r24, 0x4422	; 0x804422 <receiving>
    2cb6:	81 11       	cpse	r24, r1
    2cb8:	c1 c0       	rjmp	.+386    	; 0x2e3c <main+0x4c8>
    2cba:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    2cbe:	80 91 1e 44 	lds	r24, 0x441E	; 0x80441e <lastRFMsgAt>
    2cc2:	90 91 1f 44 	lds	r25, 0x441F	; 0x80441f <lastRFMsgAt+0x1>
    2cc6:	a0 91 20 44 	lds	r26, 0x4420	; 0x804420 <lastRFMsgAt+0x2>
    2cca:	b0 91 21 44 	lds	r27, 0x4421	; 0x804421 <lastRFMsgAt+0x3>
    2cce:	b6 c0       	rjmp	.+364    	; 0x2e3c <main+0x4c8>
checkCSC():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1146
    rxchecksum = (rxchecksum & 0x0F) ^ (rxchecksum >> 4) ^ ((rxBuffer[3] & 0xF0) >> 4);
    rxchecksum2 = (rxchecksum2 & 0x0F) ^ (rxchecksum2 >> 4) ^ ((rxBuffer[3] & 0xF0) >> 4);
    if (rxchecksum == rxchecksum2)rxchecksum2++;
    return (rxBuffer[3] & 0x0F) == rxchecksum ? 1 : ((rxBuffer[3] & 0x0F) == rxchecksum2 ) ? 2 : 0;
  } else {
    if (rxchecksum == rxchecksum2)rxchecksum2++;
    2cd0:	98 13       	cpse	r25, r24
    2cd2:	02 c0       	rjmp	.+4      	; 0x2cd8 <main+0x364>
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	89 0f       	add	r24, r25
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1147
    return ((rxBuffer[pktLength >> 3] == rxchecksum) ? 1 : ((rxBuffer[pktLength >> 3] == rxchecksum2 ) ? 2 : 0));
    2cd8:	e0 91 02 40 	lds	r30, 0x4002	; 0x804002 <pktLength>
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	63 e0       	ldi	r22, 0x03	; 3
    2ce0:	f5 95       	asr	r31
    2ce2:	e7 95       	ror	r30
    2ce4:	6a 95       	dec	r22
    2ce6:	e1 f7       	brne	.-8      	; 0x2ce0 <main+0x36c>
    2ce8:	e3 5b       	subi	r30, 0xB3	; 179
    2cea:	fe 4b       	sbci	r31, 0xBE	; 190
    2cec:	20 81       	ld	r18, Z
    2cee:	92 17       	cp	r25, r18
    2cf0:	61 f0       	breq	.+24     	; 0x2d0a <main+0x396>
    2cf2:	e0 91 02 40 	lds	r30, 0x4002	; 0x804002 <pktLength>
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	53 e0       	ldi	r21, 0x03	; 3
    2cfa:	f5 95       	asr	r31
    2cfc:	e7 95       	ror	r30
    2cfe:	5a 95       	dec	r21
    2d00:	e1 f7       	brne	.-8      	; 0x2cfa <main+0x386>
    2d02:	e3 5b       	subi	r30, 0xB3	; 179
    2d04:	fe 4b       	sbci	r31, 0xBE	; 190
    2d06:	90 81       	ld	r25, Z
    2d08:	d1 cf       	rjmp	.-94     	; 0x2cac <main+0x338>
isForMe():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1152
  }
}

byte isForMe() {
  if ((rxBuffer[0] & 0x3F) == MyAddress || MyAddress == 0 || (rxBuffer[0] & 0x3F) == 0) {
    2d0a:	80 91 4d 41 	lds	r24, 0x414D	; 0x80414d <rxBuffer>
handleReceive():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1099
    }
    if (!isForMe()) { //matches on MyAddress==0, destination address==0, destination address==MyAddress.
      resetReceive();
      return 0;
    }
    if (lastPacketSig == getPacketSig() && lastPacketTime) {
    2d0e:	0e 94 71 07 	call	0xee2	; 0xee2 <getPacketSig()>
    2d12:	00 91 6d 41 	lds	r16, 0x416D	; 0x80416d <lastPacketSig>
    2d16:	10 91 6e 41 	lds	r17, 0x416E	; 0x80416e <lastPacketSig+0x1>
    2d1a:	20 91 6f 41 	lds	r18, 0x416F	; 0x80416f <lastPacketSig+0x2>
    2d1e:	30 91 70 41 	lds	r19, 0x4170	; 0x804170 <lastPacketSig+0x3>
    2d22:	60 17       	cp	r22, r16
    2d24:	71 07       	cpc	r23, r17
    2d26:	82 07       	cpc	r24, r18
    2d28:	93 07       	cpc	r25, r19
    2d2a:	b9 f4       	brne	.+46     	; 0x2d5a <main+0x3e6>
    2d2c:	80 91 71 41 	lds	r24, 0x4171	; 0x804171 <lastPacketTime>
    2d30:	90 91 72 41 	lds	r25, 0x4172	; 0x804172 <lastPacketTime+0x1>
    2d34:	a0 91 73 41 	lds	r26, 0x4173	; 0x804173 <lastPacketTime+0x2>
    2d38:	b0 91 74 41 	lds	r27, 0x4174	; 0x804174 <lastPacketTime+0x3>
    2d3c:	89 2b       	or	r24, r25
    2d3e:	8a 2b       	or	r24, r26
    2d40:	8b 2b       	or	r24, r27
    2d42:	59 f0       	breq	.+22     	; 0x2d5a <main+0x3e6>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1101

      lastPacketTime = millis();
    2d44:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    2d48:	60 93 71 41 	sts	0x4171, r22	; 0x804171 <lastPacketTime>
    2d4c:	70 93 72 41 	sts	0x4172, r23	; 0x804172 <lastPacketTime+0x1>
    2d50:	80 93 73 41 	sts	0x4173, r24	; 0x804173 <lastPacketTime+0x2>
    2d54:	90 93 74 41 	sts	0x4174, r25	; 0x804174 <lastPacketTime+0x3>
    2d58:	ab cf       	rjmp	.-170    	; 0x2cb0 <main+0x33c>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1105
      resetReceive();
      return 0;
    }
    lastPacketSig = getPacketSig();
    2d5a:	0e 94 71 07 	call	0xee2	; 0xee2 <getPacketSig()>
    2d5e:	60 93 6d 41 	sts	0x416D, r22	; 0x80416d <lastPacketSig>
    2d62:	70 93 6e 41 	sts	0x416E, r23	; 0x80416e <lastPacketSig+0x1>
    2d66:	80 93 6f 41 	sts	0x416F, r24	; 0x80416f <lastPacketSig+0x2>
    2d6a:	90 93 70 41 	sts	0x4170, r25	; 0x804170 <lastPacketSig+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1106
    lastPacketTime = millis();
    2d6e:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    2d72:	60 93 71 41 	sts	0x4171, r22	; 0x804171 <lastPacketTime>
    2d76:	70 93 72 41 	sts	0x4172, r23	; 0x804172 <lastPacketTime+0x1>
    2d7a:	80 93 73 41 	sts	0x4173, r24	; 0x804173 <lastPacketTime+0x2>
    2d7e:	90 93 74 41 	sts	0x4174, r25	; 0x804174 <lastPacketTime+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1107
    byte rlen = ((pktLength >> 3) + 1) | ((vers - 1) << 6);
    2d82:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <pktLength>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1109

    memcpy((void*)recvMessage, (const void*)rxBuffer, 32); //copy received message - safe because we haven't called resetReceive, so IC int is off.
    2d86:	80 e2       	ldi	r24, 0x20	; 32
    2d88:	ed e4       	ldi	r30, 0x4D	; 77
    2d8a:	f1 e4       	ldi	r31, 0x41	; 65
    2d8c:	a6 e7       	ldi	r26, 0x76	; 118
    2d8e:	b1 e4       	ldi	r27, 0x41	; 65
    2d90:	01 90       	ld	r0, Z+
    2d92:	0d 92       	st	X+, r0
    2d94:	8a 95       	dec	r24
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1110
    resetReceive();
    2d96:	e1 f7       	brne	.-8      	; 0x2d90 <main+0x41c>
    2d98:	4d da       	rcall	.-2918   	; 0x2234 <resetReceive()>
processRFPacket():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:309

void processRFPacket(byte rlen) {

  byte vers = (rlen & 196) >> 6;
  rlen &= 0x3F;
  if (recvMessage[1] == 0x54) {
    2d9a:	80 91 77 41 	lds	r24, 0x4177	; 0x804177 <recvMessage+0x1>
    2d9e:	84 35       	cpi	r24, 0x54	; 84
    2da0:	09 f0       	breq	.+2      	; 0x2da4 <main+0x430>
    2da2:	4c c0       	rjmp	.+152    	; 0x2e3c <main+0x4c8>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:310
    if (recvMessage[2] > maxMode) {
    2da4:	80 91 78 41 	lds	r24, 0x4178	; 0x804178 <recvMessage+0x2>
    2da8:	8b 30       	cpi	r24, 0x0B	; 11
    2daa:	08 f0       	brcs	.+2      	; 0x2dae <main+0x43a>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:313
      return;
    }
    setMode(recvMessage[2]);
    2dac:	47 c0       	rjmp	.+142    	; 0x2e3c <main+0x4c8>
    2dae:	5f da       	rcall	.-2882   	; 0x226e <setMode(unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:314
    currentValueLeft[0] = recvMessage[3];
    2db0:	80 91 79 41 	lds	r24, 0x4179	; 0x804179 <recvMessage+0x3>
    2db4:	80 93 11 44 	sts	0x4411, r24	; 0x804411 <currentValueLeft>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:315
    currentValueLeft[1] = recvMessage[4];
    2db8:	80 91 7a 41 	lds	r24, 0x417A	; 0x80417a <recvMessage+0x4>
    2dbc:	80 93 12 44 	sts	0x4412, r24	; 0x804412 <currentValueLeft+0x1>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:316
    currentValueLeft[2] = recvMessage[5];
    2dc0:	80 91 7b 41 	lds	r24, 0x417B	; 0x80417b <recvMessage+0x5>
    2dc4:	80 93 13 44 	sts	0x4413, r24	; 0x804413 <currentValueLeft+0x2>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:317
    currentValueLeft[3] = recvMessage[6];
    2dc8:	80 91 7c 41 	lds	r24, 0x417C	; 0x80417c <recvMessage+0x6>
    2dcc:	80 93 14 44 	sts	0x4414, r24	; 0x804414 <currentValueLeft+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:318
    currentValueLeft[4] = recvMessage[7];
    2dd0:	80 91 7d 41 	lds	r24, 0x417D	; 0x80417d <recvMessage+0x7>
    2dd4:	80 93 15 44 	sts	0x4415, r24	; 0x804415 <currentValueLeft+0x4>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:319
    currentValueLeft[5] = recvMessage[8];
    2dd8:	80 91 7e 41 	lds	r24, 0x417E	; 0x80417e <recvMessage+0x8>
    2ddc:	80 93 16 44 	sts	0x4416, r24	; 0x804416 <currentValueLeft+0x5>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:320
    currentValueRight[0] = recvMessage[9];
    2de0:	80 91 7f 41 	lds	r24, 0x417F	; 0x80417f <recvMessage+0x9>
    2de4:	80 93 05 44 	sts	0x4405, r24	; 0x804405 <currentValueRight>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:321
    currentValueRight[1] = recvMessage[10];
    2de8:	80 91 80 41 	lds	r24, 0x4180	; 0x804180 <recvMessage+0xa>
    2dec:	80 93 06 44 	sts	0x4406, r24	; 0x804406 <currentValueRight+0x1>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:322
    currentValueRight[2] = recvMessage[11];
    2df0:	80 91 81 41 	lds	r24, 0x4181	; 0x804181 <recvMessage+0xb>
    2df4:	80 93 07 44 	sts	0x4407, r24	; 0x804407 <currentValueRight+0x2>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:323
    currentValueRight[3] = recvMessage[12];
    2df8:	80 91 82 41 	lds	r24, 0x4182	; 0x804182 <recvMessage+0xc>
    2dfc:	80 93 08 44 	sts	0x4408, r24	; 0x804408 <currentValueRight+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:324
    currentValueRight[4] = recvMessage[13];
    2e00:	80 91 83 41 	lds	r24, 0x4183	; 0x804183 <recvMessage+0xd>
    2e04:	80 93 09 44 	sts	0x4409, r24	; 0x804409 <currentValueRight+0x4>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:325
    currentValueRight[5] = recvMessage[14];
    2e08:	80 91 84 41 	lds	r24, 0x4184	; 0x804184 <recvMessage+0xe>
    2e0c:	80 93 0a 44 	sts	0x440A, r24	; 0x80440a <currentValueRight+0x5>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:326
    lcd.clear();
    2e10:	0e 94 f5 06 	call	0xdea	; 0xdea <hd44780::clear() [clone .constprop.25]>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:327
    lcd.setCursor(0, 0);
    2e14:	40 e0       	ldi	r20, 0x00	; 0
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	89 e2       	ldi	r24, 0x29	; 41
    2e1a:	97 e4       	ldi	r25, 0x47	; 71
    2e1c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:328
    lcd.print(F("REMOTE OVERRIDE"));
    2e20:	65 ec       	ldi	r22, 0xC5	; 197
    2e22:	76 e0       	ldi	r23, 0x06	; 6
    2e24:	89 e2       	ldi	r24, 0x29	; 41
    2e26:	97 e4       	ldi	r25, 0x47	; 71
    2e28:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:329
    delay(1000);
    2e2c:	68 ee       	ldi	r22, 0xE8	; 232
    2e2e:	73 e0       	ldi	r23, 0x03	; 3
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	0e 94 82 06 	call	0xd04	; 0xd04 <delay>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:330
    UIChanged = 7;
    2e38:	c0 92 06 40 	sts	0x4006, r12	; 0x804006 <UIChanged>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:428
void handleUI() {
  static byte lastBtnState = 7;
  static byte lastBtnBounceState = 7;
  static unsigned long lastBtnAt = 0;
  static unsigned long lastPressAt = 0;
  byte btnRead = BTN_PORT_READ();
    2e3c:	06 b1       	in	r16, 0x06	; 6
    2e3e:	10 e0       	ldi	r17, 0x00	; 0
    2e40:	43 e0       	ldi	r20, 0x03	; 3
    2e42:	15 95       	asr	r17
    2e44:	07 95       	ror	r16
    2e46:	4a 95       	dec	r20
    2e48:	e1 f7       	brne	.-8      	; 0x2e42 <main+0x4ce>
    2e4a:	20 2f       	mov	r18, r16
    2e4c:	27 70       	andi	r18, 0x07	; 7
    2e4e:	d2 2e       	mov	r13, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:429
  if (!(btnRead == lastBtnBounceState)) { //debounce all buttons at once.
    2e50:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <handleUI()::lastBtnBounceState>
    2e54:	28 17       	cp	r18, r24
    2e56:	09 f4       	brne	.+2      	; 0x2e5a <main+0x4e6>
    2e58:	ad c0       	rjmp	.+346    	; 0x2fb4 <main+0x640>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:430
    lastBtnBounceState = btnRead;
    2e5a:	20 93 04 40 	sts	0x4004, r18	; 0x804004 <handleUI()::lastBtnBounceState>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:431
    lastBtnAt = millis();
    2e5e:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    2e62:	60 93 9a 41 	sts	0x419A, r22	; 0x80419a <handleUI()::lastBtnAt>
    2e66:	70 93 9b 41 	sts	0x419B, r23	; 0x80419b <handleUI()::lastBtnAt+0x1>
    2e6a:	80 93 9c 41 	sts	0x419C, r24	; 0x80419c <handleUI()::lastBtnAt+0x2>
    2e6e:	90 93 9d 41 	sts	0x419D, r25	; 0x80419d <handleUI()::lastBtnAt+0x3>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:507
void handleLCD() {
  static byte drift2_colors = 255;
  static unsigned long lastInputAt;
  static byte attractmode = 0;
  byte uichg = 0;
  if (millis() - lastRFUpdateAt < 5000 && lastRFUpdateAt) {
    2e72:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    2e76:	00 91 a5 41 	lds	r16, 0x41A5	; 0x8041a5 <lastRFUpdateAt>
    2e7a:	10 91 a6 41 	lds	r17, 0x41A6	; 0x8041a6 <lastRFUpdateAt+0x1>
    2e7e:	20 91 a7 41 	lds	r18, 0x41A7	; 0x8041a7 <lastRFUpdateAt+0x2>
    2e82:	30 91 a8 41 	lds	r19, 0x41A8	; 0x8041a8 <lastRFUpdateAt+0x3>
    2e86:	60 1b       	sub	r22, r16
    2e88:	71 0b       	sbc	r23, r17
    2e8a:	82 0b       	sbc	r24, r18
    2e8c:	93 0b       	sbc	r25, r19
    2e8e:	68 38       	cpi	r22, 0x88	; 136
    2e90:	73 41       	sbci	r23, 0x13	; 19
    2e92:	81 05       	cpc	r24, r1
    2e94:	91 05       	cpc	r25, r1
    2e96:	68 f4       	brcc	.+26     	; 0x2eb2 <main+0x53e>
    2e98:	80 91 a5 41 	lds	r24, 0x41A5	; 0x8041a5 <lastRFUpdateAt>
    2e9c:	90 91 a6 41 	lds	r25, 0x41A6	; 0x8041a6 <lastRFUpdateAt+0x1>
    2ea0:	a0 91 a7 41 	lds	r26, 0x41A7	; 0x8041a7 <lastRFUpdateAt+0x2>
    2ea4:	b0 91 a8 41 	lds	r27, 0x41A8	; 0x8041a8 <lastRFUpdateAt+0x3>
    2ea8:	89 2b       	or	r24, r25
    2eaa:	8a 2b       	or	r24, r26
    2eac:	8b 2b       	or	r24, r27
    2eae:	09 f0       	breq	.+2      	; 0x2eb2 <main+0x53e>
    2eb0:	81 c1       	rjmp	.+770    	; 0x31b4 <main+0x840>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:510
    return;
  }
  cli();
    2eb2:	f8 94       	cli
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:511
  uichg = UIChanged;
    2eb4:	10 91 06 40 	lds	r17, 0x4006	; 0x804006 <UIChanged>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:512
  UIChanged = 0;
    2eb8:	10 92 06 40 	sts	0x4006, r1	; 0x804006 <UIChanged>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:513
  sei();
    2ebc:	78 94       	sei
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:514
  if (uichg == 0) {
    2ebe:	11 11       	cpse	r17, r1
    2ec0:	9e c2       	rjmp	.+1340   	; 0x33fe <nextbyte20+0xc6>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:515
    if (millis() - lastInputAt > 60000) {
    2ec2:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    2ec6:	80 90 a1 41 	lds	r8, 0x41A1	; 0x8041a1 <handleLCD()::lastInputAt>
    2eca:	90 90 a2 41 	lds	r9, 0x41A2	; 0x8041a2 <handleLCD()::lastInputAt+0x1>
    2ece:	a0 90 a3 41 	lds	r10, 0x41A3	; 0x8041a3 <handleLCD()::lastInputAt+0x2>
    2ed2:	b0 90 a4 41 	lds	r11, 0x41A4	; 0x8041a4 <handleLCD()::lastInputAt+0x3>
    2ed6:	68 19       	sub	r22, r8
    2ed8:	79 09       	sbc	r23, r9
    2eda:	8a 09       	sbc	r24, r10
    2edc:	9b 09       	sbc	r25, r11
    2ede:	61 36       	cpi	r22, 0x61	; 97
    2ee0:	7a 4e       	sbci	r23, 0xEA	; 234
    2ee2:	81 05       	cpc	r24, r1
    2ee4:	91 05       	cpc	r25, r1
    2ee6:	08 f4       	brcc	.+2      	; 0x2eea <main+0x576>
    2ee8:	65 c1       	rjmp	.+714    	; 0x31b4 <main+0x840>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:516
      if (!attractmode || (millis() - lastInputAt > 120000)) {
    2eea:	80 91 a0 41 	lds	r24, 0x41A0	; 0x8041a0 <handleLCD()::attractmode>
    2eee:	81 11       	cpse	r24, r1
    2ef0:	55 c1       	rjmp	.+682    	; 0x319c <main+0x828>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:517
        attractmode = 1;
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	80 93 a0 41 	sts	0x41A0, r24	; 0x8041a0 <handleLCD()::attractmode>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:518
        lastInputAt = millis() - 60000;
    2ef8:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    2efc:	60 56       	subi	r22, 0x60	; 96
    2efe:	7a 4e       	sbci	r23, 0xEA	; 234
    2f00:	81 09       	sbc	r24, r1
    2f02:	91 09       	sbc	r25, r1
    2f04:	60 93 a1 41 	sts	0x41A1, r22	; 0x8041a1 <handleLCD()::lastInputAt>
    2f08:	70 93 a2 41 	sts	0x41A2, r23	; 0x8041a2 <handleLCD()::lastInputAt+0x1>
    2f0c:	80 93 a3 41 	sts	0x41A3, r24	; 0x8041a3 <handleLCD()::lastInputAt+0x2>
    2f10:	90 93 a4 41 	sts	0x41A4, r25	; 0x8041a4 <handleLCD()::lastInputAt+0x3>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:589
    }
  }
  attractmode = 0;
}
void doAttractLCD() {
  lcd.clear();
    2f14:	0e 94 f5 06 	call	0xdea	; 0xdea <hd44780::clear() [clone .constprop.25]>
random():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    2f18:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <random>
    2f1c:	23 e0       	ldi	r18, 0x03	; 3
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e0       	ldi	r20, 0x00	; 0
    2f22:	50 e0       	ldi	r21, 0x00	; 0
    2f24:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodsi4>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:591
  byte s = random(0, 3);
  if (!s) {
    2f28:	61 11       	cpse	r22, r1
    2f2a:	25 c2       	rjmp	.+1098   	; 0x3376 <nextbyte20+0x3e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:592
    lcd.setCursor(0, 0);
    2f2c:	40 e0       	ldi	r20, 0x00	; 0
    2f2e:	60 e0       	ldi	r22, 0x00	; 0
    2f30:	89 e2       	ldi	r24, 0x29	; 41
    2f32:	97 e4       	ldi	r25, 0x47	; 71
    2f34:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:593
    lcd.print(F("TRICK OR TREAT!"));
    2f38:	63 e6       	ldi	r22, 0x63	; 99
    2f3a:	77 e0       	ldi	r23, 0x07	; 7
    2f3c:	89 e2       	ldi	r24, 0x29	; 41
    2f3e:	97 e4       	ldi	r25, 0x47	; 71
    2f40:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:594
    lcd.setCursor(0, 1);
    2f44:	41 e0       	ldi	r20, 0x01	; 1
    2f46:	60 e0       	ldi	r22, 0x00	; 0
    2f48:	89 e2       	ldi	r24, 0x29	; 41
    2f4a:	97 e4       	ldi	r25, 0x47	; 71
    2f4c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:595
    lcd.print(F("Let's get weird!"));
    2f50:	62 e5       	ldi	r22, 0x52	; 82
    2f52:	77 e0       	ldi	r23, 0x07	; 7
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:608
    lcd.setCursor(2, 0);
    lcd.print(F("PLAY WITH ME"));
    lcd.setCursor(0, 1);
    byte r = random(0, 2);
    if (r == 0) {
      lcd.print(F("USE KNOBS&BUTTON"));
    2f54:	89 e2       	ldi	r24, 0x29	; 41
    2f56:	97 e4       	ldi	r25, 0x47	; 71
    2f58:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
    2f5c:	2b c1       	rjmp	.+598    	; 0x31b4 <main+0x840>
handleReceive():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1113

    memcpy((void*)recvMessage, (const void*)rxBuffer, 32); //copy received message - safe because we haven't called resetReceive, so IC int is off.
    resetReceive();
    return rlen;
  } else {
    unsigned long t = (millis() - lastPacketTime);
    2f5e:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    2f62:	00 91 71 41 	lds	r16, 0x4171	; 0x804171 <lastPacketTime>
    2f66:	10 91 72 41 	lds	r17, 0x4172	; 0x804172 <lastPacketTime+0x1>
    2f6a:	20 91 73 41 	lds	r18, 0x4173	; 0x804173 <lastPacketTime+0x2>
    2f6e:	30 91 74 41 	lds	r19, 0x4174	; 0x804174 <lastPacketTime+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1114
    if (lastPacketTime && (t > commandForgetTime)) {
    2f72:	01 15       	cp	r16, r1
    2f74:	11 05       	cpc	r17, r1
    2f76:	21 05       	cpc	r18, r1
    2f78:	31 05       	cpc	r19, r1
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <main+0x60a>
    2f7c:	9a ce       	rjmp	.-716    	; 0x2cb2 <main+0x33e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1113

    memcpy((void*)recvMessage, (const void*)rxBuffer, 32); //copy received message - safe because we haven't called resetReceive, so IC int is off.
    resetReceive();
    return rlen;
  } else {
    unsigned long t = (millis() - lastPacketTime);
    2f7e:	60 1b       	sub	r22, r16
    2f80:	71 0b       	sbc	r23, r17
    2f82:	82 0b       	sbc	r24, r18
    2f84:	93 0b       	sbc	r25, r19
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1114
    if (lastPacketTime && (t > commandForgetTime)) {
    2f86:	69 38       	cpi	r22, 0x89	; 137
    2f88:	73 41       	sbci	r23, 0x13	; 19
    2f8a:	81 05       	cpc	r24, r1
    2f8c:	91 05       	cpc	r25, r1
    2f8e:	08 f4       	brcc	.+2      	; 0x2f92 <main+0x61e>
    2f90:	90 ce       	rjmp	.-736    	; 0x2cb2 <main+0x33e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1115
      lastPacketTime = 0;
    2f92:	10 92 71 41 	sts	0x4171, r1	; 0x804171 <lastPacketTime>
    2f96:	10 92 72 41 	sts	0x4172, r1	; 0x804172 <lastPacketTime+0x1>
    2f9a:	10 92 73 41 	sts	0x4173, r1	; 0x804173 <lastPacketTime+0x2>
    2f9e:	10 92 74 41 	sts	0x4174, r1	; 0x804174 <lastPacketTime+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:1116
      lastPacketSig = 0;
    2fa2:	10 92 6d 41 	sts	0x416D, r1	; 0x80416d <lastPacketSig>
    2fa6:	10 92 6e 41 	sts	0x416E, r1	; 0x80416e <lastPacketSig+0x1>
    2faa:	10 92 6f 41 	sts	0x416F, r1	; 0x80416f <lastPacketSig+0x2>
    2fae:	10 92 70 41 	sts	0x4170, r1	; 0x804170 <lastPacketSig+0x3>
    2fb2:	7f ce       	rjmp	.-770    	; 0x2cb2 <main+0x33e>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:433
  byte btnRead = BTN_PORT_READ();
  if (!(btnRead == lastBtnBounceState)) { //debounce all buttons at once.
    lastBtnBounceState = btnRead;
    lastBtnAt = millis();
  } else {
    if (millis() - lastBtnAt > 50) { //has been stable for 50ms
    2fb4:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    2fb8:	80 90 9a 41 	lds	r8, 0x419A	; 0x80419a <handleUI()::lastBtnAt>
    2fbc:	90 90 9b 41 	lds	r9, 0x419B	; 0x80419b <handleUI()::lastBtnAt+0x1>
    2fc0:	a0 90 9c 41 	lds	r10, 0x419C	; 0x80419c <handleUI()::lastBtnAt+0x2>
    2fc4:	b0 90 9d 41 	lds	r11, 0x419D	; 0x80419d <handleUI()::lastBtnAt+0x3>
    2fc8:	68 19       	sub	r22, r8
    2fca:	79 09       	sbc	r23, r9
    2fcc:	8a 09       	sbc	r24, r10
    2fce:	9b 09       	sbc	r25, r11
    2fd0:	63 33       	cpi	r22, 0x33	; 51
    2fd2:	71 05       	cpc	r23, r1
    2fd4:	81 05       	cpc	r24, r1
    2fd6:	91 05       	cpc	r25, r1
    2fd8:	08 f4       	brcc	.+2      	; 0x2fdc <main+0x668>
    2fda:	4b cf       	rjmp	.-362    	; 0x2e72 <main+0x4fe>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:434
      if (btnRead < lastBtnState ) {
    2fdc:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <handleUI()::lastBtnState>
    2fe0:	d8 16       	cp	r13, r24
    2fe2:	d8 f4       	brcc	.+54     	; 0x301a <main+0x6a6>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:435
        if (!lastPressAt && !(btnRead & 1)) {
    2fe4:	80 91 96 41 	lds	r24, 0x4196	; 0x804196 <handleUI()::lastPressAt>
    2fe8:	90 91 97 41 	lds	r25, 0x4197	; 0x804197 <handleUI()::lastPressAt+0x1>
    2fec:	a0 91 98 41 	lds	r26, 0x4198	; 0x804198 <handleUI()::lastPressAt+0x2>
    2ff0:	b0 91 99 41 	lds	r27, 0x4199	; 0x804199 <handleUI()::lastPressAt+0x3>
    2ff4:	89 2b       	or	r24, r25
    2ff6:	8a 2b       	or	r24, r26
    2ff8:	8b 2b       	or	r24, r27
    2ffa:	61 f4       	brne	.+24     	; 0x3014 <main+0x6a0>
    2ffc:	00 fd       	sbrc	r16, 0
    2ffe:	0a c0       	rjmp	.+20     	; 0x3014 <main+0x6a0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:436
          lastPressAt = millis();
    3000:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    3004:	60 93 96 41 	sts	0x4196, r22	; 0x804196 <handleUI()::lastPressAt>
    3008:	70 93 97 41 	sts	0x4197, r23	; 0x804197 <handleUI()::lastPressAt+0x1>
    300c:	80 93 98 41 	sts	0x4198, r24	; 0x804198 <handleUI()::lastPressAt+0x2>
    3010:	90 93 99 41 	sts	0x4199, r25	; 0x804199 <handleUI()::lastPressAt+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:489
            currentSettingRight++;
          }
          UIChanged |= 2;
        }
      }
      lastBtnState = btnRead;
    3014:	d0 92 03 40 	sts	0x4003, r13	; 0x804003 <handleUI()::lastBtnState>
    3018:	2c cf       	rjmp	.-424    	; 0x2e72 <main+0x4fe>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:440
        if (!lastPressAt && !(btnRead & 1)) {
          lastPressAt = millis();
        }
        //do nothing - was button being pressed
      } else {
        if (((btnRead & 1)) && !(lastBtnState & 1)) {
    301a:	00 ff       	sbrs	r16, 0
    301c:	78 c0       	rjmp	.+240    	; 0x310e <main+0x79a>
    301e:	80 fd       	sbrc	r24, 0
    3020:	76 c0       	rjmp	.+236    	; 0x310e <main+0x79a>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:441
          if (lastPressAt && millis() - lastPressAt > 10000) {
    3022:	80 90 96 41 	lds	r8, 0x4196	; 0x804196 <handleUI()::lastPressAt>
    3026:	90 90 97 41 	lds	r9, 0x4197	; 0x804197 <handleUI()::lastPressAt+0x1>
    302a:	a0 90 98 41 	lds	r10, 0x4198	; 0x804198 <handleUI()::lastPressAt+0x2>
    302e:	b0 90 99 41 	lds	r11, 0x4199	; 0x804199 <handleUI()::lastPressAt+0x3>
    3032:	81 14       	cp	r8, r1
    3034:	91 04       	cpc	r9, r1
    3036:	a1 04       	cpc	r10, r1
    3038:	b1 04       	cpc	r11, r1
    303a:	09 f4       	brne	.+2      	; 0x303e <main+0x6ca>
    303c:	54 c0       	rjmp	.+168    	; 0x30e6 <main+0x772>
    303e:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    3042:	68 19       	sub	r22, r8
    3044:	79 09       	sbc	r23, r9
    3046:	8a 09       	sbc	r24, r10
    3048:	9b 09       	sbc	r25, r11
    304a:	61 31       	cpi	r22, 0x11	; 17
    304c:	77 42       	sbci	r23, 0x27	; 39
    304e:	81 05       	cpc	r24, r1
    3050:	91 05       	cpc	r25, r1
    3052:	08 f4       	brcc	.+2      	; 0x3056 <main+0x6e2>
    3054:	ee c6       	rjmp	.+3548   	; 0x3e32 <nextbyte20+0xafa>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:443

            lcd.clear();
    3056:	0e 94 f5 06 	call	0xdea	; 0xdea <hd44780::clear() [clone .constprop.25]>
    305a:	3f e0       	ldi	r19, 0x0F	; 15
    305c:	e3 2e       	mov	r14, r19
    305e:	f1 2c       	mov	r15, r1
_ZN5EERefC2Ei():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef {

  EERef(int index)
    : index(index)                 {}
    3060:	eb 82       	std	Y+3, r14	; 0x03
    3062:	fc 82       	std	Y+4, r15	; 0x04
_ZN11EEPROMClass5writeEih.isra.5():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:208
  }
  uint8_t read(int idx)              {
    return EERef(idx);
  }
  void write(int idx, uint8_t val)   {
    (EERef(idx)) = val;
    3064:	6f ef       	ldi	r22, 0xFF	; 255
    3066:	ce 01       	movw	r24, r28
    3068:	03 96       	adiw	r24, 0x03	; 3
    306a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <EERef::operator=(unsigned char)>
    306e:	4f ef       	ldi	r20, 0xFF	; 255
    3070:	e4 1a       	sub	r14, r20
    3072:	f4 0a       	sbc	r15, r20
clearMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:401
  }

}

void clearMode() {
  for (byte i = 0x0F; i < 0x20; i++) {
    3074:	50 e2       	ldi	r21, 0x20	; 32
    3076:	e5 16       	cp	r14, r21
    3078:	f1 04       	cpc	r15, r1
    307a:	91 f7       	brne	.-28     	; 0x3060 <main+0x6ec>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:404
    EEPROM.write(i, 255);
  }
  currentMode = 0;
    307c:	10 92 19 44 	sts	0x4419, r1	; 0x804419 <currentMode>
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:406
  for (byte i = 0; i < 8; i++) {
    currentValueLeft[i] = 0;
    3084:	fc 01       	movw	r30, r24
    3086:	ef 5e       	subi	r30, 0xEF	; 239
    3088:	fb 4b       	sbci	r31, 0xBB	; 187
    308a:	10 82       	st	Z, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:407
    currentValueRight[i] = 0;
    308c:	fc 01       	movw	r30, r24
    308e:	eb 5f       	subi	r30, 0xFB	; 251
    3090:	fb 4b       	sbci	r31, 0xBB	; 187
    3092:	10 82       	st	Z, r1
    3094:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:405
void clearMode() {
  for (byte i = 0x0F; i < 0x20; i++) {
    EEPROM.write(i, 255);
  }
  currentMode = 0;
  for (byte i = 0; i < 8; i++) {
    3096:	88 30       	cpi	r24, 0x08	; 8
    3098:	91 05       	cpc	r25, r1
    309a:	a1 f7       	brne	.-24     	; 0x3084 <main+0x710>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:409
    currentValueLeft[i] = 0;
    currentValueRight[i] = 0;
  }
  currentSettingLeft = 0;
    309c:	10 92 9f 41 	sts	0x419F, r1	; 0x80419f <currentSettingLeft>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:410
  currentSettingRight = 0;
    30a0:	10 92 9e 41 	sts	0x419E, r1	; 0x80419e <currentSettingRight>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:445
        if (((btnRead & 1)) && !(lastBtnState & 1)) {
          if (lastPressAt && millis() - lastPressAt > 10000) {

            lcd.clear();
            clearMode();
            lcd.setCursor(3, 0);
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	63 e0       	ldi	r22, 0x03	; 3
    30a8:	89 e2       	ldi	r24, 0x29	; 41
    30aa:	97 e4       	ldi	r25, 0x47	; 71
    30ac:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:446
            lcd.print(F("Saved mode"));
    30b0:	68 ee       	ldi	r22, 0xE8	; 232
    30b2:	76 e0       	ldi	r23, 0x06	; 6
    30b4:	89 e2       	ldi	r24, 0x29	; 41
    30b6:	97 e4       	ldi	r25, 0x47	; 71
    30b8:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:447
            lcd.setCursor(5, 1);
    30bc:	41 e0       	ldi	r20, 0x01	; 1
    30be:	65 e0       	ldi	r22, 0x05	; 5
    30c0:	89 e2       	ldi	r24, 0x29	; 41
    30c2:	97 e4       	ldi	r25, 0x47	; 71
    30c4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:448
            lcd.print(F("cleared"));
    30c8:	60 ee       	ldi	r22, 0xE0	; 224
    30ca:	76 e0       	ldi	r23, 0x06	; 6
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:455
            UIChanged = 7;
          } else if (lastPressAt && millis() - lastPressAt > 3000) {
            saveMode();
            lcd.clear();
            lcd.setCursor(3, 0);
            lcd.print(F("Mode Saved"));
    30cc:	89 e2       	ldi	r24, 0x29	; 41
    30ce:	97 e4       	ldi	r25, 0x47	; 71
    30d0:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:456
            delay(1000);
    30d4:	68 ee       	ldi	r22, 0xE8	; 232
    30d6:	73 e0       	ldi	r23, 0x03	; 3
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	0e 94 82 06 	call	0xd04	; 0xd04 <delay>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:457
            UIChanged = 7;
    30e0:	c0 92 06 40 	sts	0x4006, r12	; 0x804006 <UIChanged>
    30e4:	0c c0       	rjmp	.+24     	; 0x30fe <main+0x78a>
advanceMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:336
  }
}


void advanceMode() {
  if (currentMode >= maxMode) {
    30e6:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    30ea:	8a 30       	cpi	r24, 0x0A	; 10
    30ec:	08 f4       	brcc	.+2      	; 0x30f0 <main+0x77c>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:337
    setMode(0);
    30ee:	42 c0       	rjmp	.+132    	; 0x3174 <main+0x800>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:340
  } else {
    if (currentMode == 1) currentMode++;
    setMode(currentMode + 1);
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	bd d8       	rcall	.-3718   	; 0x226e <setMode(unsigned char)>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:460
            lcd.print(F("Mode Saved"));
            delay(1000);
            UIChanged = 7;
          } else {
            advanceMode();
            UIChanged |= 4;
    30f4:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    30f8:	84 60       	ori	r24, 0x04	; 4
    30fa:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:462
          }
          lastPressAt = 0;
    30fe:	10 92 96 41 	sts	0x4196, r1	; 0x804196 <handleUI()::lastPressAt>
    3102:	10 92 97 41 	sts	0x4197, r1	; 0x804197 <handleUI()::lastPressAt+0x1>
    3106:	10 92 98 41 	sts	0x4198, r1	; 0x804198 <handleUI()::lastPressAt+0x2>
    310a:	10 92 99 41 	sts	0x4199, r1	; 0x804199 <handleUI()::lastPressAt+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:467
        }
#ifdef __AVR_ATmega328P__
        if (((btnRead & 2)) && !(lastBtnState & 2)) { //Rev - boards based on pro minis
#else
        if (((btnRead & 4)) && !(lastBtnState & 4)) { //Rev B 328pb/1284p based boards
    310e:	02 ff       	sbrs	r16, 2
    3110:	17 c0       	rjmp	.+46     	; 0x3140 <main+0x7cc>
    3112:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <handleUI()::lastBtnState>
    3116:	82 fd       	sbrc	r24, 2
    3118:	13 c0       	rjmp	.+38     	; 0x3140 <main+0x7cc>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:469
#endif
          if (currentSettingLeft >= pgm_read_byte_near(&maxSetting[currentMode][0])) {
    311a:	e0 91 19 44 	lds	r30, 0x4419	; 0x804419 <currentMode>
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	ee 0f       	add	r30, r30
    3122:	ff 1f       	adc	r31, r31
    3124:	ea 56       	subi	r30, 0x6A	; 106
    3126:	f8 4f       	sbci	r31, 0xF8	; 248
    3128:	e4 91       	lpm	r30, Z
    312a:	80 91 9f 41 	lds	r24, 0x419F	; 0x80419f <currentSettingLeft>
    312e:	8e 17       	cp	r24, r30
    3130:	48 f1       	brcs	.+82     	; 0x3184 <main+0x810>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:470
            currentSettingLeft = 0;
    3132:	10 92 9f 41 	sts	0x419F, r1	; 0x80419f <currentSettingLeft>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:474
          } else {
            currentSettingLeft++;
          }
          UIChanged |= 2;
    3136:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    313a:	82 60       	ori	r24, 0x02	; 2
    313c:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:479
        }
#ifdef __AVR_ATmega328P__
        if (((btnRead & 4)) && !(lastBtnState & 4)) { //Rev - boards based on pro minis
#else
        if (((btnRead & 2)) && !(lastBtnState & 2)) { //Rev B 328pb/1284p based boards
    3140:	01 ff       	sbrs	r16, 1
    3142:	68 cf       	rjmp	.-304    	; 0x3014 <main+0x6a0>
    3144:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <handleUI()::lastBtnState>
    3148:	81 fd       	sbrc	r24, 1
    314a:	64 cf       	rjmp	.-312    	; 0x3014 <main+0x6a0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:481
#endif
          if (currentSettingRight >= pgm_read_byte_near(&maxSetting[currentMode][1])) {
    314c:	e0 91 19 44 	lds	r30, 0x4419	; 0x804419 <currentMode>
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	ee 0f       	add	r30, r30
    3154:	ff 1f       	adc	r31, r31
    3156:	e9 56       	subi	r30, 0x69	; 105
    3158:	f8 4f       	sbci	r31, 0xF8	; 248
    315a:	e4 91       	lpm	r30, Z
    315c:	80 91 9e 41 	lds	r24, 0x419E	; 0x80419e <currentSettingRight>
    3160:	8e 17       	cp	r24, r30
    3162:	b0 f0       	brcs	.+44     	; 0x3190 <main+0x81c>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:482
            currentSettingRight = 0;
    3164:	10 92 9e 41 	sts	0x419E, r1	; 0x80419e <currentSettingRight>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:486
          } else {
            currentSettingRight++;
          }
          UIChanged |= 2;
    3168:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    316c:	82 60       	ori	r24, 0x02	; 2
    316e:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
    3172:	50 cf       	rjmp	.-352    	; 0x3014 <main+0x6a0>
advanceMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:339

void advanceMode() {
  if (currentMode >= maxMode) {
    setMode(0);
  } else {
    if (currentMode == 1) currentMode++;
    3174:	81 30       	cpi	r24, 0x01	; 1
    3176:	11 f4       	brne	.+4      	; 0x317c <main+0x808>
    3178:	70 92 19 44 	sts	0x4419, r7	; 0x804419 <currentMode>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:340
    setMode(currentMode + 1);
    317c:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    3180:	8f 5f       	subi	r24, 0xFF	; 255
    3182:	b7 cf       	rjmp	.-146    	; 0x30f2 <main+0x77e>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:472
        if (((btnRead & 4)) && !(lastBtnState & 4)) { //Rev B 328pb/1284p based boards
#endif
          if (currentSettingLeft >= pgm_read_byte_near(&maxSetting[currentMode][0])) {
            currentSettingLeft = 0;
          } else {
            currentSettingLeft++;
    3184:	80 91 9f 41 	lds	r24, 0x419F	; 0x80419f <currentSettingLeft>
    3188:	8f 5f       	subi	r24, 0xFF	; 255
    318a:	80 93 9f 41 	sts	0x419F, r24	; 0x80419f <currentSettingLeft>
    318e:	d3 cf       	rjmp	.-90     	; 0x3136 <main+0x7c2>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:484
        if (((btnRead & 2)) && !(lastBtnState & 2)) { //Rev B 328pb/1284p based boards
#endif
          if (currentSettingRight >= pgm_read_byte_near(&maxSetting[currentMode][1])) {
            currentSettingRight = 0;
          } else {
            currentSettingRight++;
    3190:	80 91 9e 41 	lds	r24, 0x419E	; 0x80419e <currentSettingRight>
    3194:	8f 5f       	subi	r24, 0xFF	; 255
    3196:	80 93 9e 41 	sts	0x419E, r24	; 0x80419e <currentSettingRight>
    319a:	e6 cf       	rjmp	.-52     	; 0x3168 <main+0x7f4>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:516
  uichg = UIChanged;
  UIChanged = 0;
  sei();
  if (uichg == 0) {
    if (millis() - lastInputAt > 60000) {
      if (!attractmode || (millis() - lastInputAt > 120000)) {
    319c:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    31a0:	68 19       	sub	r22, r8
    31a2:	79 09       	sbc	r23, r9
    31a4:	8a 09       	sbc	r24, r10
    31a6:	9b 09       	sbc	r25, r11
    31a8:	61 3c       	cpi	r22, 0xC1	; 193
    31aa:	74 4d       	sbci	r23, 0xD4	; 212
    31ac:	81 40       	sbci	r24, 0x01	; 1
    31ae:	91 05       	cpc	r25, r1
    31b0:	08 f0       	brcs	.+2      	; 0x31b4 <main+0x840>
    31b2:	9f ce       	rjmp	.-706    	; 0x2ef2 <main+0x57e>
loop():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:284
  } else if ((!receiving)  && (millis() - lastRFMsgAt > 100)) {
  
  }
  handleUI();
  handleLCD();
  if (millis() - lastFrameAt > getFrameDelay()) {
    31b4:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    31b8:	00 91 1a 44 	lds	r16, 0x441A	; 0x80441a <lastFrameAt>
    31bc:	10 91 1b 44 	lds	r17, 0x441B	; 0x80441b <lastFrameAt+0x1>
    31c0:	20 91 1c 44 	lds	r18, 0x441C	; 0x80441c <lastFrameAt+0x2>
    31c4:	30 91 1d 44 	lds	r19, 0x441D	; 0x80441d <lastFrameAt+0x3>
    31c8:	ab 01       	movw	r20, r22
    31ca:	bc 01       	movw	r22, r24
    31cc:	40 1b       	sub	r20, r16
    31ce:	51 0b       	sbc	r21, r17
    31d0:	62 0b       	sbc	r22, r18
    31d2:	73 0b       	sbc	r23, r19
getFrameDelay():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:296
    digitalWriteFast(INDICATE0,LOW);
  }
}

byte getFrameDelay() {
  if (currentMode == 1 || currentMode == 0) {
    31d4:	10 91 19 44 	lds	r17, 0x4419	; 0x804419 <currentMode>
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:297
    return 80;
    31d8:	80 e5       	ldi	r24, 0x50	; 80
getFrameDelay():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:296
    digitalWriteFast(INDICATE0,LOW);
  }
}

byte getFrameDelay() {
  if (currentMode == 1 || currentMode == 0) {
    31da:	12 30       	cpi	r17, 0x02	; 2
    31dc:	70 f0       	brcs	.+28     	; 0x31fa <main+0x886>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:298
    return 80;
  } else if (currentMode == 3) {
    31de:	13 30       	cpi	r17, 0x03	; 3
    31e0:	09 f0       	breq	.+2      	; 0x31e4 <main+0x870>
    31e2:	4e c2       	rjmp	.+1180   	; 0x3680 <nextbyte20+0x348>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:299
    return 30 + 10 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
    31e4:	ef e3       	ldi	r30, 0x3F	; 63
    31e6:	f9 e0       	ldi	r31, 0x09	; 9
    31e8:	84 91       	lpm	r24, Z
    31ea:	90 91 05 44 	lds	r25, 0x4405	; 0x804405 <currentValueRight>
    31ee:	89 1b       	sub	r24, r25
    31f0:	9a e0       	ldi	r25, 0x0A	; 10
    31f2:	89 9f       	mul	r24, r25
    31f4:	80 2d       	mov	r24, r0
    31f6:	11 24       	eor	r1, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:301
  }
  return 30 + 20 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
    31f8:	82 5e       	subi	r24, 0xE2	; 226
loop():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:284
  } else if ((!receiving)  && (millis() - lastRFMsgAt > 100)) {
  
  }
  handleUI();
  handleLCD();
  if (millis() - lastFrameAt > getFrameDelay()) {
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	a0 e0       	ldi	r26, 0x00	; 0
    3200:	84 17       	cp	r24, r20
    3202:	95 07       	cpc	r25, r21
    3204:	a6 07       	cpc	r26, r22
    3206:	b7 07       	cpc	r27, r23
    3208:	08 f0       	brcs	.+2      	; 0x320c <main+0x898>
    320a:	01 cd       	rjmp	.-1534   	; 0x2c0e <main+0x29a>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:285
    lastFrameAt = millis();
    320c:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    3210:	60 93 1a 44 	sts	0x441A, r22	; 0x80441a <lastFrameAt>
    3214:	70 93 1b 44 	sts	0x441B, r23	; 0x80441b <lastFrameAt+0x1>
    3218:	80 93 1c 44 	sts	0x441C, r24	; 0x80441c <lastFrameAt+0x2>
    321c:	90 93 1d 44 	sts	0x441D, r25	; 0x80441d <lastFrameAt+0x3>
digitalWriteFast():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:361
  if (val == LOW)
    vport->OUT &= ~mask;
  else if (val == CHANGE)
    vport->IN |= mask;
  else // HIGH
    vport->OUT |= mask;
    3220:	a9 9a       	sbi	0x15, 1	; 21
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:618
    }
  }
}

void updatePattern() {
  if (currentMode == 0) {
    3222:	11 11       	cpse	r17, r1
    3224:	3b c2       	rjmp	.+1142   	; 0x369c <nextbyte20+0x364>
    3226:	0e eb       	ldi	r16, 0xBE	; 190
    3228:	14 e4       	ldi	r17, 0x44	; 68
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:619
    for (unsigned int i = 0; i < LENGTH * 3; i++) {
    322a:	d1 2c       	mov	r13, r1
    322c:	c1 2c       	mov	r12, r1
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:620
      pixels[i] = getLeftVal(currentValueLeft[i % 3]);
    322e:	53 e0       	ldi	r21, 0x03	; 3
    3230:	e5 2e       	mov	r14, r21
    3232:	f1 2c       	mov	r15, r1
    3234:	c6 01       	movw	r24, r12
    3236:	b7 01       	movw	r22, r14
    3238:	0e 94 87 22 	call	0x450e	; 0x450e <__udivmodhi4>
    323c:	fc 01       	movw	r30, r24
    323e:	ef 5e       	subi	r30, 0xEF	; 239
    3240:	fb 4b       	sbci	r31, 0xBB	; 187
    3242:	80 81       	ld	r24, Z
    3244:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3248:	f8 01       	movw	r30, r16
    324a:	81 93       	st	Z+, r24
    324c:	8f 01       	movw	r16, r30
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:619
  }
}

void updatePattern() {
  if (currentMode == 0) {
    for (unsigned int i = 0; i < LENGTH * 3; i++) {
    324e:	ff ef       	ldi	r31, 0xFF	; 255
    3250:	cf 1a       	sub	r12, r31
    3252:	df 0a       	sbc	r13, r31
    3254:	28 e5       	ldi	r18, 0x58	; 88
    3256:	c2 16       	cp	r12, r18
    3258:	22 e0       	ldi	r18, 0x02	; 2
    325a:	d2 06       	cpc	r13, r18
    325c:	59 f7       	brne	.-42     	; 0x3234 <main+0x8c0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:646
  } else if (currentMode == 10) {
    updatePatternDrift2();
  } else {
    setMode(0);
  }
  frameNumber++;
    325e:	80 91 0d 44 	lds	r24, 0x440D	; 0x80440d <frameNumber>
    3262:	90 91 0e 44 	lds	r25, 0x440E	; 0x80440e <frameNumber+0x1>
    3266:	a0 91 0f 44 	lds	r26, 0x440F	; 0x80440f <frameNumber+0x2>
    326a:	b0 91 10 44 	lds	r27, 0x4410	; 0x804410 <frameNumber+0x3>
    326e:	01 96       	adiw	r24, 0x01	; 1
    3270:	a1 1d       	adc	r26, r1
    3272:	b1 1d       	adc	r27, r1
    3274:	80 93 0d 44 	sts	0x440D, r24	; 0x80440d <frameNumber>
    3278:	90 93 0e 44 	sts	0x440E, r25	; 0x80440e <frameNumber+0x1>
    327c:	a0 93 0f 44 	sts	0x440F, r26	; 0x80440f <frameNumber+0x2>
    3280:	b0 93 10 44 	sts	0x4410, r27	; 0x804410 <frameNumber+0x3>
digitalWriteFast():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:357
    vport->OUT &= ~mask;
  else // CHANGE
    vport->IN = mask;
*/
  if (val == LOW)
    vport->OUT &= ~mask;
    3284:	a9 98       	cbi	0x15, 1	; 21
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:361
  else if (val == CHANGE)
    vport->IN |= mask;
  else // HIGH
    vport->OUT |= mask;
    3286:	a8 9a       	sbi	0x15, 0	; 21
show():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:76
}

// *INDENT-OFF*   astyle don't like assembly
void tinyNeoPixel::show(void) {

  if ((!pixels) || pin >= NUM_DIGITAL_PINS)  {
    3288:	80 91 1c 47 	lds	r24, 0x471C	; 0x80471c <leds+0x6>
    328c:	90 91 1d 47 	lds	r25, 0x471D	; 0x80471d <leds+0x7>
    3290:	89 2b       	or	r24, r25
    3292:	09 f4       	brne	.+2      	; 0x3296 <main+0x922>
    3294:	6e c0       	rjmp	.+220    	; 0x3372 <nextbyte20+0x3a>
    3296:	80 91 1a 47 	lds	r24, 0x471A	; 0x80471a <leds+0x4>
    329a:	89 32       	cpi	r24, 0x29	; 41
    329c:	0c f0       	brlt	.+2      	; 0x32a0 <main+0x92c>
    329e:	69 c0       	rjmp	.+210    	; 0x3372 <nextbyte20+0x3a>
_ZN12tinyNeoPixel7canShowEv.isra.0():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.h:298
             function instead.
  */
  static uint32_t gamma32(uint32_t x);

  #if (!defined(DISABLEMILLIS) && !defined(MILLIS_USE_TIMERRTC) && !defined(MILLIS_USE_TIMERRTC_XTAL) && !defined(MILLIS_USE_TIMERRTC_XOSC))
    inline bool canShow(void) { return (micros() - endTime) >= 50L; }
    32a0:	0e 94 43 06 	call	0xc86	; 0xc86 <micros>
    32a4:	00 91 22 47 	lds	r16, 0x4722	; 0x804722 <leds+0xc>
    32a8:	10 91 23 47 	lds	r17, 0x4723	; 0x804723 <leds+0xd>
    32ac:	20 91 24 47 	lds	r18, 0x4724	; 0x804724 <leds+0xe>
    32b0:	30 91 25 47 	lds	r19, 0x4725	; 0x804725 <leds+0xf>
    32b4:	60 1b       	sub	r22, r16
    32b6:	71 0b       	sbc	r23, r17
    32b8:	82 0b       	sbc	r24, r18
    32ba:	93 0b       	sbc	r25, r19
show():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:86
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while (!canShow());
    32bc:	62 33       	cpi	r22, 0x32	; 50
    32be:	71 05       	cpc	r23, r1
    32c0:	81 05       	cpc	r24, r1
    32c2:	91 05       	cpc	r25, r1
    32c4:	68 f3       	brcs	.-38     	; 0x32a0 <main+0x92c>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:101
  // while data is being issued to the LEDs, so no other code will be
  // accessing the PORT.  The code takes an initial 'snapshot' of the PORT
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  noInterrupts(); // Need 100% focus on instruction timing
    32c6:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:111
  // Dx-series parts. This is by no means intended to imply that they will
  // run at those speeds, only that - if they do - you can control WS2812s
  // with them.

  volatile uint16_t
    i   = numBytes; // Loop counter
    32c8:	80 91 18 47 	lds	r24, 0x4718	; 0x804718 <leds+0x2>
    32cc:	90 91 19 47 	lds	r25, 0x4719	; 0x804719 <leds+0x3>
    32d0:	89 83       	std	Y+1, r24	; 0x01
    32d2:	9a 83       	std	Y+2, r25	; 0x02
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:113
  volatile uint8_t
   *ptr = pixels,   // Pointer to next byte
    32d4:	e0 91 1c 47 	lds	r30, 0x471C	; 0x80471c <leds+0x6>
    32d8:	f0 91 1d 47 	lds	r31, 0x471D	; 0x80471d <leds+0x7>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:114
    b   = *ptr++,   // Current byte value
    32dc:	df 01       	movw	r26, r30
    32de:	11 96       	adiw	r26, 0x01	; 1
    32e0:	80 81       	ld	r24, Z
    32e2:	89 87       	std	Y+9, r24	; 0x09
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:430
    // 25 inst. clocks per bit: HHHHHHHxxxxxxxxLLLLLLLLLL
    // ST instructions:         ^      ^       ^       (T=0,7,15)

    volatile uint8_t next, bit;

    hi   = *port |  pinMask;
    32e4:	e0 91 26 47 	lds	r30, 0x4726	; 0x804726 <leds+0x10>
    32e8:	f0 91 27 47 	lds	r31, 0x4727	; 0x804727 <leds+0x11>
    32ec:	90 81       	ld	r25, Z
    32ee:	80 91 28 47 	lds	r24, 0x4728	; 0x804728 <leds+0x12>
    32f2:	98 2b       	or	r25, r24
    32f4:	98 87       	std	Y+8, r25	; 0x08
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:431
    lo   = *port & ~pinMask;
    32f6:	90 81       	ld	r25, Z
    32f8:	80 95       	com	r24
    32fa:	89 23       	and	r24, r25
    32fc:	8f 83       	std	Y+7, r24	; 0x07
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:432
    next = lo;
    32fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3300:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:433
    bit  = 8;
    3302:	88 e0       	ldi	r24, 0x08	; 8
    3304:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:472
      [bit]   "+r" (bit),
      [next]  "+r" (next),
      [count] "+w" (i)
    : [ptr]    "e" (ptr),
      [hi]     "r" (hi),
      [lo]     "r" (lo));
    3306:	58 85       	ldd	r21, Y+8	; 0x08
    3308:	6f 81       	ldd	r22, Y+7	; 0x07
    330a:	49 85       	ldd	r20, Y+9	; 0x09
    330c:	3d 81       	ldd	r19, Y+5	; 0x05
    330e:	2e 81       	ldd	r18, Y+6	; 0x06
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	9a 81       	ldd	r25, Y+2	; 0x02

00003314 <head20>:
    3314:	50 83       	st	Z, r21
    3316:	47 fd       	sbrc	r20, 7
    3318:	25 2f       	mov	r18, r21
    331a:	3a 95       	dec	r19
    331c:	00 00       	nop
    331e:	00 c0       	rjmp	.+0      	; 0x3320 <head20+0xc>
    3320:	20 83       	st	Z, r18
    3322:	26 2f       	mov	r18, r22
    3324:	49 f0       	breq	.+18     	; 0x3338 <nextbyte20>
    3326:	44 1f       	adc	r20, r20
    3328:	00 c0       	rjmp	.+0      	; 0x332a <head20+0x16>
    332a:	00 c0       	rjmp	.+0      	; 0x332c <head20+0x18>
    332c:	60 83       	st	Z, r22
    332e:	00 00       	nop
    3330:	00 c0       	rjmp	.+0      	; 0x3332 <head20+0x1e>
    3332:	00 c0       	rjmp	.+0      	; 0x3334 <head20+0x20>
    3334:	00 c0       	rjmp	.+0      	; 0x3336 <head20+0x22>
    3336:	ee cf       	rjmp	.-36     	; 0x3314 <head20>

00003338 <nextbyte20>:
    3338:	38 e0       	ldi	r19, 0x08	; 8
    333a:	4d 91       	ld	r20, X+
    333c:	00 00       	nop
    333e:	60 83       	st	Z, r22
    3340:	00 00       	nop
    3342:	00 c0       	rjmp	.+0      	; 0x3344 <nextbyte20+0xc>
    3344:	00 c0       	rjmp	.+0      	; 0x3346 <nextbyte20+0xe>
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	29 f7       	brne	.-54     	; 0x3314 <head20>
    334a:	e0 93 26 47 	sts	0x4726, r30	; 0x804726 <leds+0x10>
    334e:	f0 93 27 47 	sts	0x4727, r31	; 0x804727 <leds+0x11>
    3352:	49 87       	std	Y+9, r20	; 0x09
    3354:	3d 83       	std	Y+5, r19	; 0x05
    3356:	2e 83       	std	Y+6, r18	; 0x06
    3358:	89 83       	std	Y+1, r24	; 0x01
    335a:	9a 83       	std	Y+2, r25	; 0x02
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:818
#endif

  // END AVR ----------------------------------------------------------------


  interrupts();
    335c:	78 94       	sei
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:820
  #if (!defined(DISABLEMILLIS) && !defined(MILLIS_USE_TIMERRTC) && !defined(MILLIS_USE_TIMERRTC_XTAL) && !defined(MILLIS_USE_TIMERRTC_XOSC))
    endTime = micros();
    335e:	0e 94 43 06 	call	0xc86	; 0xc86 <micros>
    3362:	60 93 22 47 	sts	0x4722, r22	; 0x804722 <leds+0xc>
    3366:	70 93 23 47 	sts	0x4723, r23	; 0x804723 <leds+0xd>
    336a:	80 93 24 47 	sts	0x4724, r24	; 0x804724 <leds+0xe>
    336e:	90 93 25 47 	sts	0x4725, r25	; 0x804725 <leds+0xf>
digitalWriteFast():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:357
    vport->OUT &= ~mask;
  else // CHANGE
    vport->IN = mask;
*/
  if (val == LOW)
    vport->OUT &= ~mask;
    3372:	a8 98       	cbi	0x15, 0	; 21
    3374:	46 cc       	rjmp	.-1908   	; 0x2c02 <main+0x28e>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:597
    lcd.setCursor(0, 0);
    lcd.print(F("TRICK OR TREAT!"));
    lcd.setCursor(0, 1);
    lcd.print(F("Let's get weird!"));
  } else if (s == 1) {
    lcd.setCursor(0, 0);
    3376:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:596
  if (!s) {
    lcd.setCursor(0, 0);
    lcd.print(F("TRICK OR TREAT!"));
    lcd.setCursor(0, 1);
    lcd.print(F("Let's get weird!"));
  } else if (s == 1) {
    3378:	61 30       	cpi	r22, 0x01	; 1
    337a:	e9 f4       	brne	.+58     	; 0x33b6 <nextbyte20+0x7e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:597
    lcd.setCursor(0, 0);
    337c:	60 e0       	ldi	r22, 0x00	; 0
    337e:	89 e2       	ldi	r24, 0x29	; 41
    3380:	97 e4       	ldi	r25, 0x47	; 71
    3382:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:598
    lcd.print(F("Cabin Weekend VI"));
    3386:	61 e4       	ldi	r22, 0x41	; 65
    3388:	77 e0       	ldi	r23, 0x07	; 7
    338a:	89 e2       	ldi	r24, 0x29	; 41
    338c:	97 e4       	ldi	r25, 0x47	; 71
    338e:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:599
    lcd.setCursor(0, 1);
    3392:	41 e0       	ldi	r20, 0x01	; 1
    3394:	60 e0       	ldi	r22, 0x00	; 0
    3396:	89 e2       	ldi	r24, 0x29	; 41
    3398:	97 e4       	ldi	r25, 0x47	; 71
    339a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:600
    lcd.print(F(" ~HALLOWEEKEND"));
    339e:	62 e3       	ldi	r22, 0x32	; 50
    33a0:	77 e0       	ldi	r23, 0x07	; 7
    33a2:	89 e2       	ldi	r24, 0x29	; 41
    33a4:	97 e4       	ldi	r25, 0x47	; 71
    33a6:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
write():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.h:199
	size_t write(uint8_t value);	// does char & line processing
	size_t _write(uint8_t value);	// does not do char & line processing
// write() overloads for 0 or null which is an int
// This is only because Print class doesn't do it.
	inline size_t write(unsigned int value) { return(write((uint8_t)value)); }
	inline size_t write(int value) { return(write((uint8_t)value)); }
    33aa:	6f e7       	ldi	r22, 0x7F	; 127
    33ac:	89 e2       	ldi	r24, 0x29	; 41
    33ae:	97 e4       	ldi	r25, 0x47	; 71
    33b0:	0e 94 1f 07 	call	0xe3e	; 0xe3e <hd44780::write(unsigned char)>
    33b4:	ff ce       	rjmp	.-514    	; 0x31b4 <main+0x840>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:603
    lcd.write(0x7F);
  } else {
    lcd.setCursor(2, 0);
    33b6:	62 e0       	ldi	r22, 0x02	; 2
    33b8:	89 e2       	ldi	r24, 0x29	; 41
    33ba:	97 e4       	ldi	r25, 0x47	; 71
    33bc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:604
    lcd.print(F("PLAY WITH ME"));
    33c0:	65 e2       	ldi	r22, 0x25	; 37
    33c2:	77 e0       	ldi	r23, 0x07	; 7
    33c4:	89 e2       	ldi	r24, 0x29	; 41
    33c6:	97 e4       	ldi	r25, 0x47	; 71
    33c8:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:605
    lcd.setCursor(0, 1);
    33cc:	41 e0       	ldi	r20, 0x01	; 1
    33ce:	60 e0       	ldi	r22, 0x00	; 0
    33d0:	89 e2       	ldi	r24, 0x29	; 41
    33d2:	97 e4       	ldi	r25, 0x47	; 71
    33d4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
random():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
    33d8:	b7 d5       	rcall	.+2926   	; 0x3f48 <random>
    33da:	22 e0       	ldi	r18, 0x02	; 2
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e0       	ldi	r20, 0x00	; 0
    33e0:	50 e0       	ldi	r21, 0x00	; 0
    33e2:	0f d6       	rcall	.+3102   	; 0x4002 <__divmodsi4>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:607
    byte r = random(0, 2);
    if (r == 0) {
    33e4:	61 11       	cpse	r22, r1
    33e6:	03 c0       	rjmp	.+6      	; 0x33ee <nextbyte20+0xb6>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:608
      lcd.print(F("USE KNOBS&BUTTON"));
    33e8:	64 e1       	ldi	r22, 0x14	; 20
    33ea:	77 e0       	ldi	r23, 0x07	; 7
    33ec:	b3 cd       	rjmp	.-1178   	; 0x2f54 <main+0x5e0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:609
    } else if (r == 1) {
    33ee:	61 30       	cpi	r22, 0x01	; 1
    33f0:	19 f4       	brne	.+6      	; 0x33f8 <nextbyte20+0xc0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:610
      lcd.print(F("TURN MY KNOBS ;)"));
    33f2:	63 e0       	ldi	r22, 0x03	; 3
    33f4:	77 e0       	ldi	r23, 0x07	; 7
    33f6:	ae cd       	rjmp	.-1188   	; 0x2f54 <main+0x5e0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:612
    } else {
      lcd.print(F("ADJUST LIGHTING"));
    33f8:	63 ef       	ldi	r22, 0xF3	; 243
    33fa:	76 e0       	ldi	r23, 0x06	; 6
    33fc:	ab cd       	rjmp	.-1194   	; 0x2f54 <main+0x5e0>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:524
        doAttractLCD();
      }
    }
    return;
  }
  if (attractmode) {
    33fe:	80 91 a0 41 	lds	r24, 0x41A0	; 0x8041a0 <handleLCD()::attractmode>
    3402:	81 11       	cpse	r24, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:525
    lcd.clear();
    3404:	0e 94 f5 06 	call	0xdea	; 0xdea <hd44780::clear() [clone .constprop.25]>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:527
  }
  if (uichg & 1 && currentMode == 10) {
    3408:	10 ff       	sbrs	r17, 0
    340a:	0d c0       	rjmp	.+26     	; 0x3426 <nextbyte20+0xee>
    340c:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    3410:	8a 30       	cpi	r24, 0x0A	; 10
    3412:	49 f4       	brne	.+18     	; 0x3426 <nextbyte20+0xee>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:528
    if (getPalleteNumber() != drift2_colors) {
    3414:	0e 94 a7 07 	call	0xf4e	; 0xf4e <getPalleteNumber()>
    3418:	90 91 05 40 	lds	r25, 0x4005	; 0x804005 <handleLCD()::drift2_colors>
    341c:	89 13       	cpse	r24, r25
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:529
      initColorsDrift2();
    341e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <initColorsDrift2()>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:531
    }
    initLookupDrift2();
    3422:	0e 94 b4 10 	call	0x2168	; 0x2168 <initLookupDrift2()>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:533
  }
  if (currentMode == 10) {
    3426:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    342a:	8a 30       	cpi	r24, 0x0A	; 10
    342c:	51 f4       	brne	.+20     	; 0x3442 <nextbyte20+0x10a>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:534
    if (getPalleteNumber() != drift2_colors) {
    342e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <getPalleteNumber()>
    3432:	90 91 05 40 	lds	r25, 0x4005	; 0x804005 <handleLCD()::drift2_colors>
    3436:	89 17       	cp	r24, r25
    3438:	21 f0       	breq	.+8      	; 0x3442 <nextbyte20+0x10a>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:535
      drift2_colors = getPalleteNumber();
    343a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <getPalleteNumber()>
    343e:	80 93 05 40 	sts	0x4005, r24	; 0x804005 <handleLCD()::drift2_colors>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:538
    }
  }
  lastInputAt = millis();
    3442:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    3446:	60 93 a1 41 	sts	0x41A1, r22	; 0x8041a1 <handleLCD()::lastInputAt>
    344a:	70 93 a2 41 	sts	0x41A2, r23	; 0x8041a2 <handleLCD()::lastInputAt+0x1>
    344e:	80 93 a3 41 	sts	0x41A3, r24	; 0x8041a3 <handleLCD()::lastInputAt+0x2>
    3452:	90 93 a4 41 	sts	0x41A4, r25	; 0x8041a4 <handleLCD()::lastInputAt+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:539
  if ((uichg & 6) || attractmode ) { //if setting or mode has changed, redraw settings
    3456:	81 2f       	mov	r24, r17
    3458:	86 70       	andi	r24, 0x06	; 6
    345a:	29 f4       	brne	.+10     	; 0x3466 <nextbyte20+0x12e>
    345c:	80 91 a0 41 	lds	r24, 0x41A0	; 0x8041a0 <handleLCD()::attractmode>
    3460:	88 23       	and	r24, r24
    3462:	09 f4       	brne	.+2      	; 0x3466 <nextbyte20+0x12e>
    3464:	38 c0       	rjmp	.+112    	; 0x34d6 <nextbyte20+0x19e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:540
    lcd.setCursor(0, 0);
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	60 e0       	ldi	r22, 0x00	; 0
    346a:	89 e2       	ldi	r24, 0x29	; 41
    346c:	97 e4       	ldi	r25, 0x47	; 71
    346e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:541
    if (currentMode < 7 ) {
    3472:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    3476:	87 30       	cpi	r24, 0x07	; 7
    3478:	08 f0       	brcs	.+2      	; 0x347c <nextbyte20+0x144>
    347a:	58 c0       	rjmp	.+176    	; 0x352c <nextbyte20+0x1f4>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:542
      lcd.print(FLASH(modesL[currentMode][currentSettingLeft]));
    347c:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    3480:	48 e0       	ldi	r20, 0x08	; 8
    3482:	84 9f       	mul	r24, r20
    3484:	c0 01       	movw	r24, r0
    3486:	11 24       	eor	r1, r1
    3488:	e8 0f       	add	r30, r24
    348a:	f9 2f       	mov	r31, r25
    348c:	f1 1d       	adc	r31, r1
    348e:	ee 0f       	add	r30, r30
    3490:	ff 1f       	adc	r31, r31
    3492:	e9 58       	subi	r30, 0x89	; 137
    3494:	f7 4f       	sbci	r31, 0xF7	; 247
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:544
    } else {
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
    3496:	65 91       	lpm	r22, Z+
    3498:	74 91       	lpm	r23, Z
    349a:	89 e2       	ldi	r24, 0x29	; 41
    349c:	97 e4       	ldi	r25, 0x47	; 71
    349e:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:546
    }
    lcd.print(' ');
    34a2:	60 e2       	ldi	r22, 0x20	; 32
    34a4:	89 e2       	ldi	r24, 0x29	; 41
    34a6:	97 e4       	ldi	r25, 0x47	; 71
    34a8:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:547
    lcd.print(FLASH(modesR[currentMode][currentSettingRight]));
    34ac:	e0 91 9e 41 	lds	r30, 0x419E	; 0x80419e <currentSettingRight>
    34b0:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    34b4:	58 e0       	ldi	r21, 0x08	; 8
    34b6:	85 9f       	mul	r24, r21
    34b8:	c0 01       	movw	r24, r0
    34ba:	11 24       	eor	r1, r1
    34bc:	e8 0f       	add	r30, r24
    34be:	f9 2f       	mov	r31, r25
    34c0:	f1 1d       	adc	r31, r1
    34c2:	ee 0f       	add	r30, r30
    34c4:	ff 1f       	adc	r31, r31
    34c6:	ef 54       	subi	r30, 0x4F	; 79
    34c8:	f8 4f       	sbci	r31, 0xF8	; 248
    34ca:	65 91       	lpm	r22, Z+
    34cc:	74 91       	lpm	r23, Z
    34ce:	89 e2       	ldi	r24, 0x29	; 41
    34d0:	97 e4       	ldi	r25, 0x47	; 71
    34d2:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:549
  }
  if ((uichg & 7) || attractmode) { //if mode, setting, or value has changed, redraw second line
    34d6:	17 70       	andi	r17, 0x07	; 7
    34d8:	29 f4       	brne	.+10     	; 0x34e4 <nextbyte20+0x1ac>
    34da:	80 91 a0 41 	lds	r24, 0x41A0	; 0x8041a0 <handleLCD()::attractmode>
    34de:	88 23       	and	r24, r24
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <nextbyte20+0x1ac>
    34e2:	92 c0       	rjmp	.+292    	; 0x3608 <nextbyte20+0x2d0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:551
    byte tval;
    if (currentMode > 6) {
    34e4:	e0 91 19 44 	lds	r30, 0x4419	; 0x804419 <currentMode>
    34e8:	e7 30       	cpi	r30, 0x07	; 7
    34ea:	40 f1       	brcs	.+80     	; 0x353c <nextbyte20+0x204>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:552
      lcd.setCursor(0, 0);
    34ec:	40 e0       	ldi	r20, 0x00	; 0
    34ee:	60 e0       	ldi	r22, 0x00	; 0
    34f0:	89 e2       	ldi	r24, 0x29	; 41
    34f2:	97 e4       	ldi	r25, 0x47	; 71
    34f4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:553
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
    34f8:	e0 91 11 44 	lds	r30, 0x4411	; 0x804411 <currentValueLeft>
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	ee 0f       	add	r30, r30
    3500:	ff 1f       	adc	r31, r31
    3502:	ef 59       	subi	r30, 0x9F	; 159
    3504:	f7 4f       	sbci	r31, 0xF7	; 247
    3506:	65 91       	lpm	r22, Z+
    3508:	74 91       	lpm	r23, Z
    350a:	89 e2       	ldi	r24, 0x29	; 41
    350c:	97 e4       	ldi	r25, 0x47	; 71
    350e:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:554
      lcd.setCursor(0, 1);
    3512:	41 e0       	ldi	r20, 0x01	; 1
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	89 e2       	ldi	r24, 0x29	; 41
    3518:	97 e4       	ldi	r25, 0x47	; 71
    351a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:555
      lcd.print(F("    "));
    351e:	6c ea       	ldi	r22, 0xAC	; 172
    3520:	77 e0       	ldi	r23, 0x07	; 7
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:564
      lcd.print(tval);
      lcd.print(' ');
      if (tval < 10) lcd.print(' ');
    } else {
      lcd.setCursor(0, 1);
      lcd.print(F("    "));
    3522:	89 e2       	ldi	r24, 0x29	; 41
    3524:	97 e4       	ldi	r25, 0x47	; 71
    3526:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
    352a:	35 c0       	rjmp	.+106    	; 0x3596 <nextbyte20+0x25e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:544
  if ((uichg & 6) || attractmode ) { //if setting or mode has changed, redraw settings
    lcd.setCursor(0, 0);
    if (currentMode < 7 ) {
      lcd.print(FLASH(modesL[currentMode][currentSettingLeft]));
    } else {
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
    352c:	e0 91 11 44 	lds	r30, 0x4411	; 0x804411 <currentValueLeft>
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	ee 0f       	add	r30, r30
    3534:	ff 1f       	adc	r31, r31
    3536:	ef 59       	subi	r30, 0x9F	; 159
    3538:	f7 4f       	sbci	r31, 0xF7	; 247
    353a:	ad cf       	rjmp	.-166    	; 0x3496 <nextbyte20+0x15e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:556
    if (currentMode > 6) {
      lcd.setCursor(0, 0);
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
      lcd.setCursor(0, 1);
      lcd.print(F("    "));
    } else if (pgm_read_byte_near(&maxSetting[currentMode][0]) != 255) {
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	ee 0f       	add	r30, r30
    3540:	ff 1f       	adc	r31, r31
    3542:	ea 56       	subi	r30, 0x6A	; 106
    3544:	f8 4f       	sbci	r31, 0xF8	; 248
    3546:	e4 91       	lpm	r30, Z
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:557
      lcd.setCursor(0, 1);
    3548:	41 e0       	ldi	r20, 0x01	; 1
    354a:	60 e0       	ldi	r22, 0x00	; 0
    354c:	89 e2       	ldi	r24, 0x29	; 41
    354e:	97 e4       	ldi	r25, 0x47	; 71
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:556
    if (currentMode > 6) {
      lcd.setCursor(0, 0);
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
      lcd.setCursor(0, 1);
      lcd.print(F("    "));
    } else if (pgm_read_byte_near(&maxSetting[currentMode][0]) != 255) {
    3550:	ef 3f       	cpi	r30, 0xFF	; 255
    3552:	09 f4       	brne	.+2      	; 0x3556 <nextbyte20+0x21e>
    3554:	5c c0       	rjmp	.+184    	; 0x360e <nextbyte20+0x2d6>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:557
      lcd.setCursor(0, 1);
    3556:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:558
      tval = getLeftVal(currentValueLeft[currentSettingLeft]);
    355a:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <currentSettingLeft>
    355e:	f0 e0       	ldi	r31, 0x00	; 0
    3560:	ef 5e       	subi	r30, 0xEF	; 239
    3562:	fb 4b       	sbci	r31, 0xBB	; 187
    3564:	80 81       	ld	r24, Z
    3566:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    356a:	18 2f       	mov	r17, r24
print():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:73
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    356c:	48 2f       	mov	r20, r24
    356e:	50 e0       	ldi	r21, 0x00	; 0
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    3574:	2a e0       	ldi	r18, 0x0A	; 10
    3576:	89 e2       	ldi	r24, 0x29	; 41
    3578:	97 e4       	ldi	r25, 0x47	; 71
    357a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Print::printNumber(unsigned long, unsigned char)>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:560
      lcd.print(tval);
      lcd.print(' ');
    357e:	60 e2       	ldi	r22, 0x20	; 32
    3580:	89 e2       	ldi	r24, 0x29	; 41
    3582:	97 e4       	ldi	r25, 0x47	; 71
    3584:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:561
      if (tval < 10) lcd.print(' ');
    3588:	1a 30       	cpi	r17, 0x0A	; 10
    358a:	28 f4       	brcc	.+10     	; 0x3596 <nextbyte20+0x25e>
    358c:	60 e2       	ldi	r22, 0x20	; 32
    358e:	89 e2       	ldi	r24, 0x29	; 41
    3590:	97 e4       	ldi	r25, 0x47	; 71
    3592:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:566
    } else {
      lcd.setCursor(0, 1);
      lcd.print(F("    "));
    }
    lcd.setCursor(4, 1);
    3596:	41 e0       	ldi	r20, 0x01	; 1
    3598:	64 e0       	ldi	r22, 0x04	; 4
    359a:	89 e2       	ldi	r24, 0x29	; 41
    359c:	97 e4       	ldi	r25, 0x47	; 71
    359e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:567
    lcd.print(FLASH(modeNames[currentMode]));
    35a2:	e0 91 19 44 	lds	r30, 0x4419	; 0x804419 <currentMode>
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	ee 0f       	add	r30, r30
    35aa:	ff 1f       	adc	r31, r31
    35ac:	e5 58       	subi	r30, 0x85	; 133
    35ae:	f8 4f       	sbci	r31, 0xF8	; 248
    35b0:	65 91       	lpm	r22, Z+
    35b2:	74 91       	lpm	r23, Z
    35b4:	89 e2       	ldi	r24, 0x29	; 41
    35b6:	97 e4       	ldi	r25, 0x47	; 71
    35b8:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:568
    lcd.setCursor(13, 1);
    35bc:	41 e0       	ldi	r20, 0x01	; 1
    35be:	6d e0       	ldi	r22, 0x0D	; 13
    35c0:	89 e2       	ldi	r24, 0x29	; 41
    35c2:	97 e4       	ldi	r25, 0x47	; 71
    35c4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:569
    if (pgm_read_byte_near(&maxValueRight[currentMode][currentSettingRight]) == 1) { //if max is 1, that means it's forward/reverse
    35c8:	e0 91 9e 41 	lds	r30, 0x419E	; 0x80419e <currentSettingRight>
    35cc:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    35d0:	68 e0       	ldi	r22, 0x08	; 8
    35d2:	86 9f       	mul	r24, r22
    35d4:	c0 01       	movw	r24, r0
    35d6:	11 24       	eor	r1, r1
    35d8:	e8 0f       	add	r30, r24
    35da:	f9 2f       	mov	r31, r25
    35dc:	f1 1d       	adc	r31, r1
    35de:	e9 5d       	subi	r30, 0xD9	; 217
    35e0:	f6 4f       	sbci	r31, 0xF6	; 246
    35e2:	e4 91       	lpm	r30, Z
    35e4:	e1 30       	cpi	r30, 0x01	; 1
    35e6:	c1 f4       	brne	.+48     	; 0x3618 <nextbyte20+0x2e0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:570
      if (currentValueRight[currentSettingRight]) {
    35e8:	e0 91 9e 41 	lds	r30, 0x419E	; 0x80419e <currentSettingRight>
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	eb 5f       	subi	r30, 0xFB	; 251
    35f0:	fb 4b       	sbci	r31, 0xBB	; 187
    35f2:	80 81       	ld	r24, Z
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:571
        lcd.print(F("REV"));
    35f4:	67 e7       	ldi	r22, 0x77	; 119
    35f6:	77 e0       	ldi	r23, 0x07	; 7
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:570
    }
    lcd.setCursor(4, 1);
    lcd.print(FLASH(modeNames[currentMode]));
    lcd.setCursor(13, 1);
    if (pgm_read_byte_near(&maxValueRight[currentMode][currentSettingRight]) == 1) { //if max is 1, that means it's forward/reverse
      if (currentValueRight[currentSettingRight]) {
    35f8:	81 11       	cpse	r24, r1
    35fa:	02 c0       	rjmp	.+4      	; 0x3600 <nextbyte20+0x2c8>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:573
        lcd.print(F("REV"));
      } else {
        lcd.print(F("FWD"));
    35fc:	63 e7       	ldi	r22, 0x73	; 115
    35fe:	77 e0       	ldi	r23, 0x07	; 7
    3600:	89 e2       	ldi	r24, 0x29	; 41
    3602:	97 e4       	ldi	r25, 0x47	; 71
    3604:	0e 94 18 05 	call	0xa30	; 0xa30 <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:586
      } else {
        lcd.print(' ');
      }
    }
  }
  attractmode = 0;
    3608:	10 92 a0 41 	sts	0x41A0, r1	; 0x8041a0 <handleLCD()::attractmode>
    360c:	d3 cd       	rjmp	.-1114   	; 0x31b4 <main+0x840>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:563
      tval = getLeftVal(currentValueLeft[currentSettingLeft]);
      lcd.print(tval);
      lcd.print(' ');
      if (tval < 10) lcd.print(' ');
    } else {
      lcd.setCursor(0, 1);
    360e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:564
      lcd.print(F("    "));
    3612:	61 e9       	ldi	r22, 0x91	; 145
    3614:	77 e0       	ldi	r23, 0x07	; 7
    3616:	85 cf       	rjmp	.-246    	; 0x3522 <nextbyte20+0x1ea>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:576
        lcd.print(F("REV"));
      } else {
        lcd.print(F("FWD"));
      }
    } else {
      tval = currentValueRight[currentSettingRight];
    3618:	e0 91 9e 41 	lds	r30, 0x419E	; 0x80419e <currentSettingRight>
    361c:	f0 e0       	ldi	r31, 0x00	; 0
    361e:	eb 5f       	subi	r30, 0xFB	; 251
    3620:	fb 4b       	sbci	r31, 0xBB	; 187
    3622:	10 81       	ld	r17, Z
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:577
      if (tval < 100) lcd.print(' ');
    3624:	14 36       	cpi	r17, 0x64	; 100
    3626:	60 f4       	brcc	.+24     	; 0x3640 <nextbyte20+0x308>
    3628:	60 e2       	ldi	r22, 0x20	; 32
    362a:	89 e2       	ldi	r24, 0x29	; 41
    362c:	97 e4       	ldi	r25, 0x47	; 71
    362e:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:578
      if (tval < 10) lcd.print(' ');
    3632:	1a 30       	cpi	r17, 0x0A	; 10
    3634:	28 f4       	brcc	.+10     	; 0x3640 <nextbyte20+0x308>
    3636:	60 e2       	ldi	r22, 0x20	; 32
    3638:	89 e2       	ldi	r24, 0x29	; 41
    363a:	97 e4       	ldi	r25, 0x47	; 71
    363c:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:579
      if (pgm_read_byte_near(&maxValueRight[currentMode][currentSettingRight])) { //if max is 0, then this is blank
    3640:	e0 91 9e 41 	lds	r30, 0x419E	; 0x80419e <currentSettingRight>
    3644:	80 91 19 44 	lds	r24, 0x4419	; 0x804419 <currentMode>
    3648:	f8 e0       	ldi	r31, 0x08	; 8
    364a:	8f 9f       	mul	r24, r31
    364c:	c0 01       	movw	r24, r0
    364e:	11 24       	eor	r1, r1
    3650:	e8 0f       	add	r30, r24
    3652:	f9 2f       	mov	r31, r25
    3654:	f1 1d       	adc	r31, r1
    3656:	e9 5d       	subi	r30, 0xD9	; 217
    3658:	f6 4f       	sbci	r31, 0xF6	; 246
    365a:	e4 91       	lpm	r30, Z
    365c:	ee 23       	and	r30, r30
    365e:	51 f0       	breq	.+20     	; 0x3674 <nextbyte20+0x33c>
print():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:73
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    3660:	41 2f       	mov	r20, r17
    3662:	50 e0       	ldi	r21, 0x00	; 0
    3664:	70 e0       	ldi	r23, 0x00	; 0
    3666:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    3668:	2a e0       	ldi	r18, 0x0A	; 10
    366a:	89 e2       	ldi	r24, 0x29	; 41
    366c:	97 e4       	ldi	r25, 0x47	; 71
    366e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Print::printNumber(unsigned long, unsigned char)>
    3672:	ca cf       	rjmp	.-108    	; 0x3608 <nextbyte20+0x2d0>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:582
        lcd.print(tval);
      } else {
        lcd.print(' ');
    3674:	60 e2       	ldi	r22, 0x20	; 32
    3676:	89 e2       	ldi	r24, 0x29	; 41
    3678:	97 e4       	ldi	r25, 0x47	; 71
    367a:	0e 94 11 05 	call	0xa22	; 0xa22 <Print::print(char)>
    367e:	c4 cf       	rjmp	.-120    	; 0x3608 <nextbyte20+0x2d0>
getFrameDelay():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:301
  if (currentMode == 1 || currentMode == 0) {
    return 80;
  } else if (currentMode == 3) {
    return 30 + 10 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
  }
  return 30 + 20 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
    3680:	28 e0       	ldi	r18, 0x08	; 8
    3682:	12 9f       	mul	r17, r18
    3684:	f0 01       	movw	r30, r0
    3686:	11 24       	eor	r1, r1
    3688:	e9 5d       	subi	r30, 0xD9	; 217
    368a:	f6 4f       	sbci	r31, 0xF6	; 246
    368c:	84 91       	lpm	r24, Z
    368e:	90 91 05 44 	lds	r25, 0x4405	; 0x804405 <currentValueRight>
    3692:	89 1b       	sub	r24, r25
    3694:	86 9d       	mul	r24, r6
    3696:	80 2d       	mov	r24, r0
    3698:	11 24       	eor	r1, r1
    369a:	ae cd       	rjmp	.-1188   	; 0x31f8 <main+0x884>
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:622
void updatePattern() {
  if (currentMode == 0) {
    for (unsigned int i = 0; i < LENGTH * 3; i++) {
      pixels[i] = getLeftVal(currentValueLeft[i % 3]);
    }
  } else if (currentMode == 1) {
    369c:	11 30       	cpi	r17, 0x01	; 1
    369e:	09 f0       	breq	.+2      	; 0x36a2 <nextbyte20+0x36a>
    36a0:	75 c0       	rjmp	.+234    	; 0x378c <nextbyte20+0x454>
updatePatternDrift():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:879

/*
   Below this are pattern handlers that have not been updated since getModeColors()
*/
void updatePatternDrift() {
  byte driftchance = 16 + currentValueRight[0] * 10;
    36a2:	00 91 05 44 	lds	r16, 0x4405	; 0x804405 <currentValueRight>
    36a6:	8a e0       	ldi	r24, 0x0A	; 10
    36a8:	08 9f       	mul	r16, r24
    36aa:	00 2d       	mov	r16, r0
    36ac:	11 24       	eor	r1, r1
    36ae:	00 5f       	subi	r16, 0xF0	; 240
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:880
  byte randinc = 255 - driftchance;
    36b0:	80 2e       	mov	r8, r16
    36b2:	80 94       	com	r8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:886
  byte randdec = driftchance;
  for (unsigned int i = 0; i < (LENGTH * 3); i++) {
    byte tem = i % 3;
    tem *= 2;
    byte rand = random(255);
    if (rand > (pixels[i] > 32 ? randinc : (randinc + driftchance / 2)) && (pixels[i] < getLeftVal(currentValueLeft[tem + 1]))) {
    36b4:	91 2c       	mov	r9, r1
    36b6:	80 2f       	mov	r24, r16
    36b8:	86 95       	lsr	r24
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	a4 01       	movw	r20, r8
    36be:	48 0f       	add	r20, r24
    36c0:	59 1f       	adc	r21, r25
    36c2:	4e 87       	std	Y+14, r20	; 0x0e
    36c4:	5f 87       	std	Y+15, r21	; 0x0f
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:892
      if (pixels[i] > 128 && pixels[i] < 254) {
        pixels[i] += 2;
      } else {
        pixels[i]++;
      }
    } else if (rand < (pixels[i] > 32 ? randdec : (randdec - driftchance / 2)) && (pixels[i] > getLeftVal(currentValueLeft[tem]))) {
    36c6:	10 e0       	ldi	r17, 0x00	; 0
    36c8:	f8 01       	movw	r30, r16
    36ca:	e8 1b       	sub	r30, r24
    36cc:	f9 0b       	sbc	r31, r25
    36ce:	e8 8b       	std	Y+16, r30	; 0x10
    36d0:	f9 8b       	std	Y+17, r31	; 0x11
    36d2:	4e eb       	ldi	r20, 0xBE	; 190
    36d4:	e4 2e       	mov	r14, r20
    36d6:	44 e4       	ldi	r20, 0x44	; 68
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:882
*/
void updatePatternDrift() {
  byte driftchance = 16 + currentValueRight[0] * 10;
  byte randinc = 255 - driftchance;
  byte randdec = driftchance;
  for (unsigned int i = 0; i < (LENGTH * 3); i++) {
    36d8:	f4 2e       	mov	r15, r20
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:883
    byte tem = i % 3;
    36da:	b1 2c       	mov	r11, r1
    36dc:	a1 2c       	mov	r10, r1
updatePatternDrift():
    36de:	c5 01       	movw	r24, r10
    36e0:	63 e0       	ldi	r22, 0x03	; 3
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:884
    tem *= 2;
    36e2:	70 e0       	ldi	r23, 0x00	; 0
    36e4:	14 d7       	rcall	.+3624   	; 0x450e <__udivmodhi4>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
    36e6:	78 2e       	mov	r7, r24
    36e8:	77 0c       	add	r7, r7
random():
    36ea:	2e d4       	rcall	.+2140   	; 0x3f48 <random>
    36ec:	a2 01       	movw	r20, r4
    36ee:	91 01       	movw	r18, r2
    36f0:	88 d4       	rcall	.+2320   	; 0x4002 <__divmodsi4>
updatePatternDrift():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:886
    byte rand = random(255);
    if (rand > (pixels[i] > 32 ? randinc : (randinc + driftchance / 2)) && (pixels[i] < getLeftVal(currentValueLeft[tem + 1]))) {
    36f2:	c6 2e       	mov	r12, r22
    36f4:	d1 2c       	mov	r13, r1
    36f6:	f7 01       	movw	r30, r14
    36f8:	60 80       	ld	r6, Z
    36fa:	f0 e2       	ldi	r31, 0x20	; 32
    36fc:	f6 15       	cp	r31, r6
    36fe:	a0 f4       	brcc	.+40     	; 0x3728 <nextbyte20+0x3f0>
    3700:	8c 14       	cp	r8, r12
    3702:	9d 04       	cpc	r9, r13
    3704:	ec f4       	brge	.+58     	; 0x3740 <nextbyte20+0x408>
    3706:	e7 2d       	mov	r30, r7
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	ee 5e       	subi	r30, 0xEE	; 238
    370c:	fb 4b       	sbci	r31, 0xBB	; 187
    370e:	80 81       	ld	r24, Z
    3710:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3714:	f7 01       	movw	r30, r14
    3716:	90 81       	ld	r25, Z
    3718:	68 16       	cp	r6, r24
    371a:	70 f4       	brcc	.+28     	; 0x3738 <nextbyte20+0x400>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:887
      if (pixels[i] > 128 && pixels[i] < 254) {
    371c:	8f e7       	ldi	r24, 0x7F	; 127
    371e:	89 0f       	add	r24, r25
    3720:	8d 37       	cpi	r24, 0x7D	; 125
    3722:	10 f1       	brcs	.+68     	; 0x3768 <nextbyte20+0x430>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:890
        pixels[i] += 2;
      } else {
        pixels[i]++;
    3724:	9f 5f       	subi	r25, 0xFF	; 255
    3726:	21 c0       	rjmp	.+66     	; 0x376a <nextbyte20+0x432>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:886
  byte randdec = driftchance;
  for (unsigned int i = 0; i < (LENGTH * 3); i++) {
    byte tem = i % 3;
    tem *= 2;
    byte rand = random(255);
    if (rand > (pixels[i] > 32 ? randinc : (randinc + driftchance / 2)) && (pixels[i] < getLeftVal(currentValueLeft[tem + 1]))) {
    3728:	2e 85       	ldd	r18, Y+14	; 0x0e
    372a:	3f 85       	ldd	r19, Y+15	; 0x0f
    372c:	2c 15       	cp	r18, r12
    372e:	3d 05       	cpc	r19, r13
    3730:	54 f3       	brlt	.-44     	; 0x3706 <nextbyte20+0x3ce>
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:892
      if (pixels[i] > 128 && pixels[i] < 254) {
        pixels[i] += 2;
      } else {
        pixels[i]++;
      }
    } else if (rand < (pixels[i] > 32 ? randdec : (randdec - driftchance / 2)) && (pixels[i] > getLeftVal(currentValueLeft[tem]))) {
    3732:	88 89       	ldd	r24, Y+16	; 0x10
    3734:	99 89       	ldd	r25, Y+17	; 0x11
    3736:	05 c0       	rjmp	.+10     	; 0x3742 <nextbyte20+0x40a>
updatePatternDrift():
    3738:	69 2e       	mov	r6, r25
    373a:	f0 e2       	ldi	r31, 0x20	; 32
    373c:	f9 17       	cp	r31, r25
    373e:	c8 f7       	brcc	.-14     	; 0x3732 <nextbyte20+0x3fa>
main():
    3740:	c8 01       	movw	r24, r16
updatePatternDrift():
    3742:	c8 16       	cp	r12, r24
    3744:	d9 06       	cpc	r13, r25
    3746:	9c f4       	brge	.+38     	; 0x376e <nextbyte20+0x436>
    3748:	e7 2d       	mov	r30, r7
    374a:	f0 e0       	ldi	r31, 0x00	; 0
    374c:	ef 5e       	subi	r30, 0xEF	; 239
    374e:	fb 4b       	sbci	r31, 0xBB	; 187
    3750:	80 81       	ld	r24, Z
    3752:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3756:	86 15       	cp	r24, r6
    3758:	50 f4       	brcc	.+20     	; 0x376e <nextbyte20+0x436>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:893
      if (pixels[i] > 128) {
    375a:	f7 01       	movw	r30, r14
    375c:	80 81       	ld	r24, Z
    375e:	81 38       	cpi	r24, 0x81	; 129
    3760:	98 f0       	brcs	.+38     	; 0x3788 <nextbyte20+0x450>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:894
        pixels[i] -= 2;
    3762:	82 50       	subi	r24, 0x02	; 2
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:896
      } else {
        pixels[i]--;
    3764:	80 83       	st	Z, r24
    3766:	03 c0       	rjmp	.+6      	; 0x376e <nextbyte20+0x436>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:888
    byte tem = i % 3;
    tem *= 2;
    byte rand = random(255);
    if (rand > (pixels[i] > 32 ? randinc : (randinc + driftchance / 2)) && (pixels[i] < getLeftVal(currentValueLeft[tem + 1]))) {
      if (pixels[i] > 128 && pixels[i] < 254) {
        pixels[i] += 2;
    3768:	9e 5f       	subi	r25, 0xFE	; 254
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:890
      } else {
        pixels[i]++;
    376a:	f7 01       	movw	r30, r14
    376c:	90 83       	st	Z, r25
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:882
*/
void updatePatternDrift() {
  byte driftchance = 16 + currentValueRight[0] * 10;
  byte randinc = 255 - driftchance;
  byte randdec = driftchance;
  for (unsigned int i = 0; i < (LENGTH * 3); i++) {
    376e:	ff ef       	ldi	r31, 0xFF	; 255
    3770:	af 1a       	sub	r10, r31
    3772:	bf 0a       	sbc	r11, r31
    3774:	2f ef       	ldi	r18, 0xFF	; 255
    3776:	e2 1a       	sub	r14, r18
    3778:	f2 0a       	sbc	r15, r18
    377a:	38 e5       	ldi	r19, 0x58	; 88
    377c:	a3 16       	cp	r10, r19
    377e:	32 e0       	ldi	r19, 0x02	; 2
    3780:	b3 06       	cpc	r11, r19
    3782:	09 f0       	breq	.+2      	; 0x3786 <nextbyte20+0x44e>
    3784:	ac cf       	rjmp	.-168    	; 0x36de <nextbyte20+0x3a6>
    3786:	6b cd       	rjmp	.-1322   	; 0x325e <main+0x8ea>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:896
      }
    } else if (rand < (pixels[i] > 32 ? randdec : (randdec - driftchance / 2)) && (pixels[i] > getLeftVal(currentValueLeft[tem]))) {
      if (pixels[i] > 128) {
        pixels[i] -= 2;
      } else {
        pixels[i]--;
    3788:	81 50       	subi	r24, 0x01	; 1
    378a:	ec cf       	rjmp	.-40     	; 0x3764 <nextbyte20+0x42c>
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:626
    }
  } else if (currentMode == 1) {
    updatePatternDrift();
    //} else if (currentMode == 2) {
    //updatePatternComets();
  } else if (currentMode == 3) {
    378c:	13 30       	cpi	r17, 0x03	; 3
    378e:	09 f0       	breq	.+2      	; 0x3792 <nextbyte20+0x45a>
    3790:	21 c1       	rjmp	.+578    	; 0x39d4 <nextbyte20+0x69c>
    3792:	3d ea       	ldi	r19, 0xAD	; 173
    3794:	e3 2e       	mov	r14, r19
    3796:	31 e4       	ldi	r19, 0x41	; 65
    3798:	f3 2e       	mov	r15, r19
    379a:	0e eb       	ldi	r16, 0xBE	; 190
    379c:	14 e4       	ldi	r17, 0x44	; 68
updatePatternPulse():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:904
  }
}

void updatePatternPulse() {
  for (int  i = 0; i < (LENGTH * 3) - 2; i += 3) {
    byte max_r = (scratch[i] & 0x7C) >> 2;
    379e:	f7 01       	movw	r30, r14
    37a0:	80 81       	ld	r24, Z
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	9c 01       	movw	r18, r24
    37a6:	35 95       	asr	r19
    37a8:	27 95       	ror	r18
    37aa:	35 95       	asr	r19
    37ac:	27 95       	ror	r18
    37ae:	f2 2f       	mov	r31, r18
    37b0:	ff 71       	andi	r31, 0x1F	; 31
    37b2:	6f 2e       	mov	r6, r31
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:905
    byte max_g = (((scratch[i] & 0x02) << 3) | ((scratch[i + 1] >> 5))); //dont need to mask the low 5 bits here because we're just pushing them off the edge
    37b4:	f7 01       	movw	r30, r14
    37b6:	41 81       	ldd	r20, Z+1	; 0x01
    37b8:	9c 01       	movw	r18, r24
    37ba:	73 e0       	ldi	r23, 0x03	; 3
    37bc:	22 0f       	add	r18, r18
    37be:	33 1f       	adc	r19, r19
    37c0:	7a 95       	dec	r23
    37c2:	e1 f7       	brne	.-8      	; 0x37bc <nextbyte20+0x484>
    37c4:	20 71       	andi	r18, 0x10	; 16
    37c6:	94 2e       	mov	r9, r20
    37c8:	92 94       	swap	r9
    37ca:	96 94       	lsr	r9
    37cc:	a7 e0       	ldi	r26, 0x07	; 7
    37ce:	9a 22       	and	r9, r26
    37d0:	92 2a       	or	r9, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:906
    byte max_b = (scratch[i + 1]) & 0x1F;
    37d2:	4f 71       	andi	r20, 0x1F	; 31
    37d4:	74 2e       	mov	r7, r20
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:907
    byte speed = 1 + (scratch[i + 2] >> 6);
    37d6:	22 81       	ldd	r18, Z+2	; 0x02
    37d8:	82 2e       	mov	r8, r18
    37da:	82 94       	swap	r8
    37dc:	86 94       	lsr	r8
    37de:	86 94       	lsr	r8
    37e0:	b3 e0       	ldi	r27, 0x03	; 3
    37e2:	8b 22       	and	r8, r27
    37e4:	83 94       	inc	r8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:908
    byte bright = scratch[i + 2] & 0x3F;
    37e6:	2f 73       	andi	r18, 0x3F	; 63
    37e8:	a2 2e       	mov	r10, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:909
    byte dir = (scratch[i] >> 7);
    37ea:	88 0f       	add	r24, r24
    37ec:	89 2f       	mov	r24, r25
    37ee:	88 1f       	adc	r24, r24
    37f0:	99 0b       	sbc	r25, r25
    37f2:	b8 2e       	mov	r11, r24
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:910
    if (!(max_r + max_b + max_g)) { // need to consider generating new target
    37f4:	26 2d       	mov	r18, r6
    37f6:	24 0f       	add	r18, r20
    37f8:	33 27       	eor	r19, r19
    37fa:	33 1f       	adc	r19, r19
    37fc:	c9 01       	movw	r24, r18
    37fe:	89 0d       	add	r24, r9
    3800:	91 1d       	adc	r25, r1
    3802:	89 2b       	or	r24, r25
    3804:	09 f0       	breq	.+2      	; 0x3808 <nextbyte20+0x4d0>
    3806:	8f c0       	rjmp	.+286    	; 0x3926 <nextbyte20+0x5ee>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:911
      if (random(0, (currentValueRight[0] + 2) * 4 * pgm_read_byte_near(&maxValueRight[currentMode][1])) < currentValueRight[1]) {
    3808:	80 91 05 44 	lds	r24, 0x4405	; 0x804405 <currentValueRight>
    380c:	e0 91 19 44 	lds	r30, 0x4419	; 0x804419 <currentMode>
    3810:	38 e0       	ldi	r19, 0x08	; 8
    3812:	e3 9f       	mul	r30, r19
    3814:	f0 01       	movw	r30, r0
    3816:	11 24       	eor	r1, r1
    3818:	e8 5d       	subi	r30, 0xD8	; 216
    381a:	f6 4f       	sbci	r31, 0xF6	; 246
    381c:	e4 91       	lpm	r30, Z
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	02 96       	adiw	r24, 0x02	; 2
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	88 0f       	add	r24, r24
    3828:	99 1f       	adc	r25, r25
    382a:	e8 9f       	mul	r30, r24
    382c:	90 01       	movw	r18, r0
    382e:	e9 9f       	mul	r30, r25
    3830:	30 0d       	add	r19, r0
    3832:	11 24       	eor	r1, r1
    3834:	03 2e       	mov	r0, r19
    3836:	00 0c       	add	r0, r0
    3838:	44 0b       	sbc	r20, r20
    383a:	55 0b       	sbc	r21, r21
    383c:	60 e0       	ldi	r22, 0x00	; 0
    383e:	70 e0       	ldi	r23, 0x00	; 0
    3840:	cb 01       	movw	r24, r22
    3842:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <random(long, long)>
    3846:	20 91 06 44 	lds	r18, 0x4406	; 0x804406 <currentValueRight+0x1>
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	50 e0       	ldi	r21, 0x00	; 0
    384e:	40 e0       	ldi	r20, 0x00	; 0
    3850:	62 17       	cp	r22, r18
    3852:	73 07       	cpc	r23, r19
    3854:	84 07       	cpc	r24, r20
    3856:	95 07       	cpc	r25, r21
    3858:	84 f5       	brge	.+96     	; 0x38ba <nextbyte20+0x582>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:912
        max_r = random(currentValueLeft[0], currentValueLeft[1]);
    385a:	20 91 12 44 	lds	r18, 0x4412	; 0x804412 <currentValueLeft+0x1>
    385e:	60 91 11 44 	lds	r22, 0x4411	; 0x804411 <currentValueLeft>
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	50 e0       	ldi	r21, 0x00	; 0
    3866:	40 e0       	ldi	r20, 0x00	; 0
    3868:	70 e0       	ldi	r23, 0x00	; 0
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	80 e0       	ldi	r24, 0x00	; 0
    386e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <random(long, long)>
    3872:	66 2e       	mov	r6, r22
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:913
        max_g = random(currentValueLeft[2], currentValueLeft[3]);
    3874:	20 91 14 44 	lds	r18, 0x4414	; 0x804414 <currentValueLeft+0x3>
    3878:	60 91 13 44 	lds	r22, 0x4413	; 0x804413 <currentValueLeft+0x2>
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	50 e0       	ldi	r21, 0x00	; 0
    3880:	40 e0       	ldi	r20, 0x00	; 0
    3882:	70 e0       	ldi	r23, 0x00	; 0
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <random(long, long)>
    388c:	96 2e       	mov	r9, r22
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:914
        max_b = random(currentValueLeft[4], currentValueLeft[5]);
    388e:	20 91 16 44 	lds	r18, 0x4416	; 0x804416 <currentValueLeft+0x5>
    3892:	60 91 15 44 	lds	r22, 0x4415	; 0x804415 <currentValueLeft+0x4>
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	50 e0       	ldi	r21, 0x00	; 0
    389a:	40 e0       	ldi	r20, 0x00	; 0
    389c:	70 e0       	ldi	r23, 0x00	; 0
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <random(long, long)>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
    38a6:	76 2e       	mov	r7, r22
random():
    38a8:	4f d3       	rcall	.+1694   	; 0x3f48 <random>
    38aa:	23 e0       	ldi	r18, 0x03	; 3
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	40 e0       	ldi	r20, 0x00	; 0
    38b0:	50 e0       	ldi	r21, 0x00	; 0
    38b2:	a7 d3       	rcall	.+1870   	; 0x4002 <__divmodsi4>
updatePatternPulse():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:915
        speed = random(0, 3);
    38b4:	86 2e       	mov	r8, r22
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:917
        bright = 0;
        dir = 0;
    38b6:	b1 2c       	mov	r11, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:916
      if (random(0, (currentValueRight[0] + 2) * 4 * pgm_read_byte_near(&maxValueRight[currentMode][1])) < currentValueRight[1]) {
        max_r = random(currentValueLeft[0], currentValueLeft[1]);
        max_g = random(currentValueLeft[2], currentValueLeft[3]);
        max_b = random(currentValueLeft[4], currentValueLeft[5]);
        speed = random(0, 3);
        bright = 0;
    38b8:	a1 2c       	mov	r10, r1
updatePatternPulse():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:919
        dir = 0;
      }
      pixels[i] = 0;
    38ba:	f8 01       	movw	r30, r16
    38bc:	10 82       	st	Z, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:920
      pixels[i + 1] = 0;
    38be:	11 82       	std	Z+1, r1	; 0x01
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:921
      pixels[i + 2] = 0;
    38c0:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:952
            }
          }
        }
      }
    }
    scratch[i] = (dir << 7) | (max_r << 2) | (max_g >> 3);
    38c2:	49 2d       	mov	r20, r9
    38c4:	50 e0       	ldi	r21, 0x00	; 0
    38c6:	20 e8       	ldi	r18, 0x80	; 128
    38c8:	b2 9e       	mul	r11, r18
    38ca:	c0 01       	movw	r24, r0
    38cc:	11 24       	eor	r1, r1
    38ce:	64 e0       	ldi	r22, 0x04	; 4
    38d0:	66 9e       	mul	r6, r22
    38d2:	90 01       	movw	r18, r0
    38d4:	11 24       	eor	r1, r1
    38d6:	82 2b       	or	r24, r18
    38d8:	9a 01       	movw	r18, r20
    38da:	93 e0       	ldi	r25, 0x03	; 3
    38dc:	35 95       	asr	r19
    38de:	27 95       	ror	r18
    38e0:	9a 95       	dec	r25
    38e2:	e1 f7       	brne	.-8      	; 0x38dc <nextbyte20+0x5a4>
    38e4:	82 2b       	or	r24, r18
    38e6:	f7 01       	movw	r30, r14
    38e8:	80 83       	st	Z, r24
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:953
    scratch[i + 1] = (max_g << 5) | max_b;
    38ea:	25 e0       	ldi	r18, 0x05	; 5
    38ec:	44 0f       	add	r20, r20
    38ee:	55 1f       	adc	r21, r21
    38f0:	2a 95       	dec	r18
    38f2:	e1 f7       	brne	.-8      	; 0x38ec <nextbyte20+0x5b4>
    38f4:	74 2a       	or	r7, r20
    38f6:	71 82       	std	Z+1, r7	; 0x01
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:954
    scratch[i + 2] = ((speed - 1) << 6) | bright;
    38f8:	28 2d       	mov	r18, r8
    38fa:	21 50       	subi	r18, 0x01	; 1
    38fc:	33 0b       	sbc	r19, r19
    38fe:	49 01       	movw	r8, r18
    3900:	36 e0       	ldi	r19, 0x06	; 6
    3902:	88 0c       	add	r8, r8
    3904:	99 1c       	adc	r9, r9
    3906:	3a 95       	dec	r19
    3908:	e1 f7       	brne	.-8      	; 0x3902 <nextbyte20+0x5ca>
    390a:	a8 28       	or	r10, r8
    390c:	a2 82       	std	Z+2, r10	; 0x02
    390e:	33 e0       	ldi	r19, 0x03	; 3
    3910:	e3 0e       	add	r14, r19
    3912:	f1 1c       	adc	r15, r1
    3914:	0d 5f       	subi	r16, 0xFD	; 253
    3916:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:903
    }
  }
}

void updatePatternPulse() {
  for (int  i = 0; i < (LENGTH * 3) - 2; i += 3) {
    3918:	45 e0       	ldi	r20, 0x05	; 5
    391a:	54 e4       	ldi	r21, 0x44	; 68
    391c:	4e 15       	cp	r20, r14
    391e:	5f 05       	cpc	r21, r15
    3920:	09 f0       	breq	.+2      	; 0x3924 <nextbyte20+0x5ec>
    3922:	3d cf       	rjmp	.-390    	; 0x379e <nextbyte20+0x466>
    3924:	9c cc       	rjmp	.-1736   	; 0x325e <main+0x8ea>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:923
      }
      pixels[i] = 0;
      pixels[i + 1] = 0;
      pixels[i + 2] = 0;
    } else {
      if (!(frameNumber % (speed))) {
    3926:	28 2d       	mov	r18, r8
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	50 e0       	ldi	r21, 0x00	; 0
    392c:	40 e0       	ldi	r20, 0x00	; 0
    392e:	60 91 0d 44 	lds	r22, 0x440D	; 0x80440d <frameNumber>
    3932:	70 91 0e 44 	lds	r23, 0x440E	; 0x80440e <frameNumber+0x1>
    3936:	80 91 0f 44 	lds	r24, 0x440F	; 0x80440f <frameNumber+0x2>
    393a:	90 91 10 44 	lds	r25, 0x4410	; 0x804410 <frameNumber+0x3>
    393e:	8d d3       	rcall	.+1818   	; 0x405a <__udivmodsi4>
    3940:	67 2b       	or	r22, r23
    3942:	68 2b       	or	r22, r24
    3944:	69 2b       	or	r22, r25
    3946:	09 f0       	breq	.+2      	; 0x394a <nextbyte20+0x612>
    3948:	bc cf       	rjmp	.-136    	; 0x38c2 <nextbyte20+0x58a>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:925

        if (dir && !bright) {
    394a:	bb 20       	and	r11, r11
    394c:	59 f0       	breq	.+22     	; 0x3964 <nextbyte20+0x62c>
    394e:	a1 10       	cpse	r10, r1
    3950:	09 c0       	rjmp	.+18     	; 0x3964 <nextbyte20+0x62c>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:927
          dir = 0;
          pixels[i] = 0;
    3952:	f8 01       	movw	r30, r16
    3954:	10 82       	st	Z, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:928
          pixels[i + 1] = 0;
    3956:	11 82       	std	Z+1, r1	; 0x01
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:929
          pixels[i + 2] = 0;
    3958:	12 82       	std	Z+2, r1	; 0x02
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:926
      pixels[i + 2] = 0;
    } else {
      if (!(frameNumber % (speed))) {

        if (dir && !bright) {
          dir = 0;
    395a:	b1 2c       	mov	r11, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:932
          pixels[i] = 0;
          pixels[i + 1] = 0;
          pixels[i + 2] = 0;
          max_r = 0;
          max_g = 0;
          max_b = 0;
    395c:	71 2c       	mov	r7, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:931
          dir = 0;
          pixels[i] = 0;
          pixels[i + 1] = 0;
          pixels[i + 2] = 0;
          max_r = 0;
          max_g = 0;
    395e:	91 2c       	mov	r9, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:930
        if (dir && !bright) {
          dir = 0;
          pixels[i] = 0;
          pixels[i + 1] = 0;
          pixels[i + 2] = 0;
          max_r = 0;
    3960:	61 2c       	mov	r6, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:934
          max_g = 0;
          max_b = 0;
        } else {
          byte nbright = pgm_read_byte_near(&pulseBrightnessTable[bright]);
    3962:	af cf       	rjmp	.-162    	; 0x38c2 <nextbyte20+0x58a>
updatePatternPulse():
    3964:	ea 2d       	mov	r30, r10
    3966:	f0 e0       	ldi	r31, 0x00	; 0
    3968:	e1 58       	subi	r30, 0x81	; 129
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:936
          //byte nbright = bright << 2;
          pixels[i] = map(nbright, 0, 255, 0, getLeftVal(max_r));
    396a:	f6 4f       	sbci	r31, 0xF6	; 246
    396c:	c4 90       	lpm	r12, Z
    396e:	86 2d       	mov	r24, r6
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3970:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
map():
    3974:	d1 2c       	mov	r13, r1
    3976:	28 2f       	mov	r18, r24
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	d6 01       	movw	r26, r12
    397c:	90 d3       	rcall	.+1824   	; 0x409e <__umulhisi3>
    397e:	a2 01       	movw	r20, r4
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:936
    3980:	91 01       	movw	r18, r2
    3982:	3f d3       	rcall	.+1662   	; 0x4002 <__divmodsi4>
updatePatternPulse():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:937
          pixels[i + 1] = map(nbright, 0, 255, 0, getLeftVal(max_g));
    3984:	f8 01       	movw	r30, r16
    3986:	20 83       	st	Z, r18
    3988:	89 2d       	mov	r24, r9
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    398a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
map():
    398e:	96 01       	movw	r18, r12
    3990:	a8 2f       	mov	r26, r24
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	84 d3       	rcall	.+1800   	; 0x409e <__umulhisi3>
    3996:	a2 01       	movw	r20, r4
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:937
    3998:	91 01       	movw	r18, r2
    399a:	33 d3       	rcall	.+1638   	; 0x4002 <__divmodsi4>
updatePatternPulse():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:938
          pixels[i + 2] = map(nbright, 0, 255, 0, getLeftVal(max_b));
    399c:	f8 01       	movw	r30, r16
    399e:	21 83       	std	Z+1, r18	; 0x01
    39a0:	87 2d       	mov	r24, r7
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    39a2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
map():
    39a6:	96 01       	movw	r18, r12
    39a8:	a8 2f       	mov	r26, r24
    39aa:	b0 e0       	ldi	r27, 0x00	; 0
    39ac:	78 d3       	rcall	.+1776   	; 0x409e <__umulhisi3>
    39ae:	a2 01       	movw	r20, r4
    39b0:	91 01       	movw	r18, r2
    39b2:	27 d3       	rcall	.+1614   	; 0x4002 <__divmodsi4>
updatePatternPulse():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:938
    39b4:	f8 01       	movw	r30, r16
    39b6:	22 83       	std	Z+2, r18	; 0x02
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:939
          if (dir) {
    39b8:	bb 20       	and	r11, r11
    39ba:	11 f0       	breq	.+4      	; 0x39c0 <nextbyte20+0x688>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:940
            bright--;
    39bc:	aa 94       	dec	r10
    39be:	81 cf       	rjmp	.-254    	; 0x38c2 <nextbyte20+0x58a>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:942
          } else {
            if (bright == 63) {
    39c0:	ff e3       	ldi	r31, 0x3F	; 63
    39c2:	af 16       	cp	r10, r31
    39c4:	11 f0       	breq	.+4      	; 0x39ca <nextbyte20+0x692>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:946
              bright--;
              dir = 1;
            } else {
              bright++;
    39c6:	a3 94       	inc	r10
    39c8:	7c cf       	rjmp	.-264    	; 0x38c2 <nextbyte20+0x58a>
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:944
          if (dir) {
            bright--;
          } else {
            if (bright == 63) {
              bright--;
              dir = 1;
    39ca:	bb 24       	eor	r11, r11
    39cc:	b3 94       	inc	r11
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:943
          pixels[i + 2] = map(nbright, 0, 255, 0, getLeftVal(max_b));
          if (dir) {
            bright--;
          } else {
            if (bright == 63) {
              bright--;
    39ce:	4e e3       	ldi	r20, 0x3E	; 62
    39d0:	a4 2e       	mov	r10, r20
    39d2:	77 cf       	rjmp	.-274    	; 0x38c2 <nextbyte20+0x58a>
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:628
    updatePatternDrift();
    //} else if (currentMode == 2) {
    //updatePatternComets();
  } else if (currentMode == 3) {
    updatePatternPulse();
  } else if (currentMode == 4) {
    39d4:	14 30       	cpi	r17, 0x04	; 4
    39d6:	19 f4       	brne	.+6      	; 0x39de <nextbyte20+0x6a6>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:629
    updatePatternWave(); //rainbow is just a subset of wave
    39d8:	0e 94 82 10 	call	0x2104	; 0x2104 <updatePatternWave()>
    39dc:	40 cc       	rjmp	.-1920   	; 0x325e <main+0x8ea>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:630
  } else if (currentMode == 5) {
    39de:	15 30       	cpi	r17, 0x05	; 5
    39e0:	09 f0       	breq	.+2      	; 0x39e4 <nextbyte20+0x6ac>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:651
  frameNumber++;
}

void updatePatternDots() {
  byte r, g, b;
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    39e2:	5d c0       	rjmp	.+186    	; 0x3a9e <nextbyte20+0x766>
updatePatternDots():
    39e4:	80 91 06 44 	lds	r24, 0x4406	; 0x804406 <currentValueRight+0x1>
    39e8:	2d e0       	ldi	r18, 0x0D	; 13
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	28 1b       	sub	r18, r24
    39ee:	31 09       	sbc	r19, r1
    39f0:	03 2e       	mov	r0, r19
    39f2:	00 0c       	add	r0, r0
    39f4:	44 0b       	sbc	r20, r20
    39f6:	55 0b       	sbc	r21, r21
    39f8:	60 91 0d 44 	lds	r22, 0x440D	; 0x80440d <frameNumber>
    39fc:	70 91 0e 44 	lds	r23, 0x440E	; 0x80440e <frameNumber+0x1>
    3a00:	80 91 0f 44 	lds	r24, 0x440F	; 0x80440f <frameNumber+0x2>
    3a04:	90 91 10 44 	lds	r25, 0x4410	; 0x804410 <frameNumber+0x3>
    3a08:	28 d3       	rcall	.+1616   	; 0x405a <__udivmodsi4>
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:656
    r = random(getLeftVal(currentValueLeft[0]), getLeftVal(currentValueLeft[1]));
    g = random(getLeftVal(currentValueLeft[2]), getLeftVal(currentValueLeft[3]));
    b = random(getLeftVal(currentValueLeft[4]), getLeftVal(currentValueLeft[5]));
  } else {
    r = 0; g = 0; b = 0;
    3a0a:	40 e0       	ldi	r20, 0x00	; 0
    3a0c:	f1 2c       	mov	r15, r1
    3a0e:	00 e0       	ldi	r16, 0x00	; 0
updatePatternDots():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:651
  frameNumber++;
}

void updatePatternDots() {
  byte r, g, b;
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    3a10:	67 2b       	or	r22, r23
    3a12:	68 2b       	or	r22, r24
    3a14:	69 2b       	or	r22, r25
    3a16:	e1 f5       	brne	.+120    	; 0x3a90 <nextbyte20+0x758>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:652
    r = random(getLeftVal(currentValueLeft[0]), getLeftVal(currentValueLeft[1]));
    3a18:	80 91 12 44 	lds	r24, 0x4412	; 0x804412 <currentValueLeft+0x1>
    3a1c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3a20:	18 2f       	mov	r17, r24
    3a22:	80 91 11 44 	lds	r24, 0x4411	; 0x804411 <currentValueLeft>
    3a26:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3a2a:	21 2f       	mov	r18, r17
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	50 e0       	ldi	r21, 0x00	; 0
    3a30:	40 e0       	ldi	r20, 0x00	; 0
    3a32:	68 2f       	mov	r22, r24
    3a34:	70 e0       	ldi	r23, 0x00	; 0
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <random(long, long)>
    3a3e:	06 2f       	mov	r16, r22
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:653
    g = random(getLeftVal(currentValueLeft[2]), getLeftVal(currentValueLeft[3]));
    3a40:	80 91 14 44 	lds	r24, 0x4414	; 0x804414 <currentValueLeft+0x3>
    3a44:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3a48:	18 2f       	mov	r17, r24
    3a4a:	80 91 13 44 	lds	r24, 0x4413	; 0x804413 <currentValueLeft+0x2>
    3a4e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3a52:	21 2f       	mov	r18, r17
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	50 e0       	ldi	r21, 0x00	; 0
    3a58:	40 e0       	ldi	r20, 0x00	; 0
    3a5a:	68 2f       	mov	r22, r24
    3a5c:	70 e0       	ldi	r23, 0x00	; 0
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <random(long, long)>
    3a66:	f6 2e       	mov	r15, r22
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:654
    b = random(getLeftVal(currentValueLeft[4]), getLeftVal(currentValueLeft[5]));
    3a68:	80 91 16 44 	lds	r24, 0x4416	; 0x804416 <currentValueLeft+0x5>
    3a6c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3a70:	18 2f       	mov	r17, r24
    3a72:	80 91 15 44 	lds	r24, 0x4415	; 0x804415 <currentValueLeft+0x4>
    3a76:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3a7a:	21 2f       	mov	r18, r17
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	50 e0       	ldi	r21, 0x00	; 0
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	68 2f       	mov	r22, r24
    3a84:	70 e0       	ldi	r23, 0x00	; 0
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <random(long, long)>
    3a8e:	46 2f       	mov	r20, r22
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:658
  } else {
    r = 0; g = 0; b = 0;
  }
  pushPixel(r, g, b, currentValueRight[2]);
    3a90:	20 91 07 44 	lds	r18, 0x4407	; 0x804407 <currentValueRight+0x2>
    3a94:	6f 2d       	mov	r22, r15
    3a96:	80 2f       	mov	r24, r16
updatePatternDots2():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:668
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    getModeColors(&r, &g, &b, random(0, pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getTransitionFrames() + getDwellFrames())));
  } else {
    r = 0; g = 0; b = 0;
  }
  pushPixel(r, g, b, currentValueRight[2]);
    3a98:	0e 94 b8 08 	call	0x1170	; 0x1170 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)>
    3a9c:	e0 cb       	rjmp	.-2112   	; 0x325e <main+0x8ea>
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:632
    updatePatternPulse();
  } else if (currentMode == 4) {
    updatePatternWave(); //rainbow is just a subset of wave
  } else if (currentMode == 5) {
    updatePatternDots();
  } else if (currentMode == 6) {
    3a9e:	16 30       	cpi	r17, 0x06	; 6
    3aa0:	09 f0       	breq	.+2      	; 0x3aa4 <nextbyte20+0x76c>
    3aa2:	7f c0       	rjmp	.+254    	; 0x3ba2 <nextbyte20+0x86a>
updatePatternFade():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:673
  pushPixel(r, g, b, currentValueRight[2]);
}

void updatePatternFade() {
  static byte bright = 0;
  if (bright & 128) {
    3aa4:	80 91 a9 41 	lds	r24, 0x41A9	; 0x8041a9 <updatePatternFade()::bright>
    3aa8:	87 ff       	sbrs	r24, 7
    3aaa:	73 c0       	rjmp	.+230    	; 0x3b92 <nextbyte20+0x85a>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:674
    if (bright & 63) {
    3aac:	98 2f       	mov	r25, r24
    3aae:	9f 73       	andi	r25, 0x3F	; 63
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:675
      bright--;
    3ab0:	81 50       	subi	r24, 0x01	; 1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:674
}

void updatePatternFade() {
  static byte bright = 0;
  if (bright & 128) {
    if (bright & 63) {
    3ab2:	91 11       	cpse	r25, r1
    3ab4:	71 c0       	rjmp	.+226    	; 0x3b98 <nextbyte20+0x860>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:677
      bright--;
    } else {
      bright = 0;
    3ab6:	10 92 a9 41 	sts	0x41A9, r1	; 0x8041a9 <updatePatternFade()::bright>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:686
      bright = 0xBF;
    } else {
      bright++;
    }
  }
  byte nbright = pgm_read_byte_near(&pulseBrightnessTable[63 & bright]);
    3aba:	e0 91 a9 41 	lds	r30, 0x41A9	; 0x8041a9 <updatePatternFade()::bright>
    3abe:	ef 73       	andi	r30, 0x3F	; 63
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	e1 58       	subi	r30, 0x81	; 129
    3ac4:	f6 4f       	sbci	r31, 0xF6	; 246
    3ac6:	c4 90       	lpm	r12, Z
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:687
  byte r = map(nbright, 0, 255, getLeftVal(currentValueLeft[0]), getLeftVal(currentValueLeft[3]));
    3ac8:	80 91 14 44 	lds	r24, 0x4414	; 0x804414 <currentValueLeft+0x3>
    3acc:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3ad0:	18 2f       	mov	r17, r24
    3ad2:	80 91 11 44 	lds	r24, 0x4411	; 0x804411 <currentValueLeft>
    3ad6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3ada:	88 2e       	mov	r8, r24
    3adc:	91 2c       	mov	r9, r1
    3ade:	b1 2c       	mov	r11, r1
    3ae0:	a1 2c       	mov	r10, r1
    3ae2:	d1 2c       	mov	r13, r1
    3ae4:	f1 2c       	mov	r15, r1
    3ae6:	e1 2c       	mov	r14, r1
    3ae8:	21 2f       	mov	r18, r17
    3aea:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3aec:	50 e0       	ldi	r21, 0x00	; 0
    3aee:	40 e0       	ldi	r20, 0x00	; 0
map():
    3af0:	28 19       	sub	r18, r8
    3af2:	39 09       	sbc	r19, r9
    3af4:	4a 09       	sbc	r20, r10
    3af6:	5b 09       	sbc	r21, r11
    3af8:	c7 01       	movw	r24, r14
    3afa:	b6 01       	movw	r22, r12
    3afc:	f9 d4       	rcall	.+2546   	; 0x44f0 <__mulsi3>
    3afe:	a2 01       	movw	r20, r4
    3b00:	91 01       	movw	r18, r2
    3b02:	7f d2       	rcall	.+1278   	; 0x4002 <__divmodsi4>
updatePatternFade():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:687
    3b04:	02 2f       	mov	r16, r18
    3b06:	08 0d       	add	r16, r8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:688
  byte g = map(nbright, 0, 255, getLeftVal(currentValueLeft[1]), getLeftVal(currentValueLeft[4]));
    3b08:	80 91 15 44 	lds	r24, 0x4415	; 0x804415 <currentValueLeft+0x4>
    3b0c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3b10:	18 2f       	mov	r17, r24
    3b12:	80 91 12 44 	lds	r24, 0x4412	; 0x804412 <currentValueLeft+0x1>
    3b16:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3b1a:	88 2e       	mov	r8, r24
    3b1c:	91 2c       	mov	r9, r1
    3b1e:	b1 2c       	mov	r11, r1
    3b20:	a1 2c       	mov	r10, r1
    3b22:	21 2f       	mov	r18, r17
    3b24:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3b26:	50 e0       	ldi	r21, 0x00	; 0
    3b28:	40 e0       	ldi	r20, 0x00	; 0
map():
    3b2a:	28 19       	sub	r18, r8
    3b2c:	39 09       	sbc	r19, r9
    3b2e:	4a 09       	sbc	r20, r10
    3b30:	5b 09       	sbc	r21, r11
    3b32:	c7 01       	movw	r24, r14
    3b34:	b6 01       	movw	r22, r12
    3b36:	dc d4       	rcall	.+2488   	; 0x44f0 <__mulsi3>
    3b38:	a2 01       	movw	r20, r4
    3b3a:	91 01       	movw	r18, r2
    3b3c:	62 d2       	rcall	.+1220   	; 0x4002 <__divmodsi4>
updatePatternFade():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:688
    3b3e:	72 2e       	mov	r7, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:689
  byte b = map(nbright, 0, 255, getLeftVal(currentValueLeft[2]), getLeftVal(currentValueLeft[5]));
    3b40:	78 0c       	add	r7, r8
    3b42:	80 91 16 44 	lds	r24, 0x4416	; 0x804416 <currentValueLeft+0x5>
    3b46:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3b4a:	18 2f       	mov	r17, r24
    3b4c:	80 91 13 44 	lds	r24, 0x4413	; 0x804413 <currentValueLeft+0x2>
    3b50:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <getLeftVal(unsigned char)>
    3b54:	88 2e       	mov	r8, r24
    3b56:	91 2c       	mov	r9, r1
    3b58:	b1 2c       	mov	r11, r1
    3b5a:	a1 2c       	mov	r10, r1
    3b5c:	21 2f       	mov	r18, r17
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3b60:	50 e0       	ldi	r21, 0x00	; 0
    3b62:	40 e0       	ldi	r20, 0x00	; 0
map():
    3b64:	28 19       	sub	r18, r8
    3b66:	39 09       	sbc	r19, r9
    3b68:	4a 09       	sbc	r20, r10
    3b6a:	5b 09       	sbc	r21, r11
    3b6c:	c7 01       	movw	r24, r14
    3b6e:	b6 01       	movw	r22, r12
    3b70:	bf d4       	rcall	.+2430   	; 0x44f0 <__mulsi3>
    3b72:	a2 01       	movw	r20, r4
    3b74:	91 01       	movw	r18, r2
    3b76:	45 d2       	rcall	.+1162   	; 0x4002 <__divmodsi4>
updatePatternFade():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:689
    3b78:	82 0e       	add	r8, r18
    3b7a:	ee eb       	ldi	r30, 0xBE	; 190
    3b7c:	f4 e4       	ldi	r31, 0x44	; 68
    3b7e:	86 e1       	ldi	r24, 0x16	; 22
    3b80:	97 e4       	ldi	r25, 0x47	; 71
setAll():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:709
}


void setAll(byte r, byte g, byte b) {
  for (unsigned int i = 0; i < ((LENGTH) * 3); i += 3) {
    pixels [i] = r;
    3b82:	00 83       	st	Z, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:710
    pixels[i + 1] = g;
    3b84:	71 82       	std	Z+1, r7	; 0x01
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:711
    pixels[i + 2] = b;
    3b86:	82 82       	std	Z+2, r8	; 0x02
    3b88:	33 96       	adiw	r30, 0x03	; 3
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:708
  pushPixel(r, g, b, currentValueRight[currentMode == 4 ? 2 : 3]);
}


void setAll(byte r, byte g, byte b) {
  for (unsigned int i = 0; i < ((LENGTH) * 3); i += 3) {
    3b8a:	8e 17       	cp	r24, r30
    3b8c:	9f 07       	cpc	r25, r31
    3b8e:	c9 f7       	brne	.-14     	; 0x3b82 <nextbyte20+0x84a>
    3b90:	66 cb       	rjmp	.-2356   	; 0x325e <main+0x8ea>
updatePatternFade():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:680
      bright--;
    } else {
      bright = 0;
    }
  } else {
    if (bright >= 63) {
    3b92:	8f 33       	cpi	r24, 0x3F	; 63
    3b94:	20 f0       	brcs	.+8      	; 0x3b9e <nextbyte20+0x866>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:681
      bright = 0xBF;
    3b96:	8f eb       	ldi	r24, 0xBF	; 191
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:683
    } else {
      bright++;
    3b98:	80 93 a9 41 	sts	0x41A9, r24	; 0x8041a9 <updatePatternFade()::bright>
    3b9c:	8e cf       	rjmp	.-228    	; 0x3aba <nextbyte20+0x782>
    3b9e:	8f 5f       	subi	r24, 0xFF	; 255
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:635
  } else if (currentMode == 5) {
    updatePatternDots();
  } else if (currentMode == 6) {
    updatePatternFade();

  } else if (currentMode == 7) {
    3ba0:	fb cf       	rjmp	.-10     	; 0x3b98 <nextbyte20+0x860>
updatePattern():
    3ba2:	17 30       	cpi	r17, 0x07	; 7
    3ba4:	09 f4       	brne	.+2      	; 0x3ba8 <nextbyte20+0x870>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:637
    updatePatternWave();
  } else if (currentMode == 8) {
    3ba6:	18 cf       	rjmp	.-464    	; 0x39d8 <nextbyte20+0x6a0>
    3ba8:	18 30       	cpi	r17, 0x08	; 8
    3baa:	09 f0       	breq	.+2      	; 0x3bae <nextbyte20+0x876>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:663
  pushPixel(r, g, b, currentValueRight[2]);
}

void updatePatternDots2() {
  static byte r, g, b;
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    3bac:	4b c0       	rjmp	.+150    	; 0x3c44 <nextbyte20+0x90c>
updatePatternDots2():
    3bae:	80 91 06 44 	lds	r24, 0x4406	; 0x804406 <currentValueRight+0x1>
    3bb2:	2d e0       	ldi	r18, 0x0D	; 13
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	28 1b       	sub	r18, r24
    3bb8:	31 09       	sbc	r19, r1
    3bba:	03 2e       	mov	r0, r19
    3bbc:	00 0c       	add	r0, r0
    3bbe:	44 0b       	sbc	r20, r20
    3bc0:	55 0b       	sbc	r21, r21
    3bc2:	60 91 0d 44 	lds	r22, 0x440D	; 0x80440d <frameNumber>
    3bc6:	70 91 0e 44 	lds	r23, 0x440E	; 0x80440e <frameNumber+0x1>
    3bca:	80 91 0f 44 	lds	r24, 0x440F	; 0x80440f <frameNumber+0x2>
    3bce:	90 91 10 44 	lds	r25, 0x4410	; 0x804410 <frameNumber+0x3>
    3bd2:	43 d2       	rcall	.+1158   	; 0x405a <__udivmodsi4>
    3bd4:	67 2b       	or	r22, r23
    3bd6:	68 2b       	or	r22, r24
    3bd8:	69 2b       	or	r22, r25
    3bda:	69 f5       	brne	.+90     	; 0x3c36 <nextbyte20+0x8fe>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:664
    getModeColors(&r, &g, &b, random(0, pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getTransitionFrames() + getDwellFrames())));
    3bdc:	0e 94 a7 07 	call	0xf4e	; 0xf4e <getPalleteNumber()>
    3be0:	e8 2f       	mov	r30, r24
    3be2:	f0 e0       	ldi	r31, 0x00	; 0
    3be4:	e1 54       	subi	r30, 0x41	; 65
    3be6:	f6 4f       	sbci	r31, 0xF6	; 246
    3be8:	f4 90       	lpm	r15, Z
    3bea:	0e 94 b0 07 	call	0xf60	; 0xf60 <getTransitionFrames()>
    3bee:	8c 01       	movw	r16, r24
    3bf0:	0e 94 c8 07 	call	0xf90	; 0xf90 <getDwellFrames()>
    3bf4:	80 0f       	add	r24, r16
    3bf6:	91 1f       	adc	r25, r17
    3bf8:	f8 9e       	mul	r15, r24
    3bfa:	90 01       	movw	r18, r0
    3bfc:	f9 9e       	mul	r15, r25
    3bfe:	30 0d       	add	r19, r0
    3c00:	11 24       	eor	r1, r1
    3c02:	50 e0       	ldi	r21, 0x00	; 0
    3c04:	40 e0       	ldi	r20, 0x00	; 0
    3c06:	60 e0       	ldi	r22, 0x00	; 0
    3c08:	70 e0       	ldi	r23, 0x00	; 0
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <random(long, long)>
    3c10:	8b 01       	movw	r16, r22
    3c12:	9c 01       	movw	r18, r24
    3c14:	4a ea       	ldi	r20, 0xAA	; 170
    3c16:	51 e4       	ldi	r21, 0x41	; 65
    3c18:	6b ea       	ldi	r22, 0xAB	; 171
    3c1a:	71 e4       	ldi	r23, 0x41	; 65
    3c1c:	8c ea       	ldi	r24, 0xAC	; 172
    3c1e:	91 e4       	ldi	r25, 0x41	; 65
    3c20:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:668
  } else {
    r = 0; g = 0; b = 0;
  }
  pushPixel(r, g, b, currentValueRight[2]);
    3c24:	20 91 07 44 	lds	r18, 0x4407	; 0x804407 <currentValueRight+0x2>
    3c28:	40 91 aa 41 	lds	r20, 0x41AA	; 0x8041aa <updatePatternDots2()::b>
    3c2c:	60 91 ab 41 	lds	r22, 0x41AB	; 0x8041ab <updatePatternDots2()::g>
    3c30:	80 91 ac 41 	lds	r24, 0x41AC	; 0x8041ac <updatePatternDots2()::r>
    3c34:	31 cf       	rjmp	.-414    	; 0x3a98 <nextbyte20+0x760>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:666
void updatePatternDots2() {
  static byte r, g, b;
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    getModeColors(&r, &g, &b, random(0, pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getTransitionFrames() + getDwellFrames())));
  } else {
    r = 0; g = 0; b = 0;
    3c36:	10 92 ac 41 	sts	0x41AC, r1	; 0x8041ac <updatePatternDots2()::r>
    3c3a:	10 92 ab 41 	sts	0x41AB, r1	; 0x8041ab <updatePatternDots2()::g>
    3c3e:	10 92 aa 41 	sts	0x41AA, r1	; 0x8041aa <updatePatternDots2()::b>
    3c42:	f0 cf       	rjmp	.-32     	; 0x3c24 <nextbyte20+0x8ec>
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:639

  } else if (currentMode == 7) {
    updatePatternWave();
  } else if (currentMode == 8) {
    updatePatternDots2();
  } else if (currentMode == 9) {
    3c44:	19 30       	cpi	r17, 0x09	; 9
    3c46:	09 f5       	brne	.+66     	; 0x3c8a <nextbyte20+0x952>
updatePatternFade2():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:695
  setAll(r, g, b);
}

void updatePatternFade2() {
  byte r, g, b;
  getModeColors(&r, &g, &b, frameNumber);
    3c48:	00 91 0d 44 	lds	r16, 0x440D	; 0x80440d <frameNumber>
    3c4c:	10 91 0e 44 	lds	r17, 0x440E	; 0x80440e <frameNumber+0x1>
    3c50:	20 91 0f 44 	lds	r18, 0x440F	; 0x80440f <frameNumber+0x2>
    3c54:	30 91 10 44 	lds	r19, 0x4410	; 0x804410 <frameNumber+0x3>
    3c58:	ae 01       	movw	r20, r28
    3c5a:	4d 5f       	subi	r20, 0xFD	; 253
    3c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c5e:	be 01       	movw	r22, r28
    3c60:	66 5f       	subi	r22, 0xF6	; 246
    3c62:	7f 4f       	sbci	r23, 0xFF	; 255
    3c64:	ce 01       	movw	r24, r28
    3c66:	0b 96       	adiw	r24, 0x0b	; 11
    3c68:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:696
  setAll(r, g, b);
    3c6c:	2b 81       	ldd	r18, Y+3	; 0x03
    3c6e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c70:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c72:	ee eb       	ldi	r30, 0xBE	; 190
    3c74:	f4 e4       	ldi	r31, 0x44	; 68
    3c76:	86 e1       	ldi	r24, 0x16	; 22
    3c78:	97 e4       	ldi	r25, 0x47	; 71
setAll():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:709
}


void setAll(byte r, byte g, byte b) {
  for (unsigned int i = 0; i < ((LENGTH) * 3); i += 3) {
    pixels [i] = r;
    3c7a:	40 83       	st	Z, r20
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:710
    pixels[i + 1] = g;
    3c7c:	31 83       	std	Z+1, r19	; 0x01
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:711
    pixels[i + 2] = b;
    3c7e:	22 83       	std	Z+2, r18	; 0x02
    3c80:	33 96       	adiw	r30, 0x03	; 3
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:708
  pushPixel(r, g, b, currentValueRight[currentMode == 4 ? 2 : 3]);
}


void setAll(byte r, byte g, byte b) {
  for (unsigned int i = 0; i < ((LENGTH) * 3); i += 3) {
    3c82:	8e 17       	cp	r24, r30
    3c84:	9f 07       	cpc	r25, r31
    3c86:	c9 f7       	brne	.-14     	; 0x3c7a <nextbyte20+0x942>
    3c88:	ea ca       	rjmp	.-2604   	; 0x325e <main+0x8ea>
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:641
    updatePatternWave();
  } else if (currentMode == 8) {
    updatePatternDots2();
  } else if (currentMode == 9) {
    updatePatternFade2();
  } else if (currentMode == 10) {
    3c8a:	1a 30       	cpi	r17, 0x0A	; 10
    3c8c:	09 f0       	breq	.+2      	; 0x3c90 <nextbyte20+0x958>
    3c8e:	cd c0       	rjmp	.+410    	; 0x3e2a <nextbyte20+0xaf2>
updatePatternDrift2():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:773
  }
  }

*/
void updatePatternDrift2() {
  byte driftchance = 16 + currentValueRight[0] * 10;
    3c90:	90 90 05 44 	lds	r9, 0x4405	; 0x804405 <currentValueRight>
    3c94:	91 9e       	mul	r9, r17
    3c96:	10 2d       	mov	r17, r0
    3c98:	11 24       	eor	r1, r1
    3c9a:	a0 e1       	ldi	r26, 0x10	; 16
    3c9c:	9a 2e       	mov	r9, r26
    3c9e:	91 0e       	add	r9, r17
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:774
  byte randinc = 255 - driftchance;
    3ca0:	89 2c       	mov	r8, r9
    3ca2:	80 94       	com	r8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:776
  byte randdec = driftchance;
  uint16_t len = (pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getDwellFrames() + getTransitionFrames()));
    3ca4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <getPalleteNumber()>
    3ca8:	e8 2f       	mov	r30, r24
    3caa:	f0 e0       	ldi	r31, 0x00	; 0
    3cac:	e1 54       	subi	r30, 0x41	; 65
    3cae:	f6 4f       	sbci	r31, 0xF6	; 246
    3cb0:	f4 90       	lpm	r15, Z
    3cb2:	0e 94 c8 07 	call	0xf90	; 0xf90 <getDwellFrames()>
    3cb6:	8c 01       	movw	r16, r24
    3cb8:	0e 94 b0 07 	call	0xf60	; 0xf60 <getTransitionFrames()>
    3cbc:	80 0f       	add	r24, r16
    3cbe:	91 1f       	adc	r25, r17
    3cc0:	f8 9e       	mul	r15, r24
    3cc2:	50 01       	movw	r10, r0
    3cc4:	f9 9e       	mul	r15, r25
    3cc6:	b0 0c       	add	r11, r0
    3cc8:	11 24       	eor	r1, r1
    3cca:	be eb       	ldi	r27, 0xBE	; 190
    3ccc:	cb 2e       	mov	r12, r27
    3cce:	b4 e4       	ldi	r27, 0x44	; 68
    3cd0:	db 2e       	mov	r13, r27
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:793
      if (f1 > len) {
        f1 = len;
      }
    }
    rand = rand >> 8;
    if (rand > randinc) {
    3cd2:	71 2c       	mov	r7, r1
    3cd4:	61 2c       	mov	r6, r1
    3cd6:	88 2d       	mov	r24, r8
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:798
      f2++;
      if (f2 > len) {
        f2 = 0;
      }
    } else if (rand < randdec) {
    3cda:	8e 87       	std	Y+14, r24	; 0x0e
    3cdc:	9f 87       	std	Y+15, r25	; 0x0f
    3cde:	e9 2d       	mov	r30, r9
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
    3ce2:	e8 8b       	std	Y+16, r30	; 0x10
    3ce4:	f9 8b       	std	Y+17, r31	; 0x11
random():
    3ce6:	30 d1       	rcall	.+608    	; 0x3f48 <random>
    3ce8:	2f ef       	ldi	r18, 0xFF	; 255
    3cea:	3f ef       	ldi	r19, 0xFF	; 255
    3cec:	40 e0       	ldi	r20, 0x00	; 0
    3cee:	50 e0       	ldi	r21, 0x00	; 0
    3cf0:	88 d1       	rcall	.+784    	; 0x4002 <__divmodsi4>
updatePatternDrift2():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:779
  byte randinc = 255 - driftchance;
  byte randdec = driftchance;
  uint16_t len = (pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getDwellFrames() + getTransitionFrames()));
  for (byte i = 0; i < LENGTH; i += 2) {
    uint16_t rand = random(65535);
    uint16_t f1 = scratch[(i * 3) >> 1] + ((scratch[(i >> 1) * 3 + 2] & 0x0F) << 8);
    3cf2:	c6 01       	movw	r24, r12
    3cf4:	8e 5b       	subi	r24, 0xBE	; 190
    3cf6:	94 44       	sbci	r25, 0x44	; 68
    3cf8:	95 95       	asr	r25
    3cfa:	87 95       	ror	r24
    3cfc:	93 01       	movw	r18, r6
    3cfe:	35 95       	asr	r19
    3d00:	27 95       	ror	r18
    3d02:	f9 01       	movw	r30, r18
    3d04:	ee 0f       	add	r30, r30
    3d06:	ff 1f       	adc	r31, r31
    3d08:	e2 0f       	add	r30, r18
    3d0a:	f3 1f       	adc	r31, r19
    3d0c:	9f 01       	movw	r18, r30
    3d0e:	21 55       	subi	r18, 0x51	; 81
    3d10:	3e 4b       	sbci	r19, 0xBE	; 190
    3d12:	2a 8b       	std	Y+18, r18	; 0x12
    3d14:	3b 8b       	std	Y+19, r19	; 0x13
    3d16:	f9 01       	movw	r30, r18
    3d18:	e0 80       	ld	r14, Z
    3d1a:	f1 2c       	mov	r15, r1
    3d1c:	1e 2d       	mov	r17, r14
    3d1e:	00 27       	eor	r16, r16
    3d20:	00 27       	eor	r16, r16
    3d22:	1f 70       	andi	r17, 0x0F	; 15
    3d24:	dc 01       	movw	r26, r24
    3d26:	a3 55       	subi	r26, 0x53	; 83
    3d28:	be 4b       	sbci	r27, 0xBE	; 190
    3d2a:	2c 91       	ld	r18, X
    3d2c:	02 0f       	add	r16, r18
    3d2e:	11 1d       	adc	r17, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:780
    uint16_t f2 = scratch[1 + ((i * 3) >> 1)] + ((scratch[(i >> 1) * 3 + 2] & 0xF0) << 4);
    3d30:	f4 e0       	ldi	r31, 0x04	; 4
    3d32:	ee 0c       	add	r14, r14
    3d34:	ff 1c       	adc	r15, r15
    3d36:	fa 95       	dec	r31
    3d38:	e1 f7       	brne	.-8      	; 0x3d32 <nextbyte20+0x9fa>
    3d3a:	ee 24       	eor	r14, r14
    3d3c:	ff e0       	ldi	r31, 0x0F	; 15
    3d3e:	ff 22       	and	r15, r31
    3d40:	82 55       	subi	r24, 0x52	; 82
    3d42:	9e 4b       	sbci	r25, 0xBE	; 190
    3d44:	fc 01       	movw	r30, r24
    3d46:	20 81       	ld	r18, Z
    3d48:	e2 0e       	add	r14, r18
    3d4a:	f1 1c       	adc	r15, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:781
    if ((byte)rand > randinc) {
    3d4c:	86 16       	cp	r8, r22
    3d4e:	08 f0       	brcs	.+2      	; 0x3d52 <nextbyte20+0xa1a>
    3d50:	4a c0       	rjmp	.+148    	; 0x3de6 <nextbyte20+0xaae>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:782
      f1++;
    3d52:	0f 5f       	subi	r16, 0xFF	; 255
    3d54:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:783
      if (f1 > len) {
    3d56:	a0 16       	cp	r10, r16
    3d58:	b1 06       	cpc	r11, r17
    3d5a:	08 f4       	brcc	.+2      	; 0x3d5e <nextbyte20+0xa26>
    3d5c:	4f c0       	rjmp	.+158    	; 0x3dfc <nextbyte20+0xac4>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:792
      f1--;
      if (f1 > len) {
        f1 = len;
      }
    }
    rand = rand >> 8;
    3d5e:	7c 87       	std	Y+12, r23	; 0x0c
    3d60:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:793
    if (rand > randinc) {
    3d62:	2c 85       	ldd	r18, Y+12	; 0x0c
    3d64:	3d 85       	ldd	r19, Y+13	; 0x0d
    3d66:	4e 85       	ldd	r20, Y+14	; 0x0e
    3d68:	5f 85       	ldd	r21, Y+15	; 0x0f
    3d6a:	42 17       	cp	r20, r18
    3d6c:	53 07       	cpc	r21, r19
    3d6e:	08 f0       	brcs	.+2      	; 0x3d72 <nextbyte20+0xa3a>
    3d70:	48 c0       	rjmp	.+144    	; 0x3e02 <nextbyte20+0xaca>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:794
      f2++;
    3d72:	5f ef       	ldi	r21, 0xFF	; 255
    3d74:	e5 1a       	sub	r14, r21
    3d76:	f5 0a       	sbc	r15, r21
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:795
      if (f2 > len) {
    3d78:	ae 14       	cp	r10, r14
    3d7a:	bf 04       	cpc	r11, r15
    3d7c:	08 f4       	brcc	.+2      	; 0x3d80 <nextbyte20+0xa48>
    3d7e:	52 c0       	rjmp	.+164    	; 0x3e24 <nextbyte20+0xaec>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:804
      f2--;
      if (f2 > len) {
        f2 = len;
      }
    }
    scratch[(i * 3) >> 1] = f1 & 0xFF;
    3d80:	0c 93       	st	X, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:805
    scratch[1 + ((i * 3) >> 1)] = f2 & 0xFF;
    3d82:	fc 01       	movw	r30, r24
    3d84:	e0 82       	st	Z, r14
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:806
    scratch[(i >> 1) * 3 + 2] = (f1 >> 8) & ((f2 >> 4) & 0xF0);
    3d86:	81 2f       	mov	r24, r17
    3d88:	80 7f       	andi	r24, 0xF0	; 240
    3d8a:	97 01       	movw	r18, r14
    3d8c:	94 e0       	ldi	r25, 0x04	; 4
    3d8e:	36 95       	lsr	r19
    3d90:	27 95       	ror	r18
    3d92:	9a 95       	dec	r25
    3d94:	e1 f7       	brne	.-8      	; 0x3d8e <nextbyte20+0xa56>
    3d96:	82 23       	and	r24, r18
    3d98:	ea 89       	ldd	r30, Y+18	; 0x12
    3d9a:	fb 89       	ldd	r31, Y+19	; 0x13
    3d9c:	80 83       	st	Z, r24
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:807
    getDrift2Colors(&pixels[i * 3], &pixels[i * 3] + 1, &pixels[i * 3] + 2, f1);
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	a6 01       	movw	r20, r12
    3da4:	4e 5f       	subi	r20, 0xFE	; 254
    3da6:	5f 4f       	sbci	r21, 0xFF	; 255
    3da8:	b6 01       	movw	r22, r12
    3daa:	6f 5f       	subi	r22, 0xFF	; 255
    3dac:	7f 4f       	sbci	r23, 0xFF	; 255
    3dae:	c6 01       	movw	r24, r12
    3db0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:808
    getDrift2Colors(&pixels[i * 3] + 3, &pixels[i * 3] + 4, &pixels[i * 3] + 5, f2);
    3db4:	87 01       	movw	r16, r14
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	20 e0       	ldi	r18, 0x00	; 0
    3dba:	a6 01       	movw	r20, r12
    3dbc:	4b 5f       	subi	r20, 0xFB	; 251
    3dbe:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc0:	b6 01       	movw	r22, r12
    3dc2:	6c 5f       	subi	r22, 0xFC	; 252
    3dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc6:	c6 01       	movw	r24, r12
    3dc8:	03 96       	adiw	r24, 0x03	; 3
    3dca:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
    3dce:	f2 e0       	ldi	r31, 0x02	; 2
    3dd0:	6f 0e       	add	r6, r31
    3dd2:	71 1c       	adc	r7, r1
    3dd4:	26 e0       	ldi	r18, 0x06	; 6
    3dd6:	c2 0e       	add	r12, r18
    3dd8:	d1 1c       	adc	r13, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:777
void updatePatternDrift2() {
  byte driftchance = 16 + currentValueRight[0] * 10;
  byte randinc = 255 - driftchance;
  byte randdec = driftchance;
  uint16_t len = (pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getDwellFrames() + getTransitionFrames()));
  for (byte i = 0; i < LENGTH; i += 2) {
    3dda:	38 ec       	ldi	r19, 0xC8	; 200
    3ddc:	63 16       	cp	r6, r19
    3dde:	71 04       	cpc	r7, r1
    3de0:	09 f0       	breq	.+2      	; 0x3de4 <nextbyte20+0xaac>
    3de2:	81 cf       	rjmp	.-254    	; 0x3ce6 <nextbyte20+0x9ae>
    3de4:	3c ca       	rjmp	.-2952   	; 0x325e <main+0x8ea>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:786
    if ((byte)rand > randinc) {
      f1++;
      if (f1 > len) {
        f1 = 0;
      }
    } else if ((byte)rand < randdec) {
    3de6:	69 15       	cp	r22, r9
    3de8:	08 f0       	brcs	.+2      	; 0x3dec <nextbyte20+0xab4>
    3dea:	b9 cf       	rjmp	.-142    	; 0x3d5e <nextbyte20+0xa26>
    3dec:	01 50       	subi	r16, 0x01	; 1
    3dee:	11 09       	sbc	r17, r1
    3df0:	a0 16       	cp	r10, r16
    3df2:	b1 06       	cpc	r11, r17
    3df4:	08 f0       	brcs	.+2      	; 0x3df8 <nextbyte20+0xac0>
    3df6:	b3 cf       	rjmp	.-154    	; 0x3d5e <nextbyte20+0xa26>
    3df8:	85 01       	movw	r16, r10
    3dfa:	b1 cf       	rjmp	.-158    	; 0x3d5e <nextbyte20+0xa26>
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:784
    uint16_t f1 = scratch[(i * 3) >> 1] + ((scratch[(i >> 1) * 3 + 2] & 0x0F) << 8);
    uint16_t f2 = scratch[1 + ((i * 3) >> 1)] + ((scratch[(i >> 1) * 3 + 2] & 0xF0) << 4);
    if ((byte)rand > randinc) {
      f1++;
      if (f1 > len) {
        f1 = 0;
    3dfc:	10 e0       	ldi	r17, 0x00	; 0
    3dfe:	00 e0       	ldi	r16, 0x00	; 0
    3e00:	ae cf       	rjmp	.-164    	; 0x3d5e <nextbyte20+0xa26>
updatePatternDrift2():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:798
    if (rand > randinc) {
      f2++;
      if (f2 > len) {
        f2 = 0;
      }
    } else if (rand < randdec) {
    3e02:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e04:	fd 85       	ldd	r31, Y+13	; 0x0d
    3e06:	28 89       	ldd	r18, Y+16	; 0x10
    3e08:	39 89       	ldd	r19, Y+17	; 0x11
    3e0a:	e2 17       	cp	r30, r18
    3e0c:	f3 07       	cpc	r31, r19
    3e0e:	08 f0       	brcs	.+2      	; 0x3e12 <nextbyte20+0xada>
    3e10:	b7 cf       	rjmp	.-146    	; 0x3d80 <nextbyte20+0xa48>
    3e12:	31 e0       	ldi	r19, 0x01	; 1
    3e14:	e3 1a       	sub	r14, r19
    3e16:	f1 08       	sbc	r15, r1
    3e18:	ae 14       	cp	r10, r14
    3e1a:	bf 04       	cpc	r11, r15
    3e1c:	08 f0       	brcs	.+2      	; 0x3e20 <nextbyte20+0xae8>
    3e1e:	b0 cf       	rjmp	.-160    	; 0x3d80 <nextbyte20+0xa48>
    3e20:	75 01       	movw	r14, r10
    3e22:	ae cf       	rjmp	.-164    	; 0x3d80 <nextbyte20+0xa48>
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:796
    }
    rand = rand >> 8;
    if (rand > randinc) {
      f2++;
      if (f2 > len) {
        f2 = 0;
    3e24:	f1 2c       	mov	r15, r1
    3e26:	e1 2c       	mov	r14, r1
    3e28:	ab cf       	rjmp	.-170    	; 0x3d80 <nextbyte20+0xa48>
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:644
  } else if (currentMode == 9) {
    updatePatternFade2();
  } else if (currentMode == 10) {
    updatePatternDrift2();
  } else {
    setMode(0);
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
    3e2c:	0e 94 37 11 	call	0x226e	; 0x226e <setMode(unsigned char)>
    3e30:	16 ca       	rjmp	.-3028   	; 0x325e <main+0x8ea>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:451
            lcd.print(F("Saved mode"));
            lcd.setCursor(5, 1);
            lcd.print(F("cleared"));
            delay(1000);
            UIChanged = 7;
          } else if (lastPressAt && millis() - lastPressAt > 3000) {
    3e32:	0e 94 b2 06 	call	0xd64	; 0xd64 <millis>
    3e36:	68 19       	sub	r22, r8
    3e38:	79 09       	sbc	r23, r9
    3e3a:	8a 09       	sbc	r24, r10
    3e3c:	9b 09       	sbc	r25, r11
    3e3e:	69 3b       	cpi	r22, 0xB9	; 185
    3e40:	7b 40       	sbci	r23, 0x0B	; 11
    3e42:	81 05       	cpc	r24, r1
    3e44:	91 05       	cpc	r25, r1
    3e46:	08 f4       	brcc	.+2      	; 0x3e4a <nextbyte20+0xb12>
    3e48:	4e c9       	rjmp	.-3428   	; 0x30e6 <main+0x772>
    3e4a:	60 91 19 44 	lds	r22, 0x4419	; 0x804419 <currentMode>
_ZN5EERefC2Ei():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef {

  EERef(int index)
    : index(index)                 {}
    3e4e:	8f e0       	ldi	r24, 0x0F	; 15
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	8b 83       	std	Y+3, r24	; 0x03
    3e54:	9c 83       	std	Y+4, r25	; 0x04
_ZN11EEPROMClass5writeEih.isra.5():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:208
  }
  uint8_t read(int idx)              {
    return EERef(idx);
  }
  void write(int idx, uint8_t val)   {
    (EERef(idx)) = val;
    3e56:	ce 01       	movw	r24, r28
    3e58:	03 96       	adiw	r24, 0x03	; 3
    3e5a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <EERef::operator=(unsigned char)>
    3e5e:	f1 2c       	mov	r15, r1
    3e60:	e1 2c       	mov	r14, r1
saveMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:394


void saveMode() {
  EEPROM.write(0x0F, currentMode);
  for (byte i = 0; i < 8; i++) {
    EEPROM.write(0x10 + i, currentValueLeft[i]);
    3e62:	f7 01       	movw	r30, r14
    3e64:	ef 5e       	subi	r30, 0xEF	; 239
    3e66:	fb 4b       	sbci	r31, 0xBB	; 187
    3e68:	60 81       	ld	r22, Z
_ZN5EERefC2Ei():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef {

  EERef(int index)
    : index(index)                 {}
    3e6a:	c7 01       	movw	r24, r14
    3e6c:	40 96       	adiw	r24, 0x10	; 16
    3e6e:	8b 83       	std	Y+3, r24	; 0x03
    3e70:	9c 83       	std	Y+4, r25	; 0x04
_ZN11EEPROMClass5writeEih.isra.5():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:208
  }
  uint8_t read(int idx)              {
    return EERef(idx);
  }
  void write(int idx, uint8_t val)   {
    (EERef(idx)) = val;
    3e72:	ce 01       	movw	r24, r28
    3e74:	03 96       	adiw	r24, 0x03	; 3
    3e76:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <EERef::operator=(unsigned char)>
saveMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:395
    EEPROM.write(0x18 + i, currentValueRight[i]);
    3e7a:	f7 01       	movw	r30, r14
    3e7c:	eb 5f       	subi	r30, 0xFB	; 251
    3e7e:	fb 4b       	sbci	r31, 0xBB	; 187
    3e80:	60 81       	ld	r22, Z
_ZN5EERefC2Ei():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef {

  EERef(int index)
    : index(index)                 {}
    3e82:	c7 01       	movw	r24, r14
    3e84:	48 96       	adiw	r24, 0x18	; 24
    3e86:	8b 83       	std	Y+3, r24	; 0x03
    3e88:	9c 83       	std	Y+4, r25	; 0x04
_ZN11EEPROMClass5writeEih.isra.5():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:208
  }
  uint8_t read(int idx)              {
    return EERef(idx);
  }
  void write(int idx, uint8_t val)   {
    (EERef(idx)) = val;
    3e8a:	ce 01       	movw	r24, r28
    3e8c:	03 96       	adiw	r24, 0x03	; 3
    3e8e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <EERef::operator=(unsigned char)>
    3e92:	9f ef       	ldi	r25, 0xFF	; 255
    3e94:	e9 1a       	sub	r14, r25
    3e96:	f9 0a       	sbc	r15, r25
saveMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:393
}


void saveMode() {
  EEPROM.write(0x0F, currentMode);
  for (byte i = 0; i < 8; i++) {
    3e98:	e8 e0       	ldi	r30, 0x08	; 8
    3e9a:	ee 16       	cp	r14, r30
    3e9c:	f1 04       	cpc	r15, r1
    3e9e:	09 f7       	brne	.-62     	; 0x3e62 <nextbyte20+0xb2a>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:453
            lcd.print(F("cleared"));
            delay(1000);
            UIChanged = 7;
          } else if (lastPressAt && millis() - lastPressAt > 3000) {
            saveMode();
            lcd.clear();
    3ea0:	0e 94 f5 06 	call	0xdea	; 0xdea <hd44780::clear() [clone .constprop.25]>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:454
            lcd.setCursor(3, 0);
    3ea4:	40 e0       	ldi	r20, 0x00	; 0
    3ea6:	63 e0       	ldi	r22, 0x03	; 3
    3ea8:	89 e2       	ldi	r24, 0x29	; 41
    3eaa:	97 e4       	ldi	r25, 0x47	; 71
    3eac:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:455
            lcd.print(F("Mode Saved"));
    3eb0:	65 ed       	ldi	r22, 0xD5	; 213
    3eb2:	76 e0       	ldi	r23, 0x06	; 6
    3eb4:	0b c9       	rjmp	.-3562   	; 0x30cc <main+0x758>

00003eb6 <random_r>:
random_r():
    3eb6:	8f 92       	push	r8
    3eb8:	9f 92       	push	r9
    3eba:	af 92       	push	r10
    3ebc:	bf 92       	push	r11
    3ebe:	cf 92       	push	r12
    3ec0:	df 92       	push	r13
    3ec2:	ef 92       	push	r14
    3ec4:	ff 92       	push	r15
    3ec6:	cf 93       	push	r28
    3ec8:	df 93       	push	r29
    3eca:	ec 01       	movw	r28, r24
    3ecc:	68 81       	ld	r22, Y
    3ece:	79 81       	ldd	r23, Y+1	; 0x01
    3ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed4:	61 15       	cp	r22, r1
    3ed6:	71 05       	cpc	r23, r1
    3ed8:	81 05       	cpc	r24, r1
    3eda:	91 05       	cpc	r25, r1
    3edc:	21 f4       	brne	.+8      	; 0x3ee6 <random_r+0x30>
    3ede:	64 e2       	ldi	r22, 0x24	; 36
    3ee0:	79 ed       	ldi	r23, 0xD9	; 217
    3ee2:	8b e5       	ldi	r24, 0x5B	; 91
    3ee4:	97 e0       	ldi	r25, 0x07	; 7
    3ee6:	2d e1       	ldi	r18, 0x1D	; 29
    3ee8:	33 ef       	ldi	r19, 0xF3	; 243
    3eea:	41 e0       	ldi	r20, 0x01	; 1
    3eec:	50 e0       	ldi	r21, 0x00	; 0
    3eee:	89 d0       	rcall	.+274    	; 0x4002 <__divmodsi4>
    3ef0:	49 01       	movw	r8, r18
    3ef2:	5a 01       	movw	r10, r20
    3ef4:	9b 01       	movw	r18, r22
    3ef6:	ac 01       	movw	r20, r24
    3ef8:	a7 ea       	ldi	r26, 0xA7	; 167
    3efa:	b1 e4       	ldi	r27, 0x41	; 65
    3efc:	9e d0       	rcall	.+316    	; 0x403a <__muluhisi3>
    3efe:	6b 01       	movw	r12, r22
    3f00:	7c 01       	movw	r14, r24
    3f02:	ac ee       	ldi	r26, 0xEC	; 236
    3f04:	b4 ef       	ldi	r27, 0xF4	; 244
    3f06:	a5 01       	movw	r20, r10
    3f08:	94 01       	movw	r18, r8
    3f0a:	a3 d0       	rcall	.+326    	; 0x4052 <__mulohisi3>
    3f0c:	c6 0e       	add	r12, r22
    3f0e:	d7 1e       	adc	r13, r23
    3f10:	e8 1e       	adc	r14, r24
    3f12:	f9 1e       	adc	r15, r25
    3f14:	f7 fe       	sbrs	r15, 7
    3f16:	06 c0       	rjmp	.+12     	; 0x3f24 <random_r+0x6e>
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	c8 1a       	sub	r12, r24
    3f1c:	d1 08       	sbc	r13, r1
    3f1e:	e1 08       	sbc	r14, r1
    3f20:	80 e8       	ldi	r24, 0x80	; 128
    3f22:	f8 0a       	sbc	r15, r24
    3f24:	c8 82       	st	Y, r12
    3f26:	d9 82       	std	Y+1, r13	; 0x01
    3f28:	ea 82       	std	Y+2, r14	; 0x02
    3f2a:	fb 82       	std	Y+3, r15	; 0x03
    3f2c:	c7 01       	movw	r24, r14
    3f2e:	b6 01       	movw	r22, r12
    3f30:	9f 77       	andi	r25, 0x7F	; 127
    3f32:	df 91       	pop	r29
    3f34:	cf 91       	pop	r28
    3f36:	ff 90       	pop	r15
    3f38:	ef 90       	pop	r14
    3f3a:	df 90       	pop	r13
    3f3c:	cf 90       	pop	r12
    3f3e:	bf 90       	pop	r11
    3f40:	af 90       	pop	r10
    3f42:	9f 90       	pop	r9
    3f44:	8f 90       	pop	r8
    3f46:	08 95       	ret

00003f48 <random>:
random():
    3f48:	8f 92       	push	r8
    3f4a:	9f 92       	push	r9
    3f4c:	af 92       	push	r10
    3f4e:	bf 92       	push	r11
    3f50:	cf 92       	push	r12
    3f52:	df 92       	push	r13
    3f54:	ef 92       	push	r14
    3f56:	ff 92       	push	r15
    3f58:	60 91 07 40 	lds	r22, 0x4007	; 0x804007 <next>
    3f5c:	70 91 08 40 	lds	r23, 0x4008	; 0x804008 <next+0x1>
    3f60:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <next+0x2>
    3f64:	90 91 0a 40 	lds	r25, 0x400A	; 0x80400a <next+0x3>
    3f68:	61 15       	cp	r22, r1
    3f6a:	71 05       	cpc	r23, r1
    3f6c:	81 05       	cpc	r24, r1
    3f6e:	91 05       	cpc	r25, r1
    3f70:	21 f4       	brne	.+8      	; 0x3f7a <random+0x32>
    3f72:	64 e2       	ldi	r22, 0x24	; 36
    3f74:	79 ed       	ldi	r23, 0xD9	; 217
    3f76:	8b e5       	ldi	r24, 0x5B	; 91
    3f78:	97 e0       	ldi	r25, 0x07	; 7
    3f7a:	2d e1       	ldi	r18, 0x1D	; 29
    3f7c:	33 ef       	ldi	r19, 0xF3	; 243
    3f7e:	41 e0       	ldi	r20, 0x01	; 1
    3f80:	50 e0       	ldi	r21, 0x00	; 0
    3f82:	3f d0       	rcall	.+126    	; 0x4002 <__divmodsi4>
    3f84:	49 01       	movw	r8, r18
    3f86:	5a 01       	movw	r10, r20
    3f88:	9b 01       	movw	r18, r22
    3f8a:	ac 01       	movw	r20, r24
    3f8c:	a7 ea       	ldi	r26, 0xA7	; 167
    3f8e:	b1 e4       	ldi	r27, 0x41	; 65
    3f90:	54 d0       	rcall	.+168    	; 0x403a <__muluhisi3>
    3f92:	6b 01       	movw	r12, r22
    3f94:	7c 01       	movw	r14, r24
    3f96:	ac ee       	ldi	r26, 0xEC	; 236
    3f98:	b4 ef       	ldi	r27, 0xF4	; 244
    3f9a:	a5 01       	movw	r20, r10
    3f9c:	94 01       	movw	r18, r8
    3f9e:	59 d0       	rcall	.+178    	; 0x4052 <__mulohisi3>
    3fa0:	c6 0e       	add	r12, r22
    3fa2:	d7 1e       	adc	r13, r23
    3fa4:	e8 1e       	adc	r14, r24
    3fa6:	f9 1e       	adc	r15, r25
    3fa8:	f7 fe       	sbrs	r15, 7
    3faa:	06 c0       	rjmp	.+12     	; 0x3fb8 <random+0x70>
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	c8 1a       	sub	r12, r24
    3fb0:	d1 08       	sbc	r13, r1
    3fb2:	e1 08       	sbc	r14, r1
    3fb4:	80 e8       	ldi	r24, 0x80	; 128
    3fb6:	f8 0a       	sbc	r15, r24
    3fb8:	c0 92 07 40 	sts	0x4007, r12	; 0x804007 <next>
    3fbc:	d0 92 08 40 	sts	0x4008, r13	; 0x804008 <next+0x1>
    3fc0:	e0 92 09 40 	sts	0x4009, r14	; 0x804009 <next+0x2>
    3fc4:	f0 92 0a 40 	sts	0x400A, r15	; 0x80400a <next+0x3>
    3fc8:	c7 01       	movw	r24, r14
    3fca:	b6 01       	movw	r22, r12
    3fcc:	9f 77       	andi	r25, 0x7F	; 127
    3fce:	ff 90       	pop	r15
    3fd0:	ef 90       	pop	r14
    3fd2:	df 90       	pop	r13
    3fd4:	cf 90       	pop	r12
    3fd6:	bf 90       	pop	r11
    3fd8:	af 90       	pop	r10
    3fda:	9f 90       	pop	r9
    3fdc:	8f 90       	pop	r8
    3fde:	08 95       	ret

00003fe0 <srandom>:
srandom():
    3fe0:	60 93 07 40 	sts	0x4007, r22	; 0x804007 <next>
    3fe4:	70 93 08 40 	sts	0x4008, r23	; 0x804008 <next+0x1>
    3fe8:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <next+0x2>
    3fec:	90 93 0a 40 	sts	0x400A, r25	; 0x80400a <next+0x3>
    3ff0:	08 95       	ret

00003ff2 <eeprom_read_byte>:
eeprom_read_byte():
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega4/avr128db48/../../../../libc/misc/eerd_byte.S:51
    3ff2:	03 d0       	rcall	.+6      	; 0x3ffa <eeprom_mapen>
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega4/avr128db48/../../../../libc/misc/eerd_byte.S:52
    3ff4:	80 81       	ld	r24, Z
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega4/avr128db48/../../../../libc/misc/eerd_byte.S:53
    3ff6:	99 27       	eor	r25, r25
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega4/avr128db48/../../../../libc/misc/eerd_byte.S:54
    3ff8:	08 95       	ret

00003ffa <eeprom_mapen>:
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega4/avr128db48/../../../../libc/misc/eerd_byte.S:83
    3ffa:	fc 01       	movw	r30, r24
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega4/avr128db48/../../../../libc/misc/eerd_byte.S:84
    3ffc:	e0 50       	subi	r30, 0x00	; 0
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega4/avr128db48/../../../../libc/misc/eerd_byte.S:85
    3ffe:	fc 4e       	sbci	r31, 0xEC	; 236
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega4/avr128db48/../../../../libc/misc/eerd_byte.S:87
    4000:	08 95       	ret

00004002 <__divmodsi4>:
__divmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    4002:	05 2e       	mov	r0, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    4004:	97 fb       	bst	r25, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    4006:	16 f4       	brtc	.+4      	; 0x400c <__divmodsi4+0xa>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    4008:	00 94       	com	r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    400a:	0f d0       	rcall	.+30     	; 0x402a <__negsi2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    400c:	57 fd       	sbrc	r21, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    400e:	05 d0       	rcall	.+10     	; 0x401a <__divmodsi4_neg2>
    4010:	24 d0       	rcall	.+72     	; 0x405a <__udivmodsi4>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    4012:	07 fc       	sbrc	r0, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    4014:	02 d0       	rcall	.+4      	; 0x401a <__divmodsi4_neg2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    4016:	46 f4       	brtc	.+16     	; 0x4028 <__divmodsi4_exit>
    4018:	08 c0       	rjmp	.+16     	; 0x402a <__negsi2>

0000401a <__divmodsi4_neg2>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    401a:	50 95       	com	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    401c:	40 95       	com	r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    401e:	30 95       	com	r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    4020:	21 95       	neg	r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    4022:	3f 4f       	sbci	r19, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    4024:	4f 4f       	sbci	r20, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    4026:	5f 4f       	sbci	r21, 0xFF	; 255

00004028 <__divmodsi4_exit>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    4028:	08 95       	ret

0000402a <__negsi2>:
__negsi2():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    402a:	90 95       	com	r25
    402c:	80 95       	com	r24
    402e:	70 95       	com	r23
    4030:	61 95       	neg	r22
    4032:	7f 4f       	sbci	r23, 0xFF	; 255
    4034:	8f 4f       	sbci	r24, 0xFF	; 255
    4036:	9f 4f       	sbci	r25, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    4038:	08 95       	ret

0000403a <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    403a:	31 d0       	rcall	.+98     	; 0x409e <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    403c:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    403e:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    4040:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    4042:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    4044:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    4046:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    4048:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    404a:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    404c:	08 95       	ret

0000404e <__mulshisi3>:
__mulshisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    404e:	b7 ff       	sbrs	r27, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    4050:	f4 cf       	rjmp	.-24     	; 0x403a <__muluhisi3>

00004052 <__mulohisi3>:
__mulohisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    4052:	f3 df       	rcall	.-26     	; 0x403a <__muluhisi3>
    4054:	82 1b       	sub	r24, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    4056:	93 0b       	sbc	r25, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    4058:	08 95       	ret

0000405a <__udivmodsi4>:
__udivmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    405a:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    405c:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    405e:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    4060:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    4062:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    4064:	0d c0       	rjmp	.+26     	; 0x4080 <__udivmodsi4_ep>

00004066 <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    4066:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    4068:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    406a:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    406c:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    406e:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    4070:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    4072:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    4074:	f5 07       	cpc	r31, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    4076:	20 f0       	brcs	.+8      	; 0x4080 <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    4078:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    407a:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    407c:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    407e:	f5 0b       	sbc	r31, r21

00004080 <__udivmodsi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    4080:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    4082:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    4084:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    4086:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    4088:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    408a:	69 f7       	brne	.-38     	; 0x4066 <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    408c:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    408e:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    4090:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    4092:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    4094:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    4096:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    4098:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    409a:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    409c:	08 95       	ret

0000409e <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    409e:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    40a0:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    40a2:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    40a4:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    40a6:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    40a8:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    40aa:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    40ac:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    40ae:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    40b0:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    40b2:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    40b4:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    40b6:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    40b8:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    40ba:	08 95       	ret

000040bc <__subsf3>:
__subsf3():
    40bc:	50 58       	subi	r21, 0x80	; 128

000040be <__addsf3>:
    40be:	bb 27       	eor	r27, r27
    40c0:	aa 27       	eor	r26, r26
    40c2:	0e d0       	rcall	.+28     	; 0x40e0 <__addsf3x>
    40c4:	70 c1       	rjmp	.+736    	; 0x43a6 <__fp_round>
__addsf3():
    40c6:	61 d1       	rcall	.+706    	; 0x438a <__fp_pscA>
    40c8:	30 f0       	brcs	.+12     	; 0x40d6 <__addsf3+0x18>
    40ca:	66 d1       	rcall	.+716    	; 0x4398 <__fp_pscB>
    40cc:	20 f0       	brcs	.+8      	; 0x40d6 <__addsf3+0x18>
    40ce:	31 f4       	brne	.+12     	; 0x40dc <__addsf3+0x1e>
    40d0:	9f 3f       	cpi	r25, 0xFF	; 255
    40d2:	11 f4       	brne	.+4      	; 0x40d8 <__addsf3+0x1a>
    40d4:	1e f4       	brtc	.+6      	; 0x40dc <__addsf3+0x1e>
    40d6:	56 c1       	rjmp	.+684    	; 0x4384 <__fp_nan>
    40d8:	0e f4       	brtc	.+2      	; 0x40dc <__addsf3+0x1e>
    40da:	e0 95       	com	r30
    40dc:	e7 fb       	bst	r30, 7
    40de:	4c c1       	rjmp	.+664    	; 0x4378 <__fp_inf>

000040e0 <__addsf3x>:
__addsf3x():
    40e0:	e9 2f       	mov	r30, r25
    40e2:	72 d1       	rcall	.+740    	; 0x43c8 <__fp_split3>
    40e4:	80 f3       	brcs	.-32     	; 0x40c6 <__addsf3+0x8>
    40e6:	ba 17       	cp	r27, r26
    40e8:	62 07       	cpc	r22, r18
    40ea:	73 07       	cpc	r23, r19
    40ec:	84 07       	cpc	r24, r20
    40ee:	95 07       	cpc	r25, r21
    40f0:	18 f0       	brcs	.+6      	; 0x40f8 <__addsf3x+0x18>
    40f2:	71 f4       	brne	.+28     	; 0x4110 <__addsf3x+0x30>
    40f4:	9e f5       	brtc	.+102    	; 0x415c <__addsf3x+0x7c>
    40f6:	8a c1       	rjmp	.+788    	; 0x440c <__fp_zero>
    40f8:	0e f4       	brtc	.+2      	; 0x40fc <__addsf3x+0x1c>
    40fa:	e0 95       	com	r30
    40fc:	0b 2e       	mov	r0, r27
    40fe:	ba 2f       	mov	r27, r26
    4100:	a0 2d       	mov	r26, r0
    4102:	0b 01       	movw	r0, r22
    4104:	b9 01       	movw	r22, r18
    4106:	90 01       	movw	r18, r0
    4108:	0c 01       	movw	r0, r24
    410a:	ca 01       	movw	r24, r20
    410c:	a0 01       	movw	r20, r0
    410e:	11 24       	eor	r1, r1
    4110:	ff 27       	eor	r31, r31
    4112:	59 1b       	sub	r21, r25
    4114:	99 f0       	breq	.+38     	; 0x413c <__addsf3x+0x5c>
    4116:	59 3f       	cpi	r21, 0xF9	; 249
    4118:	50 f4       	brcc	.+20     	; 0x412e <__addsf3x+0x4e>
    411a:	50 3e       	cpi	r21, 0xE0	; 224
    411c:	68 f1       	brcs	.+90     	; 0x4178 <__addsf3x+0x98>
    411e:	1a 16       	cp	r1, r26
    4120:	f0 40       	sbci	r31, 0x00	; 0
    4122:	a2 2f       	mov	r26, r18
    4124:	23 2f       	mov	r18, r19
    4126:	34 2f       	mov	r19, r20
    4128:	44 27       	eor	r20, r20
    412a:	58 5f       	subi	r21, 0xF8	; 248
    412c:	f3 cf       	rjmp	.-26     	; 0x4114 <__addsf3x+0x34>
    412e:	46 95       	lsr	r20
    4130:	37 95       	ror	r19
    4132:	27 95       	ror	r18
    4134:	a7 95       	ror	r26
    4136:	f0 40       	sbci	r31, 0x00	; 0
    4138:	53 95       	inc	r21
    413a:	c9 f7       	brne	.-14     	; 0x412e <__addsf3x+0x4e>
    413c:	7e f4       	brtc	.+30     	; 0x415c <__addsf3x+0x7c>
    413e:	1f 16       	cp	r1, r31
    4140:	ba 0b       	sbc	r27, r26
    4142:	62 0b       	sbc	r22, r18
    4144:	73 0b       	sbc	r23, r19
    4146:	84 0b       	sbc	r24, r20
    4148:	ba f0       	brmi	.+46     	; 0x4178 <__addsf3x+0x98>
    414a:	91 50       	subi	r25, 0x01	; 1
    414c:	a1 f0       	breq	.+40     	; 0x4176 <__addsf3x+0x96>
    414e:	ff 0f       	add	r31, r31
    4150:	bb 1f       	adc	r27, r27
    4152:	66 1f       	adc	r22, r22
    4154:	77 1f       	adc	r23, r23
    4156:	88 1f       	adc	r24, r24
    4158:	c2 f7       	brpl	.-16     	; 0x414a <__addsf3x+0x6a>
    415a:	0e c0       	rjmp	.+28     	; 0x4178 <__addsf3x+0x98>
    415c:	ba 0f       	add	r27, r26
    415e:	62 1f       	adc	r22, r18
    4160:	73 1f       	adc	r23, r19
    4162:	84 1f       	adc	r24, r20
    4164:	48 f4       	brcc	.+18     	; 0x4178 <__addsf3x+0x98>
    4166:	87 95       	ror	r24
    4168:	77 95       	ror	r23
    416a:	67 95       	ror	r22
    416c:	b7 95       	ror	r27
    416e:	f7 95       	ror	r31
    4170:	9e 3f       	cpi	r25, 0xFE	; 254
    4172:	08 f0       	brcs	.+2      	; 0x4176 <__addsf3x+0x96>
    4174:	b3 cf       	rjmp	.-154    	; 0x40dc <__addsf3+0x1e>
    4176:	93 95       	inc	r25
    4178:	88 0f       	add	r24, r24
    417a:	08 f0       	brcs	.+2      	; 0x417e <__addsf3x+0x9e>
    417c:	99 27       	eor	r25, r25
    417e:	ee 0f       	add	r30, r30
    4180:	97 95       	ror	r25
    4182:	87 95       	ror	r24
    4184:	08 95       	ret

00004186 <__cmpsf2>:
    4186:	d4 d0       	rcall	.+424    	; 0x4330 <__fp_cmp>
    4188:	08 f4       	brcc	.+2      	; 0x418c <__cmpsf2+0x6>
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	08 95       	ret

0000418e <__divsf3>:
    418e:	0c d0       	rcall	.+24     	; 0x41a8 <__divsf3x>
    4190:	0a c1       	rjmp	.+532    	; 0x43a6 <__fp_round>
    4192:	02 d1       	rcall	.+516    	; 0x4398 <__fp_pscB>
    4194:	40 f0       	brcs	.+16     	; 0x41a6 <__divsf3+0x18>
    4196:	f9 d0       	rcall	.+498    	; 0x438a <__fp_pscA>
    4198:	30 f0       	brcs	.+12     	; 0x41a6 <__divsf3+0x18>
    419a:	21 f4       	brne	.+8      	; 0x41a4 <__divsf3+0x16>
    419c:	5f 3f       	cpi	r21, 0xFF	; 255
    419e:	19 f0       	breq	.+6      	; 0x41a6 <__divsf3+0x18>
    41a0:	eb c0       	rjmp	.+470    	; 0x4378 <__fp_inf>
    41a2:	51 11       	cpse	r21, r1
    41a4:	34 c1       	rjmp	.+616    	; 0x440e <__fp_szero>
    41a6:	ee c0       	rjmp	.+476    	; 0x4384 <__fp_nan>

000041a8 <__divsf3x>:
    41a8:	0f d1       	rcall	.+542    	; 0x43c8 <__fp_split3>
    41aa:	98 f3       	brcs	.-26     	; 0x4192 <__divsf3+0x4>

000041ac <__divsf3_pse>:
__divsf3_pse():
    41ac:	99 23       	and	r25, r25
    41ae:	c9 f3       	breq	.-14     	; 0x41a2 <__divsf3+0x14>
    41b0:	55 23       	and	r21, r21
    41b2:	b1 f3       	breq	.-20     	; 0x41a0 <__divsf3+0x12>
    41b4:	95 1b       	sub	r25, r21
    41b6:	55 0b       	sbc	r21, r21
    41b8:	bb 27       	eor	r27, r27
    41ba:	aa 27       	eor	r26, r26
    41bc:	62 17       	cp	r22, r18
    41be:	73 07       	cpc	r23, r19
    41c0:	84 07       	cpc	r24, r20
    41c2:	38 f0       	brcs	.+14     	; 0x41d2 <__divsf3_pse+0x26>
    41c4:	9f 5f       	subi	r25, 0xFF	; 255
    41c6:	5f 4f       	sbci	r21, 0xFF	; 255
    41c8:	22 0f       	add	r18, r18
    41ca:	33 1f       	adc	r19, r19
    41cc:	44 1f       	adc	r20, r20
    41ce:	aa 1f       	adc	r26, r26
    41d0:	a9 f3       	breq	.-22     	; 0x41bc <__divsf3_pse+0x10>
    41d2:	33 d0       	rcall	.+102    	; 0x423a <__divsf3_pse+0x8e>
    41d4:	0e 2e       	mov	r0, r30
    41d6:	3a f0       	brmi	.+14     	; 0x41e6 <__divsf3_pse+0x3a>
    41d8:	e0 e8       	ldi	r30, 0x80	; 128
    41da:	30 d0       	rcall	.+96     	; 0x423c <__divsf3_pse+0x90>
    41dc:	91 50       	subi	r25, 0x01	; 1
    41de:	50 40       	sbci	r21, 0x00	; 0
    41e0:	e6 95       	lsr	r30
    41e2:	00 1c       	adc	r0, r0
    41e4:	ca f7       	brpl	.-14     	; 0x41d8 <__divsf3_pse+0x2c>
    41e6:	29 d0       	rcall	.+82     	; 0x423a <__divsf3_pse+0x8e>
    41e8:	fe 2f       	mov	r31, r30
    41ea:	27 d0       	rcall	.+78     	; 0x423a <__divsf3_pse+0x8e>
    41ec:	66 0f       	add	r22, r22
    41ee:	77 1f       	adc	r23, r23
    41f0:	88 1f       	adc	r24, r24
    41f2:	bb 1f       	adc	r27, r27
    41f4:	26 17       	cp	r18, r22
    41f6:	37 07       	cpc	r19, r23
    41f8:	48 07       	cpc	r20, r24
    41fa:	ab 07       	cpc	r26, r27
    41fc:	b0 e8       	ldi	r27, 0x80	; 128
    41fe:	09 f0       	breq	.+2      	; 0x4202 <__divsf3_pse+0x56>
    4200:	bb 0b       	sbc	r27, r27
    4202:	80 2d       	mov	r24, r0
    4204:	bf 01       	movw	r22, r30
    4206:	ff 27       	eor	r31, r31
    4208:	93 58       	subi	r25, 0x83	; 131
    420a:	5f 4f       	sbci	r21, 0xFF	; 255
    420c:	2a f0       	brmi	.+10     	; 0x4218 <__divsf3_pse+0x6c>
    420e:	9e 3f       	cpi	r25, 0xFE	; 254
    4210:	51 05       	cpc	r21, r1
    4212:	68 f0       	brcs	.+26     	; 0x422e <__divsf3_pse+0x82>
    4214:	b1 c0       	rjmp	.+354    	; 0x4378 <__fp_inf>
    4216:	fb c0       	rjmp	.+502    	; 0x440e <__fp_szero>
    4218:	5f 3f       	cpi	r21, 0xFF	; 255
    421a:	ec f3       	brlt	.-6      	; 0x4216 <__divsf3_pse+0x6a>
    421c:	98 3e       	cpi	r25, 0xE8	; 232
    421e:	dc f3       	brlt	.-10     	; 0x4216 <__divsf3_pse+0x6a>
    4220:	86 95       	lsr	r24
    4222:	77 95       	ror	r23
    4224:	67 95       	ror	r22
    4226:	b7 95       	ror	r27
    4228:	f7 95       	ror	r31
    422a:	9f 5f       	subi	r25, 0xFF	; 255
    422c:	c9 f7       	brne	.-14     	; 0x4220 <__divsf3_pse+0x74>
    422e:	88 0f       	add	r24, r24
    4230:	91 1d       	adc	r25, r1
    4232:	96 95       	lsr	r25
    4234:	87 95       	ror	r24
    4236:	97 f9       	bld	r25, 7
    4238:	08 95       	ret
    423a:	e1 e0       	ldi	r30, 0x01	; 1
    423c:	66 0f       	add	r22, r22
    423e:	77 1f       	adc	r23, r23
    4240:	88 1f       	adc	r24, r24
    4242:	bb 1f       	adc	r27, r27
    4244:	62 17       	cp	r22, r18
    4246:	73 07       	cpc	r23, r19
    4248:	84 07       	cpc	r24, r20
    424a:	ba 07       	cpc	r27, r26
    424c:	20 f0       	brcs	.+8      	; 0x4256 <__divsf3_pse+0xaa>
    424e:	62 1b       	sub	r22, r18
    4250:	73 0b       	sbc	r23, r19
    4252:	84 0b       	sbc	r24, r20
    4254:	ba 0b       	sbc	r27, r26
    4256:	ee 1f       	adc	r30, r30
    4258:	88 f7       	brcc	.-30     	; 0x423c <__divsf3_pse+0x90>
    425a:	e0 95       	com	r30
    425c:	08 95       	ret

0000425e <__fixunssfsi>:
__fixunssfsi():
    425e:	bc d0       	rcall	.+376    	; 0x43d8 <__fp_splitA>
    4260:	88 f0       	brcs	.+34     	; 0x4284 <__fixunssfsi+0x26>
    4262:	9f 57       	subi	r25, 0x7F	; 127
    4264:	90 f0       	brcs	.+36     	; 0x428a <__fixunssfsi+0x2c>
    4266:	b9 2f       	mov	r27, r25
    4268:	99 27       	eor	r25, r25
    426a:	b7 51       	subi	r27, 0x17	; 23
    426c:	a0 f0       	brcs	.+40     	; 0x4296 <__fixunssfsi+0x38>
    426e:	d1 f0       	breq	.+52     	; 0x42a4 <__fixunssfsi+0x46>
    4270:	66 0f       	add	r22, r22
    4272:	77 1f       	adc	r23, r23
    4274:	88 1f       	adc	r24, r24
    4276:	99 1f       	adc	r25, r25
    4278:	1a f0       	brmi	.+6      	; 0x4280 <__fixunssfsi+0x22>
    427a:	ba 95       	dec	r27
    427c:	c9 f7       	brne	.-14     	; 0x4270 <__fixunssfsi+0x12>
    427e:	12 c0       	rjmp	.+36     	; 0x42a4 <__fixunssfsi+0x46>
    4280:	b1 30       	cpi	r27, 0x01	; 1
    4282:	81 f0       	breq	.+32     	; 0x42a4 <__fixunssfsi+0x46>
    4284:	c3 d0       	rcall	.+390    	; 0x440c <__fp_zero>
    4286:	b1 e0       	ldi	r27, 0x01	; 1
    4288:	08 95       	ret
    428a:	c0 c0       	rjmp	.+384    	; 0x440c <__fp_zero>
    428c:	67 2f       	mov	r22, r23
    428e:	78 2f       	mov	r23, r24
    4290:	88 27       	eor	r24, r24
    4292:	b8 5f       	subi	r27, 0xF8	; 248
    4294:	39 f0       	breq	.+14     	; 0x42a4 <__fixunssfsi+0x46>
    4296:	b9 3f       	cpi	r27, 0xF9	; 249
    4298:	cc f3       	brlt	.-14     	; 0x428c <__fixunssfsi+0x2e>
    429a:	86 95       	lsr	r24
    429c:	77 95       	ror	r23
    429e:	67 95       	ror	r22
    42a0:	b3 95       	inc	r27
    42a2:	d9 f7       	brne	.-10     	; 0x429a <__fixunssfsi+0x3c>
    42a4:	3e f4       	brtc	.+14     	; 0x42b4 <__fixunssfsi+0x56>
    42a6:	90 95       	com	r25
    42a8:	80 95       	com	r24
    42aa:	70 95       	com	r23
    42ac:	61 95       	neg	r22
    42ae:	7f 4f       	sbci	r23, 0xFF	; 255
    42b0:	8f 4f       	sbci	r24, 0xFF	; 255
    42b2:	9f 4f       	sbci	r25, 0xFF	; 255
    42b4:	08 95       	ret

000042b6 <__floatunsisf>:
__floatunsisf():
    42b6:	e8 94       	clt
    42b8:	09 c0       	rjmp	.+18     	; 0x42cc <__floatsisf+0x12>

000042ba <__floatsisf>:
    42ba:	97 fb       	bst	r25, 7
    42bc:	3e f4       	brtc	.+14     	; 0x42cc <__floatsisf+0x12>
    42be:	90 95       	com	r25
    42c0:	80 95       	com	r24
    42c2:	70 95       	com	r23
    42c4:	61 95       	neg	r22
    42c6:	7f 4f       	sbci	r23, 0xFF	; 255
    42c8:	8f 4f       	sbci	r24, 0xFF	; 255
    42ca:	9f 4f       	sbci	r25, 0xFF	; 255
    42cc:	99 23       	and	r25, r25
    42ce:	a9 f0       	breq	.+42     	; 0x42fa <__floatsisf+0x40>
    42d0:	f9 2f       	mov	r31, r25
    42d2:	96 e9       	ldi	r25, 0x96	; 150
    42d4:	bb 27       	eor	r27, r27
    42d6:	93 95       	inc	r25
    42d8:	f6 95       	lsr	r31
    42da:	87 95       	ror	r24
    42dc:	77 95       	ror	r23
    42de:	67 95       	ror	r22
    42e0:	b7 95       	ror	r27
    42e2:	f1 11       	cpse	r31, r1
    42e4:	f8 cf       	rjmp	.-16     	; 0x42d6 <__floatsisf+0x1c>
    42e6:	fa f4       	brpl	.+62     	; 0x4326 <__floatsisf+0x6c>
    42e8:	bb 0f       	add	r27, r27
    42ea:	11 f4       	brne	.+4      	; 0x42f0 <__floatsisf+0x36>
    42ec:	60 ff       	sbrs	r22, 0
    42ee:	1b c0       	rjmp	.+54     	; 0x4326 <__floatsisf+0x6c>
    42f0:	6f 5f       	subi	r22, 0xFF	; 255
    42f2:	7f 4f       	sbci	r23, 0xFF	; 255
    42f4:	8f 4f       	sbci	r24, 0xFF	; 255
    42f6:	9f 4f       	sbci	r25, 0xFF	; 255
    42f8:	16 c0       	rjmp	.+44     	; 0x4326 <__floatsisf+0x6c>
    42fa:	88 23       	and	r24, r24
    42fc:	11 f0       	breq	.+4      	; 0x4302 <__floatsisf+0x48>
    42fe:	96 e9       	ldi	r25, 0x96	; 150
    4300:	11 c0       	rjmp	.+34     	; 0x4324 <__floatsisf+0x6a>
    4302:	77 23       	and	r23, r23
    4304:	21 f0       	breq	.+8      	; 0x430e <__floatsisf+0x54>
    4306:	9e e8       	ldi	r25, 0x8E	; 142
    4308:	87 2f       	mov	r24, r23
    430a:	76 2f       	mov	r23, r22
    430c:	05 c0       	rjmp	.+10     	; 0x4318 <__floatsisf+0x5e>
    430e:	66 23       	and	r22, r22
    4310:	71 f0       	breq	.+28     	; 0x432e <__floatsisf+0x74>
    4312:	96 e8       	ldi	r25, 0x86	; 134
    4314:	86 2f       	mov	r24, r22
    4316:	70 e0       	ldi	r23, 0x00	; 0
    4318:	60 e0       	ldi	r22, 0x00	; 0
    431a:	2a f0       	brmi	.+10     	; 0x4326 <__floatsisf+0x6c>
    431c:	9a 95       	dec	r25
    431e:	66 0f       	add	r22, r22
    4320:	77 1f       	adc	r23, r23
    4322:	88 1f       	adc	r24, r24
    4324:	da f7       	brpl	.-10     	; 0x431c <__floatsisf+0x62>
    4326:	88 0f       	add	r24, r24
    4328:	96 95       	lsr	r25
    432a:	87 95       	ror	r24
    432c:	97 f9       	bld	r25, 7
    432e:	08 95       	ret

00004330 <__fp_cmp>:
__fp_cmp():
    4330:	99 0f       	add	r25, r25
    4332:	00 08       	sbc	r0, r0
    4334:	55 0f       	add	r21, r21
    4336:	aa 0b       	sbc	r26, r26
    4338:	e0 e8       	ldi	r30, 0x80	; 128
    433a:	fe ef       	ldi	r31, 0xFE	; 254
    433c:	16 16       	cp	r1, r22
    433e:	17 06       	cpc	r1, r23
    4340:	e8 07       	cpc	r30, r24
    4342:	f9 07       	cpc	r31, r25
    4344:	c0 f0       	brcs	.+48     	; 0x4376 <__fp_cmp+0x46>
    4346:	12 16       	cp	r1, r18
    4348:	13 06       	cpc	r1, r19
    434a:	e4 07       	cpc	r30, r20
    434c:	f5 07       	cpc	r31, r21
    434e:	98 f0       	brcs	.+38     	; 0x4376 <__fp_cmp+0x46>
    4350:	62 1b       	sub	r22, r18
    4352:	73 0b       	sbc	r23, r19
    4354:	84 0b       	sbc	r24, r20
    4356:	95 0b       	sbc	r25, r21
    4358:	39 f4       	brne	.+14     	; 0x4368 <__fp_cmp+0x38>
    435a:	0a 26       	eor	r0, r26
    435c:	61 f0       	breq	.+24     	; 0x4376 <__fp_cmp+0x46>
    435e:	23 2b       	or	r18, r19
    4360:	24 2b       	or	r18, r20
    4362:	25 2b       	or	r18, r21
    4364:	21 f4       	brne	.+8      	; 0x436e <__fp_cmp+0x3e>
    4366:	08 95       	ret
    4368:	0a 26       	eor	r0, r26
    436a:	09 f4       	brne	.+2      	; 0x436e <__fp_cmp+0x3e>
    436c:	a1 40       	sbci	r26, 0x01	; 1
    436e:	a6 95       	lsr	r26
    4370:	8f ef       	ldi	r24, 0xFF	; 255
    4372:	81 1d       	adc	r24, r1
    4374:	81 1d       	adc	r24, r1
    4376:	08 95       	ret

00004378 <__fp_inf>:
__fp_inf():
    4378:	97 f9       	bld	r25, 7
    437a:	9f 67       	ori	r25, 0x7F	; 127
    437c:	80 e8       	ldi	r24, 0x80	; 128
    437e:	70 e0       	ldi	r23, 0x00	; 0
    4380:	60 e0       	ldi	r22, 0x00	; 0
    4382:	08 95       	ret

00004384 <__fp_nan>:
__fp_nan():
    4384:	9f ef       	ldi	r25, 0xFF	; 255
    4386:	80 ec       	ldi	r24, 0xC0	; 192
    4388:	08 95       	ret

0000438a <__fp_pscA>:
__fp_pscA():
    438a:	00 24       	eor	r0, r0
    438c:	0a 94       	dec	r0
    438e:	16 16       	cp	r1, r22
    4390:	17 06       	cpc	r1, r23
    4392:	18 06       	cpc	r1, r24
    4394:	09 06       	cpc	r0, r25
    4396:	08 95       	ret

00004398 <__fp_pscB>:
__fp_pscB():
    4398:	00 24       	eor	r0, r0
    439a:	0a 94       	dec	r0
    439c:	12 16       	cp	r1, r18
    439e:	13 06       	cpc	r1, r19
    43a0:	14 06       	cpc	r1, r20
    43a2:	05 06       	cpc	r0, r21
    43a4:	08 95       	ret

000043a6 <__fp_round>:
__fp_round():
    43a6:	09 2e       	mov	r0, r25
    43a8:	03 94       	inc	r0
    43aa:	00 0c       	add	r0, r0
    43ac:	11 f4       	brne	.+4      	; 0x43b2 <__fp_round+0xc>
    43ae:	88 23       	and	r24, r24
    43b0:	52 f0       	brmi	.+20     	; 0x43c6 <__fp_round+0x20>
    43b2:	bb 0f       	add	r27, r27
    43b4:	40 f4       	brcc	.+16     	; 0x43c6 <__fp_round+0x20>
    43b6:	bf 2b       	or	r27, r31
    43b8:	11 f4       	brne	.+4      	; 0x43be <__fp_round+0x18>
    43ba:	60 ff       	sbrs	r22, 0
    43bc:	04 c0       	rjmp	.+8      	; 0x43c6 <__fp_round+0x20>
    43be:	6f 5f       	subi	r22, 0xFF	; 255
    43c0:	7f 4f       	sbci	r23, 0xFF	; 255
    43c2:	8f 4f       	sbci	r24, 0xFF	; 255
    43c4:	9f 4f       	sbci	r25, 0xFF	; 255
    43c6:	08 95       	ret

000043c8 <__fp_split3>:
__fp_split3():
    43c8:	57 fd       	sbrc	r21, 7
    43ca:	90 58       	subi	r25, 0x80	; 128
    43cc:	44 0f       	add	r20, r20
    43ce:	55 1f       	adc	r21, r21
    43d0:	59 f0       	breq	.+22     	; 0x43e8 <__fp_splitA+0x10>
    43d2:	5f 3f       	cpi	r21, 0xFF	; 255
    43d4:	71 f0       	breq	.+28     	; 0x43f2 <__fp_splitA+0x1a>
    43d6:	47 95       	ror	r20

000043d8 <__fp_splitA>:
    43d8:	88 0f       	add	r24, r24
    43da:	97 fb       	bst	r25, 7
    43dc:	99 1f       	adc	r25, r25
    43de:	61 f0       	breq	.+24     	; 0x43f8 <__fp_splitA+0x20>
    43e0:	9f 3f       	cpi	r25, 0xFF	; 255
    43e2:	79 f0       	breq	.+30     	; 0x4402 <__fp_splitA+0x2a>
    43e4:	87 95       	ror	r24
    43e6:	08 95       	ret
    43e8:	12 16       	cp	r1, r18
    43ea:	13 06       	cpc	r1, r19
    43ec:	14 06       	cpc	r1, r20
    43ee:	55 1f       	adc	r21, r21
    43f0:	f2 cf       	rjmp	.-28     	; 0x43d6 <__fp_split3+0xe>
    43f2:	46 95       	lsr	r20
    43f4:	f1 df       	rcall	.-30     	; 0x43d8 <__fp_splitA>
    43f6:	08 c0       	rjmp	.+16     	; 0x4408 <__fp_splitA+0x30>
    43f8:	16 16       	cp	r1, r22
    43fa:	17 06       	cpc	r1, r23
    43fc:	18 06       	cpc	r1, r24
    43fe:	99 1f       	adc	r25, r25
    4400:	f1 cf       	rjmp	.-30     	; 0x43e4 <__fp_splitA+0xc>
    4402:	86 95       	lsr	r24
    4404:	71 05       	cpc	r23, r1
    4406:	61 05       	cpc	r22, r1
    4408:	08 94       	sec
    440a:	08 95       	ret

0000440c <__fp_zero>:
__fp_zero():
    440c:	e8 94       	clt

0000440e <__fp_szero>:
    440e:	bb 27       	eor	r27, r27
    4410:	66 27       	eor	r22, r22
    4412:	77 27       	eor	r23, r23
    4414:	cb 01       	movw	r24, r22
    4416:	97 f9       	bld	r25, 7
    4418:	08 95       	ret

0000441a <__gesf2>:
__gesf2():
    441a:	8a df       	rcall	.-236    	; 0x4330 <__fp_cmp>
    441c:	08 f4       	brcc	.+2      	; 0x4420 <__gesf2+0x6>
    441e:	8f ef       	ldi	r24, 0xFF	; 255
    4420:	08 95       	ret

00004422 <__mulsf3>:
__mulsf3():
    4422:	0b d0       	rcall	.+22     	; 0x443a <__mulsf3x>
    4424:	c0 cf       	rjmp	.-128    	; 0x43a6 <__fp_round>
    4426:	b1 df       	rcall	.-158    	; 0x438a <__fp_pscA>
    4428:	28 f0       	brcs	.+10     	; 0x4434 <__mulsf3+0x12>
    442a:	b6 df       	rcall	.-148    	; 0x4398 <__fp_pscB>
    442c:	18 f0       	brcs	.+6      	; 0x4434 <__mulsf3+0x12>
    442e:	95 23       	and	r25, r21
    4430:	09 f0       	breq	.+2      	; 0x4434 <__mulsf3+0x12>
    4432:	a2 cf       	rjmp	.-188    	; 0x4378 <__fp_inf>
    4434:	a7 cf       	rjmp	.-178    	; 0x4384 <__fp_nan>
    4436:	11 24       	eor	r1, r1
    4438:	ea cf       	rjmp	.-44     	; 0x440e <__fp_szero>

0000443a <__mulsf3x>:
__mulsf3x():
    443a:	c6 df       	rcall	.-116    	; 0x43c8 <__fp_split3>
    443c:	a0 f3       	brcs	.-24     	; 0x4426 <__mulsf3+0x4>

0000443e <__mulsf3_pse>:
    443e:	95 9f       	mul	r25, r21
    4440:	d1 f3       	breq	.-12     	; 0x4436 <__mulsf3+0x14>
    4442:	95 0f       	add	r25, r21
    4444:	50 e0       	ldi	r21, 0x00	; 0
    4446:	55 1f       	adc	r21, r21
    4448:	62 9f       	mul	r22, r18
    444a:	f0 01       	movw	r30, r0
    444c:	72 9f       	mul	r23, r18
    444e:	bb 27       	eor	r27, r27
    4450:	f0 0d       	add	r31, r0
    4452:	b1 1d       	adc	r27, r1
    4454:	63 9f       	mul	r22, r19
    4456:	aa 27       	eor	r26, r26
    4458:	f0 0d       	add	r31, r0
    445a:	b1 1d       	adc	r27, r1
    445c:	aa 1f       	adc	r26, r26
    445e:	64 9f       	mul	r22, r20
    4460:	66 27       	eor	r22, r22
    4462:	b0 0d       	add	r27, r0
    4464:	a1 1d       	adc	r26, r1
    4466:	66 1f       	adc	r22, r22
    4468:	82 9f       	mul	r24, r18
    446a:	22 27       	eor	r18, r18
    446c:	b0 0d       	add	r27, r0
    446e:	a1 1d       	adc	r26, r1
    4470:	62 1f       	adc	r22, r18
    4472:	73 9f       	mul	r23, r19
    4474:	b0 0d       	add	r27, r0
    4476:	a1 1d       	adc	r26, r1
    4478:	62 1f       	adc	r22, r18
    447a:	83 9f       	mul	r24, r19
    447c:	a0 0d       	add	r26, r0
    447e:	61 1d       	adc	r22, r1
    4480:	22 1f       	adc	r18, r18
    4482:	74 9f       	mul	r23, r20
    4484:	33 27       	eor	r19, r19
    4486:	a0 0d       	add	r26, r0
    4488:	61 1d       	adc	r22, r1
    448a:	23 1f       	adc	r18, r19
    448c:	84 9f       	mul	r24, r20
    448e:	60 0d       	add	r22, r0
    4490:	21 1d       	adc	r18, r1
    4492:	82 2f       	mov	r24, r18
    4494:	76 2f       	mov	r23, r22
    4496:	6a 2f       	mov	r22, r26
    4498:	11 24       	eor	r1, r1
    449a:	9f 57       	subi	r25, 0x7F	; 127
    449c:	50 40       	sbci	r21, 0x00	; 0
    449e:	8a f0       	brmi	.+34     	; 0x44c2 <__mulsf3_pse+0x84>
    44a0:	e1 f0       	breq	.+56     	; 0x44da <__mulsf3_pse+0x9c>
    44a2:	88 23       	and	r24, r24
    44a4:	4a f0       	brmi	.+18     	; 0x44b8 <__mulsf3_pse+0x7a>
    44a6:	ee 0f       	add	r30, r30
    44a8:	ff 1f       	adc	r31, r31
    44aa:	bb 1f       	adc	r27, r27
    44ac:	66 1f       	adc	r22, r22
    44ae:	77 1f       	adc	r23, r23
    44b0:	88 1f       	adc	r24, r24
    44b2:	91 50       	subi	r25, 0x01	; 1
    44b4:	50 40       	sbci	r21, 0x00	; 0
    44b6:	a9 f7       	brne	.-22     	; 0x44a2 <__mulsf3_pse+0x64>
    44b8:	9e 3f       	cpi	r25, 0xFE	; 254
    44ba:	51 05       	cpc	r21, r1
    44bc:	70 f0       	brcs	.+28     	; 0x44da <__mulsf3_pse+0x9c>
    44be:	5c cf       	rjmp	.-328    	; 0x4378 <__fp_inf>
    44c0:	a6 cf       	rjmp	.-180    	; 0x440e <__fp_szero>
    44c2:	5f 3f       	cpi	r21, 0xFF	; 255
    44c4:	ec f3       	brlt	.-6      	; 0x44c0 <__mulsf3_pse+0x82>
    44c6:	98 3e       	cpi	r25, 0xE8	; 232
    44c8:	dc f3       	brlt	.-10     	; 0x44c0 <__mulsf3_pse+0x82>
    44ca:	86 95       	lsr	r24
    44cc:	77 95       	ror	r23
    44ce:	67 95       	ror	r22
    44d0:	b7 95       	ror	r27
    44d2:	f7 95       	ror	r31
    44d4:	e7 95       	ror	r30
    44d6:	9f 5f       	subi	r25, 0xFF	; 255
    44d8:	c1 f7       	brne	.-16     	; 0x44ca <__mulsf3_pse+0x8c>
    44da:	fe 2b       	or	r31, r30
    44dc:	88 0f       	add	r24, r24
    44de:	91 1d       	adc	r25, r1
    44e0:	96 95       	lsr	r25
    44e2:	87 95       	ror	r24
    44e4:	97 f9       	bld	r25, 7
    44e6:	08 95       	ret

000044e8 <__unordsf2>:
    44e8:	23 df       	rcall	.-442    	; 0x4330 <__fp_cmp>
    44ea:	88 0b       	sbc	r24, r24
    44ec:	99 0b       	sbc	r25, r25
    44ee:	08 95       	ret

000044f0 <__mulsi3>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    44f0:	db 01       	movw	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    44f2:	8f 93       	push	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    44f4:	9f 93       	push	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    44f6:	a1 dd       	rcall	.-1214   	; 0x403a <__muluhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    44f8:	bf 91       	pop	r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    44fa:	af 91       	pop	r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    44fc:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    44fe:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    4500:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    4502:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    4504:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    4506:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    4508:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    450a:	11 24       	eor	r1, r1
__mulsi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    450c:	08 95       	ret

0000450e <__udivmodhi4>:
__udivmodhi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    450e:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    4510:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    4512:	51 e1       	ldi	r21, 0x11	; 17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    4514:	07 c0       	rjmp	.+14     	; 0x4524 <__udivmodhi4_ep>

00004516 <__udivmodhi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    4516:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    4518:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    451a:	a6 17       	cp	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    451c:	b7 07       	cpc	r27, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    451e:	10 f0       	brcs	.+4      	; 0x4524 <__udivmodhi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    4520:	a6 1b       	sub	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    4522:	b7 0b       	sbc	r27, r23

00004524 <__udivmodhi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    4524:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    4526:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    4528:	5a 95       	dec	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    452a:	a9 f7       	brne	.-22     	; 0x4516 <__udivmodhi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    452c:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    452e:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    4530:	bc 01       	movw	r22, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    4532:	cd 01       	movw	r24, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    4534:	08 95       	ret

00004536 <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    4536:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    4538:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    453a:	00 24       	eor	r0, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    453c:	00 1c       	adc	r0, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    453e:	0b be       	out	0x3b, r0	; 59
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    4540:	07 90       	elpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    4542:	f6 91       	elpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    4544:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    4546:	09 94       	ijmp

00004548 <abort>:
abort():
    4548:	81 e0       	ldi	r24, 0x01	; 1
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	f8 94       	cli
    454e:	00 c0       	rjmp	.+0      	; 0x4550 <_exit>

00004550 <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    4550:	f8 94       	cli

00004552 <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    4552:	ff cf       	rjmp	.-2      	; 0x4552 <__stop_program>
