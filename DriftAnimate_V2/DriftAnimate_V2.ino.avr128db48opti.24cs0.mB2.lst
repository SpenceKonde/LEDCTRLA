
C:\Users\Spence\AppData\Local\Temp\arduino_build_761867/DriftAnimate_V2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000200 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
     200:	db c3       	rjmp	.+1974   	; 0x9b8 <__ctors_end>
     202:	00 00       	nop
../../../../crt1/gcrt1.S:67
     204:	03 c4       	rjmp	.+2054   	; 0xa0c <__bad_interrupt>
     206:	00 00       	nop
../../../../crt1/gcrt1.S:68
     208:	01 c4       	rjmp	.+2050   	; 0xa0c <__bad_interrupt>
     20a:	00 00       	nop
../../../../crt1/gcrt1.S:69
     20c:	ff c3       	rjmp	.+2046   	; 0xa0c <__bad_interrupt>
     20e:	00 00       	nop
../../../../crt1/gcrt1.S:70
     210:	fd c3       	rjmp	.+2042   	; 0xa0c <__bad_interrupt>
     212:	00 00       	nop
../../../../crt1/gcrt1.S:71
     214:	fb c3       	rjmp	.+2038   	; 0xa0c <__bad_interrupt>
     216:	00 00       	nop
../../../../crt1/gcrt1.S:72
     218:	f9 c3       	rjmp	.+2034   	; 0xa0c <__bad_interrupt>
     21a:	00 00       	nop
../../../../crt1/gcrt1.S:73
     21c:	f7 c3       	rjmp	.+2030   	; 0xa0c <__bad_interrupt>
     21e:	00 00       	nop
../../../../crt1/gcrt1.S:74
     220:	f5 c3       	rjmp	.+2026   	; 0xa0c <__bad_interrupt>
     222:	00 00       	nop
../../../../crt1/gcrt1.S:75
     224:	f3 c3       	rjmp	.+2022   	; 0xa0c <__bad_interrupt>
     226:	00 00       	nop
../../../../crt1/gcrt1.S:76
     228:	f1 c3       	rjmp	.+2018   	; 0xa0c <__bad_interrupt>
     22a:	00 00       	nop
../../../../crt1/gcrt1.S:77
     22c:	ef c3       	rjmp	.+2014   	; 0xa0c <__bad_interrupt>
     22e:	00 00       	nop
../../../../crt1/gcrt1.S:78
     230:	ed c3       	rjmp	.+2010   	; 0xa0c <__bad_interrupt>
     232:	00 00       	nop
../../../../crt1/gcrt1.S:79
     234:	eb c3       	rjmp	.+2006   	; 0xa0c <__bad_interrupt>
     236:	00 00       	nop
../../../../crt1/gcrt1.S:80
     238:	e9 c3       	rjmp	.+2002   	; 0xa0c <__bad_interrupt>
     23a:	00 00       	nop
../../../../crt1/gcrt1.S:81
     23c:	e7 c3       	rjmp	.+1998   	; 0xa0c <__bad_interrupt>
     23e:	00 00       	nop
../../../../crt1/gcrt1.S:82
     240:	e5 c3       	rjmp	.+1994   	; 0xa0c <__bad_interrupt>
     242:	00 00       	nop
../../../../crt1/gcrt1.S:83
     244:	e3 c3       	rjmp	.+1990   	; 0xa0c <__bad_interrupt>
     246:	00 00       	nop
../../../../crt1/gcrt1.S:84
     248:	e1 c3       	rjmp	.+1986   	; 0xa0c <__bad_interrupt>
     24a:	00 00       	nop
../../../../crt1/gcrt1.S:85
     24c:	df c3       	rjmp	.+1982   	; 0xa0c <__bad_interrupt>
     24e:	00 00       	nop
../../../../crt1/gcrt1.S:86
     250:	dd c3       	rjmp	.+1978   	; 0xa0c <__bad_interrupt>
     252:	00 00       	nop
../../../../crt1/gcrt1.S:87
     254:	0c 94 a5 14 	jmp	0x294a	; 0x294a <__vector_21>
../../../../crt1/gcrt1.S:88
     258:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__vector_22>
../../../../crt1/gcrt1.S:89
     25c:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__vector_23>
../../../../crt1/gcrt1.S:90
     260:	d5 c3       	rjmp	.+1962   	; 0xa0c <__bad_interrupt>
     262:	00 00       	nop
../../../../crt1/gcrt1.S:91
     264:	d3 c3       	rjmp	.+1958   	; 0xa0c <__bad_interrupt>
     266:	00 00       	nop
../../../../crt1/gcrt1.S:92
     268:	d1 c3       	rjmp	.+1954   	; 0xa0c <__bad_interrupt>
     26a:	00 00       	nop
../../../../crt1/gcrt1.S:93
     26c:	cf c3       	rjmp	.+1950   	; 0xa0c <__bad_interrupt>
     26e:	00 00       	nop
../../../../crt1/gcrt1.S:94
     270:	cd c3       	rjmp	.+1946   	; 0xa0c <__bad_interrupt>
     272:	00 00       	nop
../../../../crt1/gcrt1.S:95
     274:	cb c3       	rjmp	.+1942   	; 0xa0c <__bad_interrupt>
     276:	00 00       	nop
../../../../crt1/gcrt1.S:96
     278:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__vector_30>
../../../../crt1/gcrt1.S:97
     27c:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__vector_31>
../../../../crt1/gcrt1.S:98
     280:	c5 c3       	rjmp	.+1930   	; 0xa0c <__bad_interrupt>
     282:	00 00       	nop
../../../../crt1/gcrt1.S:99
     284:	c3 c3       	rjmp	.+1926   	; 0xa0c <__bad_interrupt>
     286:	00 00       	nop
../../../../crt1/gcrt1.S:100
     288:	c1 c3       	rjmp	.+1922   	; 0xa0c <__bad_interrupt>
     28a:	00 00       	nop
../../../../crt1/gcrt1.S:101
     28c:	bf c3       	rjmp	.+1918   	; 0xa0c <__bad_interrupt>
     28e:	00 00       	nop
../../../../crt1/gcrt1.S:102
     290:	bd c3       	rjmp	.+1914   	; 0xa0c <__bad_interrupt>
     292:	00 00       	nop
../../../../crt1/gcrt1.S:103
     294:	bb c3       	rjmp	.+1910   	; 0xa0c <__bad_interrupt>
     296:	00 00       	nop
../../../../crt1/gcrt1.S:104
     298:	b9 c3       	rjmp	.+1906   	; 0xa0c <__bad_interrupt>
     29a:	00 00       	nop
../../../../crt1/gcrt1.S:105
     29c:	b7 c3       	rjmp	.+1902   	; 0xa0c <__bad_interrupt>
     29e:	00 00       	nop
../../../../crt1/gcrt1.S:106
     2a0:	b5 c3       	rjmp	.+1898   	; 0xa0c <__bad_interrupt>
     2a2:	00 00       	nop
../../../../crt1/gcrt1.S:107
     2a4:	b3 c3       	rjmp	.+1894   	; 0xa0c <__bad_interrupt>
     2a6:	00 00       	nop
../../../../crt1/gcrt1.S:108
     2a8:	b1 c3       	rjmp	.+1890   	; 0xa0c <__bad_interrupt>
     2aa:	00 00       	nop
../../../../crt1/gcrt1.S:109
     2ac:	af c3       	rjmp	.+1886   	; 0xa0c <__bad_interrupt>
     2ae:	00 00       	nop
../../../../crt1/gcrt1.S:110
     2b0:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__vector_44>
../../../../crt1/gcrt1.S:111
     2b4:	ab c3       	rjmp	.+1878   	; 0xa0c <__bad_interrupt>
     2b6:	00 00       	nop
../../../../crt1/gcrt1.S:112
     2b8:	a9 c3       	rjmp	.+1874   	; 0xa0c <__bad_interrupt>
     2ba:	00 00       	nop
../../../../crt1/gcrt1.S:113
     2bc:	a7 c3       	rjmp	.+1870   	; 0xa0c <__bad_interrupt>
     2be:	00 00       	nop
../../../../crt1/gcrt1.S:114
     2c0:	a5 c3       	rjmp	.+1866   	; 0xa0c <__bad_interrupt>
     2c2:	00 00       	nop
../../../../crt1/gcrt1.S:115
     2c4:	a3 c3       	rjmp	.+1862   	; 0xa0c <__bad_interrupt>
     2c6:	00 00       	nop
../../../../crt1/gcrt1.S:116
     2c8:	a1 c3       	rjmp	.+1858   	; 0xa0c <__bad_interrupt>
     2ca:	00 00       	nop
../../../../crt1/gcrt1.S:117
     2cc:	9f c3       	rjmp	.+1854   	; 0xa0c <__bad_interrupt>
     2ce:	00 00       	nop
../../../../crt1/gcrt1.S:118
     2d0:	9d c3       	rjmp	.+1850   	; 0xa0c <__bad_interrupt>
     2d2:	00 00       	nop
../../../../crt1/gcrt1.S:119
     2d4:	9b c3       	rjmp	.+1846   	; 0xa0c <__bad_interrupt>
     2d6:	00 00       	nop
../../../../crt1/gcrt1.S:120
     2d8:	99 c3       	rjmp	.+1842   	; 0xa0c <__bad_interrupt>
     2da:	00 00       	nop
../../../../crt1/gcrt1.S:121
     2dc:	97 c3       	rjmp	.+1838   	; 0xa0c <__bad_interrupt>
     2de:	00 00       	nop
../../../../crt1/gcrt1.S:122
     2e0:	95 c3       	rjmp	.+1834   	; 0xa0c <__bad_interrupt>
     2e2:	00 00       	nop
../../../../crt1/gcrt1.S:123
     2e4:	93 c3       	rjmp	.+1830   	; 0xa0c <__bad_interrupt>
     2e6:	00 00       	nop
../../../../crt1/gcrt1.S:124
     2e8:	91 c3       	rjmp	.+1826   	; 0xa0c <__bad_interrupt>
     2ea:	00 00       	nop
../../../../crt1/gcrt1.S:125
     2ec:	8f c3       	rjmp	.+1822   	; 0xa0c <__bad_interrupt>
     2ee:	00 00       	nop
../../../../crt1/gcrt1.S:126
     2f0:	8d c3       	rjmp	.+1818   	; 0xa0c <__bad_interrupt>
	...

000002f4 <__trampolines_end>:
__trampolines_start():
     2f4:	20 44       	sbci	r18, 0x40	; 64
     2f6:	52 49       	sbci	r21, 0x92	; 146
     2f8:	46 54       	subi	r20, 0x46	; 70
     2fa:	32 20       	and	r3, r2
	...

000002fd <mode9Name>:
     2fd:	20 46 41 44 45 32 20 20 00                           FADE2  .

00000306 <mode8Name>:
     306:	20 44 4f 54 53 32 20 20 00                           DOTS2  .

0000030f <mode7Name>:
     30f:	20 20 57 41 56 45 20 20 00                            WAVE  .

00000318 <mode6Name>:
     318:	20 20 46 41 44 45 20 20 00                            FADE  .

00000321 <mode5Name>:
     321:	20 20 44 4f 54 53 20 20 00                            DOTS  .

0000032a <mode4Name>:
     32a:	20 52 41 49 4e 42 4f 57 00                           RAINBOW.

00000333 <mode3Name>:
     333:	20 50 55 4c 53 45 20 20 00                           PULSE  .

0000033c <mode2Name>:
     33c:	20 43 4f 4d 45 54 53 20 00                           COMETS .

00000345 <mode1Name>:
     345:	44 52 49 46 54 49 4e 47 00                          DRIFTING.

0000034e <mode0Name>:
     34e:	20 53 4f 4c 49 44 20 20 00                           SOLID  .

00000357 <mode7R2>:
     357:	20 44 57 45 4c 4c 20 00                              DWELL .

0000035f <mode4R2>:
     35f:	20 44 49 52 45 43 54 00                              DIRECT.

00000367 <mode5R1>:
     367:	44 45 4e 53 49 54 59 00                             DENSITY.

0000036f <mode2R2>:
     36f:	20 4c 45 4e 47 54 48 00                              LENGTH.

00000377 <mode1R1>:
     377:	20 4e 55 4d 42 45 52 00                              NUMBER.

0000037f <mode1R0>:
     37f:	20 53 50 45 45 44 20 00                              SPEED .

00000387 <pallete10>:
     387:	53 54 41 54 49 43 20 00                             STATIC .

0000038f <pallete9>:
     38f:	50 55 52 50 4c 45 20 00                             PURPLE .

00000397 <pallete8>:
     397:	50 55 4d 50 4b 49 4e 00                             PUMPKIN.

0000039f <pallete7>:
     39f:	4a 55 4e 47 4c 45 20 00                             JUNGLE .

000003a7 <pallete6>:
     3a7:	20 20 46 49 52 45 20 00                               FIRE .

000003af <pallete5>:
     3af:	53 45 58 54 49 4d 45 00                             SEXTIME.

000003b7 <pallete4>:
     3b7:	4c 49 5a 41 52 44 20 00                             LIZARD .

000003bf <pallete3>:
     3bf:	53 55 4e 53 45 54 20 00                             SUNSET .

000003c7 <pallete2>:
     3c7:	20 20 43 4f 4f 4c 20 00                               COOL .

000003cf <pallete1>:
     3cf:	20 20 57 41 52 4d 20 00                               WARM .

000003d7 <pallete0>:
     3d7:	52 41 49 4e 42 4f 57 00                             RAINBOW.

000003df <mode0R0>:
     3df:	20 20 20 20 20 20 20 00                                    .

000003e7 <mode1L5>:
     3e7:	4d 41 58 20 42 4c 55 00                             MAX BLU.

000003ef <mode1L4>:
     3ef:	4d 49 4e 20 42 4c 55 00                             MIN BLU.

000003f7 <mode1L3>:
     3f7:	4d 41 58 20 47 52 4e 00                             MAX GRN.

000003ff <mode1L2>:
     3ff:	4d 49 4e 20 47 52 4e 00                             MIN GRN.

00000407 <mode1L1>:
     407:	4d 41 58 20 52 45 44 00                             MAX RED.

0000040f <mode1L0>:
     40f:	4d 49 4e 20 52 45 44 00                             MIN RED.

00000417 <mode0L2>:
     417:	20 20 42 4c 55 45 20 00                               BLUE .

0000041f <mode0L1>:
     41f:	20 47 52 45 45 4e 20 00                              GREEN .

00000427 <mode0L0>:
     427:	20 20 52 45 44 20 20 00                               RED  .

0000042f <defaultValueRight>:
	...
     437:	05 00 00 00 00 00 00 00 0a 0a 05 00 00 00 00 00     ................
     447:	05 05 00 00 00 00 00 00 05 0a 00 00 00 00 00 00     ................
     457:	05 0a 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
     467:	05 14 02 00 00 00 00 00 05 0a 00 00 00 00 00 00     ................
     477:	05 0a 02 00 00 00 00 00 05 0a 02 00 00 00 00 00     ................

00000487 <defaultValueLeft>:
     487:	ff ff ff 00 00 00 00 00 00 1f 00 1f 00 1f 00 00     ................
     497:	00 1f 00 1f 00 1f 00 00 00 1f 00 1f 00 1f 00 00     ................
	...
     4af:	00 1f 00 1f 00 1f 00 00 ff ff ff ff ff ff 00 00     ................
	...

000004df <getModeRatio(unsigned int)::__c>:
     4df:	45 52 52 4f 52 3a 20 72 61 74 69 6f 20 6f 75 74     ERROR: ratio out
     4ef:	20 6f 66 20 72 61 6e 67 65 00                        of range.

000004f9 <leftValues>:
     4f9:	00 01 02 03 04 06 08 0b 0e 12 16 1b 21 27 2e 36     ............!'.6
     509:	3f 49 54 5f 6a 75 80 8b 97 a3 b0 bd cc dc ed ff     ?IT_ju..........

00000519 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)::__c>:
     519:	45 52 52 4f 52 3a 20 72 61 74 69 6f 20 6f 75 74     ERROR: ratio out
     529:	20 6f 66 20 72 61 6e 67 65 00                        of range.

00000533 <colorPallete>:
     533:	ff 00 00 00 ff 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
     54b:	ff 60 20 ff 64 00 f0 80 28 ff 20 00 00 00 00 00     .` .d...(. .....
	...
     563:	ff 00 40 00 40 ff 00 d2 a0 a0 00 a0 00 00 00 00     ..@.@...........
	...
     57b:	ff 50 14 ff 64 00 c4 10 40 a0 00 40 ff 20 00 00     .P..d...@..@. ..
	...
     593:	00 ff 00 00 80 10 00 20 00 40 a0 00 00 00 00 00     ....... .@......
	...
     5ab:	ff 00 10 c4 00 40 ff 10 64 ff 00 40 00 00 00 00     .....@..d..@....
	...
     5c3:	ff 40 00 c4 20 00 dc 40 00 ff 10 00 00 00 00 00     .@.. ..@........
	...
     5db:	00 ff 00 20 ff 00 00 ff 20 20 ff 20 00 00 00 00     ... ....  . ....
	...
     5f3:	ff 40 00 c4 20 00 dc 40 00 20 ff 00 00 00 00 00     .@.. ..@. ......
	...
     60b:	c0 00 60 c4 00 40 ff 10 64 ff 00 40 00 00 00 00     ..`..@..d..@....
	...
     623:	a0 a0 8c e4 e4 c8 80 80 6e 3c 3c 32 00 00 00 00     ........n<<2....
	...

0000063b <maxValueLeft>:
     63b:	1f 1f 1f 00 00 00 00 00 1f 1f 1f 1f 1f 1f 00 00     ................
     64b:	1f 1f 1f 1f 1f 1f 00 00 1f 1f 1f 1f 1f 1f 00 00     ................
	...
     663:	1f 1f 1f 1f 1f 1f 00 00 1f 1f 1f 1f 1f 1f 00 00     ................
     673:	0a 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00     ................
     683:	0a 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00     ................

00000693 <__vector_30::enc_states>:
     693:	00 ff 01 00 01 00 00 ff ff 00 00 01 00 01 ff 00     ................

000006a3 <setup::__c>:
     6a3:	4e 6f 74 68 69 6e 67 20 77 6f 72 6b 73 21 00        Nothing works!.

000006b2 <setup::__c>:
     6b2:	57 6f 61 68 20 49 27 6d 20 6f 6e 20 61 20 44 42     Woah I'm on a DB
     6c2:	21 00                                               !.

000006c4 <handleUI()::__c>:
     6c4:	4d 6f 64 65 20 53 61 76 65 64 00                    Mode Saved.

000006cf <handleUI()::__c>:
     6cf:	63 6c 65 61 72 65 64 00                             cleared.

000006d7 <handleUI()::__c>:
     6d7:	53 61 76 65 64 20 6d 6f 64 65 00                    Saved mode.

000006e2 <doAttractLCD()::__c>:
     6e2:	41 44 4a 55 53 54 20 4c 49 47 48 54 49 4e 47 00     ADJUST LIGHTING.

000006f2 <doAttractLCD()::__c>:
     6f2:	54 55 52 4e 20 4d 59 20 4b 4e 4f 42 53 20 3b 29     TURN MY KNOBS ;)
	...

00000703 <doAttractLCD()::__c>:
     703:	55 53 45 20 4b 4e 4f 42 53 26 42 55 54 54 4f 4e     USE KNOBS&BUTTON
	...

00000714 <doAttractLCD()::__c>:
     714:	50 4c 41 59 20 57 49 54 48 20 4d 45 00              PLAY WITH ME.

00000721 <doAttractLCD()::__c>:
     721:	72 65 61 6c 20 70 61 72 74 79 00                    real party.

0000072c <doAttractLCD()::__c>:
     72c:	54 68 69 73 20 69 73 20 6e 6f 74 20 61 00           This is not a.

0000073a <doAttractLCD()::__c>:
     73a:	41 56 52 31 32 38 44 42 34 38 00                    AVR128DB48.

00000745 <doAttractLCD()::__c>:
     745:	4c 69 67 68 74 20 54 65 73 74 20 76 32 2e 31 00     Light Test v2.1.

00000755 <handleLCD()::__c>:
     755:	46 57 44 00                                         FWD.

00000759 <handleLCD()::__c>:
     759:	52 45 56 00                                         REV.

0000075d <modeNames>:
     75d:	4e 03 45 03 3c 03 33 03 2a 03 21 03 18 03 0f 03     N.E.<.3.*.!.....
     76d:	06 03 fd 02 f4 02                                   ......

00000773 <handleLCD()::__c>:
     773:	20 20 20 20 00                                          .

00000778 <maxSetting>:
     778:	02 00 05 00 05 02 05 01 ff 02 05 02 05 00 00 03     ................
     788:	00 02 00 03 00 02                                   ......

0000078e <handleLCD()::__c>:
     78e:	20 20 20 20 00                                          .

00000793 <modesR>:
     793:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     7a3:	7f 03 77 03 00 00 00 00 00 00 00 00 00 00 00 00     ..w.............
     7b3:	7f 03 77 03 6f 03 00 00 00 00 00 00 00 00 00 00     ..w.o...........
     7c3:	7f 03 67 03 00 00 00 00 00 00 00 00 00 00 00 00     ..g.............
     7d3:	7f 03 6f 03 5f 03 00 00 00 00 00 00 00 00 00 00     ..o._...........
     7e3:	7f 03 67 03 5f 03 00 00 00 00 00 00 00 00 00 00     ..g._...........
     7f3:	7f 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     803:	7f 03 6f 03 57 03 5f 03 00 00 00 00 00 00 00 00     ..o.W._.........
     813:	7f 03 67 03 5f 03 00 00 00 00 00 00 00 00 00 00     ..g._...........
     823:	7f 03 6f 03 57 03 5f 03 00 00 00 00 00 00 00 00     ..o.W._.........
     833:	7f 03 6f 03 57 03 00 00 00 00 00 00 00 00 00 00     ..o.W...........

00000843 <palleteNames>:
     843:	d7 03 cf 03 c7 03 bf 03 b7 03 af 03 a7 03 9f 03     ................
     853:	97 03 8f 03 87 03                                   ......

00000859 <modesL>:
     859:	27 04 1f 04 17 04 00 00 00 00 00 00 00 00 00 00     '...............
     869:	0f 04 07 04 ff 03 f7 03 ef 03 e7 03 00 00 00 00     ................
     879:	0f 04 07 04 ff 03 f7 03 ef 03 e7 03 00 00 00 00     ................
     889:	0f 04 07 04 ff 03 f7 03 ef 03 e7 03 00 00 00 00     ................
     899:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8a9:	0f 04 07 04 ff 03 f7 03 ef 03 e7 03 00 00 00 00     ................
     8b9:	0f 04 ff 03 ef 03 07 04 f7 03 e7 03 00 00 00 00     ................
     8c9:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8d9:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e9:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8f9:	df 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00000909 <pulseBrightnessTable>:
     909:	00 01 02 03 04 05 06 07 08 09 0a 0c 0e 10 12 14     ................
     919:	16 18 1a 1c 1f 22 25 28 2b 2e 31 34 37 3b 3f 43     ....."%(+.147;?C
     929:	47 4b 4f 53 57 5c 61 66 6b 70 75 7a 7f 85 8b 91     GKOSW\afkpuz....
     939:	97 9d a3 a9 af b6 bd c4 cb d2 d9 e0 e7 ef f7 ff     ................

00000949 <colorCount>:
     949:	03 04 04 05 04 04 04 04 04 04 04                    ...........

00000954 <maxValueRight>:
	...
     95c:	0a 00 00 00 00 00 00 00 0a 0a 0a 00 00 00 00 00     ................
     96c:	0a 14 00 00 00 00 00 00 0a 0a 01 00 00 00 00 00     ................
     97c:	0a 0c 01 00 00 00 00 00 0a 00 00 00 00 00 00 00     ................
     98c:	0a 28 14 01 00 00 00 00 0a 0c 01 00 00 00 00 00     .(..............
     99c:	0a 14 14 01 00 00 00 00 0a 14 14 00 00 00 00 00     ................

000009ac <_usart0_pins>:
     9ac:	00 00 02 01 04 06 03 00 03 00                       ..........

000009b6 <__ctors_start>:
__ctors_start():
     9b6:	c1 16       	cp	r12, r17

000009b8 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     9b8:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     9ba:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     9bc:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     9be:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     9c0:	df e7       	ldi	r29, 0x7F	; 127
../../../../crt1/gcrt1.S:237
     9c2:	de bf       	out	0x3e, r29	; 62

000009c4 <_initThreeStuff()>:
__do_copy_data():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     9c4:	11 e4       	ldi	r17, 0x41	; 65
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     9c8:	b0 e4       	ldi	r27, 0x40	; 64
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     9ca:	ec e7       	ldi	r30, 0x7C	; 124
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     9cc:	f9 e4       	ldi	r31, 0x49	; 73
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     9ce:	00 e0       	ldi	r16, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     9d0:	0b bf       	out	0x3b, r16	; 59
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <_initThreeStuff()+0x14>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     9d4:	07 90       	elpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     9d6:	0d 92       	st	X+, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     9d8:	ac 34       	cpi	r26, 0x4C	; 76
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     9da:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     9dc:	d9 f7       	brne	.-10     	; 0x9d4 <_initThreeStuff()+0x10>

000009de <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     9de:	2e e4       	ldi	r18, 0x4E	; 78
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     9e0:	ac e4       	ldi	r26, 0x4C	; 76
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     9e2:	b1 e4       	ldi	r27, 0x41	; 65
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <.do_clear_bss_start>

000009e6 <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     9e6:	1d 92       	st	X+, r1

000009e8 <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     9e8:	ae 33       	cpi	r26, 0x3E	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     9ea:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <.do_clear_bss_loop>

000009ee <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     9ee:	14 e0       	ldi	r17, 0x04	; 4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     9f0:	cc ed       	ldi	r28, 0xDC	; 220
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     9f2:	d4 e0       	ldi	r29, 0x04	; 4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     9f4:	04 c0       	rjmp	.+8      	; 0x9fe <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     9f6:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     9f8:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     9fa:	0e 94 af 24 	call	0x495e	; 0x495e <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     9fe:	cb 3d       	cpi	r28, 0xDB	; 219
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     a00:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     a02:	c9 f7       	brne	.-14     	; 0x9f6 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     a04:	0e 94 44 17 	call	0x2e88	; 0x2e88 <main>
../../../../crt1/gcrt1.S:315
     a08:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <_exit>

00000a0c <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     a0c:	f9 cb       	rjmp	.-2062   	; 0x200 <__vectors>

00000a0e <Print::print(char)>:
print():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/main.cpp:197
  // Finally, none of these three things need to be done if running optiboot!
  // We want the vectors in the alt location, it checks, clears, and stashes the reset flags (in GPR0)
  // and it providews the entrypoint we call to write to flash.
#else
  void _initThreeStuff() __attribute__ ((naked)) __attribute__((used)) __attribute__ ((section (".init3")));
  void _initThreeStuff() {
     a0e:	dc 01       	movw	r26, r24
     a10:	ed 91       	ld	r30, X+
     a12:	fc 91       	ld	r31, X
     a14:	01 90       	ld	r0, Z+
     a16:	f0 81       	ld	r31, Z
     a18:	e0 2d       	mov	r30, r0
     a1a:	09 94       	ijmp

00000a1c <Print::print(__FlashStringHelper const*)>:
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	8c 01       	movw	r16, r24
     a2a:	7b 01       	movw	r14, r22
     a2c:	d0 e0       	ldi	r29, 0x00	; 0
     a2e:	c0 e0       	ldi	r28, 0x00	; 0
     a30:	f7 01       	movw	r30, r14
     a32:	ec 0f       	add	r30, r28
     a34:	fd 1f       	adc	r31, r29
     a36:	64 91       	lpm	r22, Z
     a38:	66 23       	and	r22, r22
     a3a:	61 f0       	breq	.+24     	; 0xa54 <Print::print(__FlashStringHelper const*)+0x38>
     a3c:	d8 01       	movw	r26, r16
     a3e:	ed 91       	ld	r30, X+
     a40:	fc 91       	ld	r31, X
     a42:	01 90       	ld	r0, Z+
     a44:	f0 81       	ld	r31, Z
     a46:	e0 2d       	mov	r30, r0
     a48:	c8 01       	movw	r24, r16
     a4a:	09 95       	icall
     a4c:	89 2b       	or	r24, r25
     a4e:	11 f0       	breq	.+4      	; 0xa54 <Print::print(__FlashStringHelper const*)+0x38>
     a50:	21 96       	adiw	r28, 0x01	; 1
     a52:	ee cf       	rjmp	.-36     	; 0xa30 <Print::print(__FlashStringHelper const*)+0x14>
     a54:	ce 01       	movw	r24, r28
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	08 95       	ret

00000a64 <Print::write(unsigned char const*, unsigned int)>:
write():
     a64:	af 92       	push	r10
     a66:	bf 92       	push	r11
     a68:	cf 92       	push	r12
     a6a:	df 92       	push	r13
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	6c 01       	movw	r12, r24
     a7a:	7b 01       	movw	r14, r22
     a7c:	8b 01       	movw	r16, r22
     a7e:	04 0f       	add	r16, r20
     a80:	15 1f       	adc	r17, r21
     a82:	eb 01       	movw	r28, r22
     a84:	5e 01       	movw	r10, r28
     a86:	ae 18       	sub	r10, r14
     a88:	bf 08       	sbc	r11, r15
     a8a:	c0 17       	cp	r28, r16
     a8c:	d1 07       	cpc	r29, r17
     a8e:	59 f0       	breq	.+22     	; 0xaa6 <Print::write(unsigned char const*, unsigned int)+0x42>
     a90:	69 91       	ld	r22, Y+
     a92:	d6 01       	movw	r26, r12
     a94:	ed 91       	ld	r30, X+
     a96:	fc 91       	ld	r31, X
     a98:	01 90       	ld	r0, Z+
     a9a:	f0 81       	ld	r31, Z
     a9c:	e0 2d       	mov	r30, r0
     a9e:	c6 01       	movw	r24, r12
     aa0:	09 95       	icall
     aa2:	89 2b       	or	r24, r25
     aa4:	79 f7       	brne	.-34     	; 0xa84 <Print::write(unsigned char const*, unsigned int)+0x20>
     aa6:	c5 01       	movw	r24, r10
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	df 90       	pop	r13
     ab6:	cf 90       	pop	r12
     ab8:	bf 90       	pop	r11
     aba:	af 90       	pop	r10
     abc:	08 95       	ret

00000abe <UartClass::availableForWrite()>:
availableForWrite():
     abe:	fc 01       	movw	r30, r24
     ac0:	55 89       	ldd	r21, Z+21	; 0x15
     ac2:	46 89       	ldd	r20, Z+22	; 0x16
     ac4:	25 2f       	mov	r18, r21
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	84 2f       	mov	r24, r20
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	82 1b       	sub	r24, r18
     ace:	93 0b       	sbc	r25, r19
     ad0:	54 17       	cp	r21, r20
     ad2:	10 f0       	brcs	.+4      	; 0xad8 <UartClass::availableForWrite()+0x1a>
     ad4:	cf 96       	adiw	r24, 0x3f	; 63
     ad6:	08 95       	ret
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	08 95       	ret

00000adc <UartClass::read()>:
read():
     adc:	fc 01       	movw	r30, r24
     ade:	93 89       	ldd	r25, Z+19	; 0x13
     ae0:	84 89       	ldd	r24, Z+20	; 0x14
     ae2:	98 17       	cp	r25, r24
     ae4:	61 f0       	breq	.+24     	; 0xafe <UartClass::read()+0x22>
     ae6:	a4 89       	ldd	r26, Z+20	; 0x14
     ae8:	ae 0f       	add	r26, r30
     aea:	bf 2f       	mov	r27, r31
     aec:	b1 1d       	adc	r27, r1
     aee:	57 96       	adiw	r26, 0x17	; 23
     af0:	8c 91       	ld	r24, X
     af2:	94 89       	ldd	r25, Z+20	; 0x14
     af4:	9f 5f       	subi	r25, 0xFF	; 255
     af6:	9f 73       	andi	r25, 0x3F	; 63
     af8:	94 8b       	std	Z+20, r25	; 0x14
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	08 95       	ret
     afe:	8f ef       	ldi	r24, 0xFF	; 255
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	08 95       	ret

00000b04 <UartClass::peek()>:
peek():
     b04:	fc 01       	movw	r30, r24
     b06:	93 89       	ldd	r25, Z+19	; 0x13
     b08:	84 89       	ldd	r24, Z+20	; 0x14
     b0a:	98 17       	cp	r25, r24
     b0c:	31 f0       	breq	.+12     	; 0xb1a <UartClass::peek()+0x16>
     b0e:	84 89       	ldd	r24, Z+20	; 0x14
     b10:	e8 0f       	add	r30, r24
     b12:	f1 1d       	adc	r31, r1
     b14:	87 89       	ldd	r24, Z+23	; 0x17
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	08 95       	ret
     b1a:	8f ef       	ldi	r24, 0xFF	; 255
     b1c:	9f ef       	ldi	r25, 0xFF	; 255
     b1e:	08 95       	ret

00000b20 <UartClass::available()>:
available():
     b20:	fc 01       	movw	r30, r24
     b22:	93 89       	ldd	r25, Z+19	; 0x13
     b24:	24 89       	ldd	r18, Z+20	; 0x14
     b26:	89 2f       	mov	r24, r25
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	80 5c       	subi	r24, 0xC0	; 192
     b2c:	9f 4f       	sbci	r25, 0xFF	; 255
     b2e:	82 1b       	sub	r24, r18
     b30:	91 09       	sbc	r25, r1
     b32:	8f 73       	andi	r24, 0x3F	; 63
     b34:	99 27       	eor	r25, r25
     b36:	08 95       	ret

00000b38 <UartClass::end()>:
end():
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	ec 01       	movw	r28, r24
     b3e:	e8 81       	ld	r30, Y
     b40:	f9 81       	ldd	r31, Y+1	; 0x01
     b42:	06 80       	ldd	r0, Z+6	; 0x06
     b44:	f7 81       	ldd	r31, Z+7	; 0x07
     b46:	e0 2d       	mov	r30, r0
     b48:	09 95       	icall
     b4a:	ec 85       	ldd	r30, Y+12	; 0x0c
     b4c:	fd 85       	ldd	r31, Y+13	; 0x0d
     b4e:	86 81       	ldd	r24, Z+6	; 0x06
     b50:	8f 73       	andi	r24, 0x3F	; 63
     b52:	86 83       	std	Z+6, r24	; 0x06
     b54:	ec 85       	ldd	r30, Y+12	; 0x0c
     b56:	fd 85       	ldd	r31, Y+13	; 0x0d
     b58:	85 81       	ldd	r24, Z+5	; 0x05
     b5a:	8f 71       	andi	r24, 0x1F	; 31
     b5c:	85 83       	std	Z+5, r24	; 0x05
     b5e:	ec 85       	ldd	r30, Y+12	; 0x0c
     b60:	fd 85       	ldd	r31, Y+13	; 0x0d
     b62:	80 e4       	ldi	r24, 0x40	; 64
     b64:	84 83       	std	Z+4, r24	; 0x04
     b66:	8c 89       	ldd	r24, Y+20	; 0x14
     b68:	8b 8b       	std	Y+19, r24	; 0x13
     b6a:	1a 8a       	std	Y+18, r1	; 0x12
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	08 95       	ret

00000b72 <UartClass::begin(unsigned long, unsigned int)>:
begin():
     b72:	8f 92       	push	r8
     b74:	9f 92       	push	r9
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	ec 01       	movw	r28, r24
     b88:	4a 01       	movw	r8, r20
     b8a:	5b 01       	movw	r10, r22
     b8c:	79 01       	movw	r14, r18
     b8e:	8a 89       	ldd	r24, Y+18	; 0x12
     b90:	80 ff       	sbrs	r24, 0
     b92:	07 c0       	rjmp	.+14     	; 0xba2 <UartClass::begin(unsigned long, unsigned int)+0x30>
     b94:	e8 81       	ld	r30, Y
     b96:	f9 81       	ldd	r31, Y+1	; 0x01
     b98:	02 88       	ldd	r0, Z+18	; 0x12
     b9a:	f3 89       	ldd	r31, Z+19	; 0x13
     b9c:	e0 2d       	mov	r30, r0
     b9e:	ce 01       	movw	r24, r28
     ba0:	09 95       	icall
     ba2:	0f 2d       	mov	r16, r15
     ba4:	1f 2d       	mov	r17, r15
     ba6:	10 95       	com	r17
     ba8:	10 7c       	andi	r17, 0xC0	; 192
     baa:	41 ec       	ldi	r20, 0xC1	; 193
     bac:	84 16       	cp	r8, r20
     bae:	46 ec       	ldi	r20, 0xC6	; 198
     bb0:	94 06       	cpc	r9, r20
     bb2:	4d e2       	ldi	r20, 0x2D	; 45
     bb4:	a4 06       	cpc	r10, r20
     bb6:	b1 04       	cpc	r11, r1
     bb8:	08 f4       	brcc	.+2      	; 0xbbc <UartClass::begin(unsigned long, unsigned int)+0x4a>
     bba:	c3 c0       	rjmp	.+390    	; 0xd42 <UartClass::begin(unsigned long, unsigned int)+0x1d0>
     bbc:	12 60       	ori	r17, 0x02	; 2
     bbe:	20 e4       	ldi	r18, 0x40	; 64
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	02 fd       	sbrc	r16, 2
     bc4:	18 60       	ori	r17, 0x08	; 8
     bc6:	09 70       	andi	r16, 0x09	; 9
     bc8:	17 fd       	sbrc	r17, 7
     bca:	00 68       	ori	r16, 0x80	; 128
     bcc:	81 2f       	mov	r24, r17
     bce:	88 7c       	andi	r24, 0xC8	; 200
     bd0:	03 ff       	sbrs	r16, 3
     bd2:	08 c0       	rjmp	.+16     	; 0xbe4 <UartClass::begin(unsigned long, unsigned int)+0x72>
     bd4:	41 2f       	mov	r20, r17
     bd6:	40 7c       	andi	r20, 0xC0	; 192
     bd8:	40 3c       	cpi	r20, 0xC0	; 192
     bda:	21 f4       	brne	.+8      	; 0xbe4 <UartClass::begin(unsigned long, unsigned int)+0x72>
     bdc:	4a 89       	ldd	r20, Y+18	; 0x12
     bde:	42 60       	ori	r20, 0x02	; 2
     be0:	4a 8b       	std	Y+18, r20	; 0x12
     be2:	80 61       	ori	r24, 0x10	; 16
     be4:	00 fd       	sbrc	r16, 0
     be6:	81 60       	ori	r24, 0x01	; 1
     be8:	af b6       	in	r10, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	ec 85       	ldd	r30, Y+12	; 0x0c
     bee:	fd 85       	ldd	r31, Y+13	; 0x0d
     bf0:	16 82       	std	Z+6, r1	; 0x06
     bf2:	ec 85       	ldd	r30, Y+12	; 0x0c
     bf4:	fd 85       	ldd	r31, Y+13	; 0x0d
     bf6:	20 87       	std	Z+8, r18	; 0x08
     bf8:	31 87       	std	Z+9, r19	; 0x09
     bfa:	ec 85       	ldd	r30, Y+12	; 0x0c
     bfc:	fd 85       	ldd	r31, Y+13	; 0x0d
     bfe:	e7 82       	std	Z+7, r14	; 0x07
     c00:	ec 85       	ldd	r30, Y+12	; 0x0c
     c02:	fd 85       	ldd	r31, Y+13	; 0x0d
     c04:	05 83       	std	Z+5, r16	; 0x05
     c06:	ec 85       	ldd	r30, Y+12	; 0x0c
     c08:	fd 85       	ldd	r31, Y+13	; 0x0d
     c0a:	f5 fe       	sbrs	r15, 5
     c0c:	ba c0       	rjmp	.+372    	; 0xd82 <UartClass::begin(unsigned long, unsigned int)+0x210>
     c0e:	8f 77       	andi	r24, 0x7F	; 127
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	94 87       	std	Z+12, r25	; 0x0c
     c14:	ec 85       	ldd	r30, Y+12	; 0x0c
     c16:	fd 85       	ldd	r31, Y+13	; 0x0d
     c18:	9f ef       	ldi	r25, 0xFF	; 255
     c1a:	95 87       	std	Z+13, r25	; 0x0d
     c1c:	99 89       	ldd	r25, Y+17	; 0x11
     c1e:	b8 88       	ldd	r11, Y+16	; 0x10
     c20:	2e 85       	ldd	r18, Y+14	; 0x0e
     c22:	3f 85       	ldd	r19, Y+15	; 0x0f
_set_pins():
     c24:	f9 01       	movw	r30, r18
     c26:	a3 e0       	ldi	r26, 0x03	; 3
     c28:	9a 9f       	mul	r25, r26
     c2a:	e0 0d       	add	r30, r0
     c2c:	f1 1d       	adc	r31, r1
     c2e:	11 24       	eor	r1, r1
     c30:	65 91       	lpm	r22, Z+
     c32:	74 91       	lpm	r23, Z
     c34:	9b 15       	cp	r25, r11
     c36:	08 f0       	brcs	.+2      	; 0xc3a <UartClass::begin(unsigned long, unsigned int)+0xc8>
     c38:	62 c0       	rjmp	.+196    	; 0xcfe <UartClass::begin(unsigned long, unsigned int)+0x18c>
     c3a:	97 2f       	mov	r25, r23
begin():
     c3c:	02 e0       	ldi	r16, 0x02	; 2
_set_pins():
     c3e:	83 ff       	sbrs	r24, 3
begin():
     c40:	01 e0       	ldi	r16, 0x01	; 1
_set_pins():
     c42:	86 ff       	sbrs	r24, 6
     c44:	17 c0       	rjmp	.+46     	; 0xc74 <UartClass::begin(unsigned long, unsigned int)+0x102>
_pinMode():
     c46:	99 32       	cpi	r25, 0x29	; 41
     c48:	a8 f4       	brcc	.+42     	; 0xc74 <UartClass::begin(unsigned long, unsigned int)+0x102>
check_valid_digital_pin():
     c4a:	47 2f       	mov	r20, r23
     c4c:	50 e0       	ldi	r21, 0x00	; 0
_pinMode():
     c4e:	fa 01       	movw	r30, r20
     c50:	e9 58       	subi	r30, 0x89	; 137
     c52:	ff 4b       	sbci	r31, 0xBF	; 191
     c54:	90 81       	ld	r25, Z
     c56:	9f 3f       	cpi	r25, 0xFF	; 255
     c58:	69 f0       	breq	.+26     	; 0xc74 <UartClass::begin(unsigned long, unsigned int)+0x102>
     c5a:	fa 01       	movw	r30, r20
     c5c:	e0 56       	subi	r30, 0x60	; 96
     c5e:	ff 4b       	sbci	r31, 0xBF	; 191
     c60:	e0 81       	ld	r30, Z
     c62:	b0 e2       	ldi	r27, 0x20	; 32
     c64:	eb 9f       	mul	r30, r27
     c66:	f0 01       	movw	r30, r0
     c68:	11 24       	eor	r1, r1
     c6a:	fc 5f       	subi	r31, 0xFC	; 252
     c6c:	01 30       	cpi	r16, 0x01	; 1
     c6e:	09 f0       	breq	.+2      	; 0xc72 <UartClass::begin(unsigned long, unsigned int)+0x100>
     c70:	8a c0       	rjmp	.+276    	; 0xd86 <UartClass::begin(unsigned long, unsigned int)+0x214>
     c72:	91 83       	std	Z+1, r25	; 0x01
_set_pins():
     c74:	87 ff       	sbrs	r24, 7
     c76:	2c c0       	rjmp	.+88     	; 0xcd0 <UartClass::begin(unsigned long, unsigned int)+0x15e>
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	97 0f       	add	r25, r23
     c7c:	49 2f       	mov	r20, r25
     c7e:	50 e0       	ldi	r21, 0x00	; 0
_pinMode():
     c80:	99 32       	cpi	r25, 0x29	; 41
     c82:	30 f5       	brcc	.+76     	; 0xcd0 <UartClass::begin(unsigned long, unsigned int)+0x15e>
     c84:	fa 01       	movw	r30, r20
     c86:	e9 58       	subi	r30, 0x89	; 137
     c88:	ff 4b       	sbci	r31, 0xBF	; 191
     c8a:	90 81       	ld	r25, Z
     c8c:	9f 3f       	cpi	r25, 0xFF	; 255
     c8e:	01 f1       	breq	.+64     	; 0xcd0 <UartClass::begin(unsigned long, unsigned int)+0x15e>
     c90:	fa 01       	movw	r30, r20
     c92:	e0 56       	subi	r30, 0x60	; 96
     c94:	ff 4b       	sbci	r31, 0xBF	; 191
     c96:	e0 81       	ld	r30, Z
     c98:	b0 e2       	ldi	r27, 0x20	; 32
     c9a:	eb 9f       	mul	r30, r27
     c9c:	f0 01       	movw	r30, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	fc 5f       	subi	r31, 0xFC	; 252
     ca2:	4c 5c       	subi	r20, 0xCC	; 204
     ca4:	5f 4b       	sbci	r21, 0xBF	; 191
     ca6:	da 01       	movw	r26, r20
     ca8:	4c 91       	ld	r20, X
     caa:	4f 3f       	cpi	r20, 0xFF	; 255
     cac:	09 f4       	brne	.+2      	; 0xcb0 <UartClass::begin(unsigned long, unsigned int)+0x13e>
     cae:	87 c0       	rjmp	.+270    	; 0xdbe <UartClass::begin(unsigned long, unsigned int)+0x24c>
     cb0:	7f 01       	movw	r14, r30
     cb2:	b0 e1       	ldi	r27, 0x10	; 16
     cb4:	eb 0e       	add	r14, r27
     cb6:	f1 1c       	adc	r15, r1
     cb8:	4e 0d       	add	r20, r14
     cba:	5f 2d       	mov	r21, r15
     cbc:	51 1d       	adc	r21, r1
     cbe:	ff b6       	in	r15, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	92 83       	std	Z+2, r25	; 0x02
     cc4:	da 01       	movw	r26, r20
     cc6:	0c 91       	ld	r16, X
     cc8:	08 60       	ori	r16, 0x08	; 8
     cca:	0c 93       	st	X, r16
     ccc:	95 83       	std	Z+5, r25	; 0x05
     cce:	ff be       	out	0x3f, r15	; 63
_set_pins():
     cd0:	80 ff       	sbrs	r24, 0
     cd2:	15 c0       	rjmp	.+42     	; 0xcfe <UartClass::begin(unsigned long, unsigned int)+0x18c>
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	87 0f       	add	r24, r23
_pinMode():
     cd8:	89 32       	cpi	r24, 0x29	; 41
     cda:	88 f4       	brcc	.+34     	; 0xcfe <UartClass::begin(unsigned long, unsigned int)+0x18c>
check_valid_digital_pin():
     cdc:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
     cde:	fc 01       	movw	r30, r24
     ce0:	e9 58       	subi	r30, 0x89	; 137
     ce2:	ff 4b       	sbci	r31, 0xBF	; 191
     ce4:	40 81       	ld	r20, Z
     ce6:	4f 3f       	cpi	r20, 0xFF	; 255
     ce8:	51 f0       	breq	.+20     	; 0xcfe <UartClass::begin(unsigned long, unsigned int)+0x18c>
     cea:	80 56       	subi	r24, 0x60	; 96
     cec:	9f 4b       	sbci	r25, 0xBF	; 191
     cee:	dc 01       	movw	r26, r24
     cf0:	ec 91       	ld	r30, X
     cf2:	b0 e2       	ldi	r27, 0x20	; 32
     cf4:	eb 9f       	mul	r30, r27
     cf6:	f0 01       	movw	r30, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	fc 5f       	subi	r31, 0xFC	; 252
     cfc:	41 83       	std	Z+1, r20	; 0x01
_mux_set():
     cfe:	f9 01       	movw	r30, r18
     d00:	43 e0       	ldi	r20, 0x03	; 3
     d02:	b4 9e       	mul	r11, r20
     d04:	e0 0d       	add	r30, r0
     d06:	f1 1d       	adc	r31, r1
     d08:	11 24       	eor	r1, r1
     d0a:	31 96       	adiw	r30, 0x01	; 1
     d0c:	25 91       	lpm	r18, Z+
     d0e:	34 91       	lpm	r19, Z
     d10:	f9 01       	movw	r30, r18
     d12:	ff 27       	eor	r31, r31
     d14:	ee 51       	subi	r30, 0x1E	; 30
     d16:	fa 4f       	sbci	r31, 0xFA	; 250
     d18:	90 81       	ld	r25, Z
     d1a:	83 2f       	mov	r24, r19
     d1c:	80 95       	com	r24
     d1e:	89 23       	and	r24, r25
     d20:	68 2b       	or	r22, r24
     d22:	60 83       	st	Z, r22
begin():
     d24:	ec 85       	ldd	r30, Y+12	; 0x0c
     d26:	fd 85       	ldd	r31, Y+13	; 0x0d
     d28:	16 83       	std	Z+6, r17	; 0x06
     d2a:	af be       	out	0x3f, r10	; 63
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	bf 90       	pop	r11
     d3a:	af 90       	pop	r10
     d3c:	9f 90       	pop	r9
     d3e:	8f 90       	pop	r8
     d40:	08 95       	ret
     d42:	2f ef       	ldi	r18, 0xFF	; 255
     d44:	3f ef       	ldi	r19, 0xFF	; 255
     d46:	54 e9       	ldi	r21, 0x94	; 148
     d48:	85 16       	cp	r8, r21
     d4a:	55 e0       	ldi	r21, 0x05	; 5
     d4c:	95 06       	cpc	r9, r21
     d4e:	a1 04       	cpc	r10, r1
     d50:	b1 04       	cpc	r11, r1
     d52:	08 f4       	brcc	.+2      	; 0xd56 <UartClass::begin(unsigned long, unsigned int)+0x1e4>
     d54:	36 cf       	rjmp	.-404    	; 0xbc2 <UartClass::begin(unsigned long, unsigned int)+0x50>
     d56:	81 e6       	ldi	r24, 0x61	; 97
     d58:	88 16       	cp	r8, r24
     d5a:	83 ee       	ldi	r24, 0xE3	; 227
     d5c:	98 06       	cpc	r9, r24
     d5e:	86 e1       	ldi	r24, 0x16	; 22
     d60:	a8 06       	cpc	r10, r24
     d62:	b1 04       	cpc	r11, r1
     d64:	28 f0       	brcs	.+10     	; 0xd70 <UartClass::begin(unsigned long, unsigned int)+0x1fe>
     d66:	12 60       	ori	r17, 0x02	; 2
     d68:	b6 94       	lsr	r11
     d6a:	a7 94       	ror	r10
     d6c:	97 94       	ror	r9
     d6e:	87 94       	ror	r8
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	78 ed       	ldi	r23, 0xD8	; 216
     d74:	88 eb       	ldi	r24, 0xB8	; 184
     d76:	95 e0       	ldi	r25, 0x05	; 5
     d78:	a5 01       	movw	r20, r10
     d7a:	94 01       	movw	r18, r8
     d7c:	0e 94 41 22 	call	0x4482	; 0x4482 <__udivmodsi4>
     d80:	20 cf       	rjmp	.-448    	; 0xbc2 <UartClass::begin(unsigned long, unsigned int)+0x50>
     d82:	14 86       	std	Z+12, r1	; 0x0c
     d84:	4b cf       	rjmp	.-362    	; 0xc1c <UartClass::begin(unsigned long, unsigned int)+0xaa>
_pinMode():
     d86:	4c 5c       	subi	r20, 0xCC	; 204
     d88:	5f 4b       	sbci	r21, 0xBF	; 191
     d8a:	da 01       	movw	r26, r20
     d8c:	4c 91       	ld	r20, X
     d8e:	30 97       	sbiw	r30, 0x00	; 0
     d90:	99 f0       	breq	.+38     	; 0xdb8 <UartClass::begin(unsigned long, unsigned int)+0x246>
     d92:	4f 3f       	cpi	r20, 0xFF	; 255
     d94:	89 f0       	breq	.+34     	; 0xdb8 <UartClass::begin(unsigned long, unsigned int)+0x246>
     d96:	7f 01       	movw	r14, r30
     d98:	b0 e1       	ldi	r27, 0x10	; 16
     d9a:	eb 0e       	add	r14, r27
     d9c:	f1 1c       	adc	r15, r1
     d9e:	4e 0d       	add	r20, r14
     da0:	5f 2d       	mov	r21, r15
     da2:	51 1d       	adc	r21, r1
     da4:	ff b6       	in	r15, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	92 83       	std	Z+2, r25	; 0x02
     daa:	da 01       	movw	r26, r20
     dac:	0c 91       	ld	r16, X
     dae:	08 60       	ori	r16, 0x08	; 8
     db0:	0c 93       	st	X, r16
     db2:	95 83       	std	Z+5, r25	; 0x05
     db4:	ff be       	out	0x3f, r15	; 63
     db6:	5e cf       	rjmp	.-324    	; 0xc74 <UartClass::begin(unsigned long, unsigned int)+0x102>
begin():
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	f3 cf       	rjmp	.-26     	; 0xda4 <UartClass::begin(unsigned long, unsigned int)+0x232>
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	7d cf       	rjmp	.-262    	; 0xcbe <UartClass::begin(unsigned long, unsigned int)+0x14c>

00000dc4 <UartClass::_tx_data_empty_irq(UartClass&)>:
_tx_data_empty_irq():
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	fc 01       	movw	r30, r24
     dca:	a4 85       	ldd	r26, Z+12	; 0x0c
     dcc:	b5 85       	ldd	r27, Z+13	; 0x0d
     dce:	26 89       	ldd	r18, Z+22	; 0x16
     dd0:	ec 01       	movw	r28, r24
     dd2:	c2 0f       	add	r28, r18
     dd4:	d1 1d       	adc	r29, r1
     dd6:	c9 5a       	subi	r28, 0xA9	; 169
     dd8:	df 4f       	sbci	r29, 0xFF	; 255
     dda:	88 81       	ld	r24, Y
     ddc:	90 e4       	ldi	r25, 0x40	; 64
     dde:	14 96       	adiw	r26, 0x04	; 4
     de0:	9c 93       	st	X, r25
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	12 96       	adiw	r26, 0x02	; 2
     de6:	8c 93       	st	X, r24
     de8:	12 97       	sbiw	r26, 0x02	; 2
     dea:	2f 5f       	subi	r18, 0xFF	; 255
     dec:	2f 73       	andi	r18, 0x3F	; 63
     dee:	15 96       	adiw	r26, 0x05	; 5
     df0:	9c 91       	ld	r25, X
     df2:	15 97       	sbiw	r26, 0x05	; 5
     df4:	35 89       	ldd	r19, Z+21	; 0x15
     df6:	82 89       	ldd	r24, Z+18	; 0x12
     df8:	32 13       	cpse	r19, r18
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <UartClass::_tx_data_empty_irq(UartClass&)+0x4a>
     dfc:	9f 7d       	andi	r25, 0xDF	; 223
     dfe:	81 fd       	sbrc	r24, 1
     e00:	90 64       	ori	r25, 0x40	; 64
     e02:	15 96       	adiw	r26, 0x05	; 5
     e04:	9c 93       	st	X, r25
     e06:	26 8b       	std	Z+22, r18	; 0x16
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret
     e0e:	81 ff       	sbrs	r24, 1
     e10:	fa cf       	rjmp	.-12     	; 0xe06 <UartClass::_tx_data_empty_irq(UartClass&)+0x42>
     e12:	9f 7b       	andi	r25, 0xBF	; 191
     e14:	f6 cf       	rjmp	.-20     	; 0xe02 <UartClass::_tx_data_empty_irq(UartClass&)+0x3e>

00000e16 <UartClass::_poll_tx_data_empty()>:
_poll_tx_data_empty():
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	07 fe       	sbrs	r0, 7
     e1a:	04 c0       	rjmp	.+8      	; 0xe24 <UartClass::_poll_tx_data_empty()+0xe>
     e1c:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7e0111>
     e20:	22 23       	and	r18, r18
     e22:	a1 f0       	breq	.+40     	; 0xe4c <UartClass::_poll_tx_data_empty()+0x36>
     e24:	dc 01       	movw	r26, r24
     e26:	1c 96       	adiw	r26, 0x0c	; 12
     e28:	ed 91       	ld	r30, X+
     e2a:	fc 91       	ld	r31, X
     e2c:	1d 97       	sbiw	r26, 0x0d	; 13
     e2e:	24 81       	ldd	r18, Z+4	; 0x04
     e30:	25 ff       	sbrs	r18, 5
     e32:	0c c0       	rjmp	.+24     	; 0xe4c <UartClass::_poll_tx_data_empty()+0x36>
     e34:	55 96       	adiw	r26, 0x15	; 21
     e36:	3c 91       	ld	r19, X
     e38:	55 97       	sbiw	r26, 0x15	; 21
     e3a:	56 96       	adiw	r26, 0x16	; 22
     e3c:	2c 91       	ld	r18, X
     e3e:	32 17       	cp	r19, r18
     e40:	21 f0       	breq	.+8      	; 0xe4a <UartClass::_poll_tx_data_empty()+0x34>
     e42:	85 81       	ldd	r24, Z+5	; 0x05
     e44:	8f 7d       	andi	r24, 0xDF	; 223
     e46:	85 83       	std	Z+5, r24	; 0x05
     e48:	08 95       	ret
     e4a:	bc cf       	rjmp	.-136    	; 0xdc4 <UartClass::_tx_data_empty_irq(UartClass&)>
     e4c:	08 95       	ret

00000e4e <UartClass::write(unsigned char)>:
write():
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	ec 01       	movw	r28, r24
     e58:	8a 89       	ldd	r24, Y+18	; 0x12
     e5a:	98 2f       	mov	r25, r24
     e5c:	91 60       	ori	r25, 0x01	; 1
     e5e:	9a 8b       	std	Y+18, r25	; 0x12
     e60:	2d 89       	ldd	r18, Y+21	; 0x15
     e62:	9e 89       	ldd	r25, Y+22	; 0x16
     e64:	29 13       	cpse	r18, r25
     e66:	0a c0       	rjmp	.+20     	; 0xe7c <UartClass::write(unsigned char)+0x2e>
     e68:	ec 85       	ldd	r30, Y+12	; 0x0c
     e6a:	fd 85       	ldd	r31, Y+13	; 0x0d
     e6c:	94 81       	ldd	r25, Z+4	; 0x04
     e6e:	95 ff       	sbrs	r25, 5
     e70:	05 c0       	rjmp	.+10     	; 0xe7c <UartClass::write(unsigned char)+0x2e>
     e72:	81 fd       	sbrc	r24, 1
     e74:	0d c0       	rjmp	.+26     	; 0xe90 <UartClass::write(unsigned char)+0x42>
     e76:	80 e4       	ldi	r24, 0x40	; 64
     e78:	84 83       	std	Z+4, r24	; 0x04
     e7a:	12 c0       	rjmp	.+36     	; 0xea0 <UartClass::write(unsigned char)+0x52>
     e7c:	06 2f       	mov	r16, r22
     e7e:	1d 89       	ldd	r17, Y+21	; 0x15
     e80:	1f 5f       	subi	r17, 0xFF	; 255
     e82:	1f 73       	andi	r17, 0x3F	; 63
     e84:	8e 89       	ldd	r24, Y+22	; 0x16
     e86:	81 13       	cpse	r24, r17
     e88:	15 c0       	rjmp	.+42     	; 0xeb4 <UartClass::write(unsigned char)+0x66>
     e8a:	ce 01       	movw	r24, r28
     e8c:	c4 df       	rcall	.-120    	; 0xe16 <UartClass::_poll_tx_data_empty()>
     e8e:	fa cf       	rjmp	.-12     	; 0xe84 <UartClass::write(unsigned char)+0x36>
     e90:	85 81       	ldd	r24, Z+5	; 0x05
     e92:	8f 77       	andi	r24, 0x7F	; 127
     e94:	80 64       	ori	r24, 0x40	; 64
     e96:	90 e4       	ldi	r25, 0x40	; 64
     e98:	94 83       	std	Z+4, r25	; 0x04
     e9a:	ec 85       	ldd	r30, Y+12	; 0x0c
     e9c:	fd 85       	ldd	r31, Y+13	; 0x0d
     e9e:	85 83       	std	Z+5, r24	; 0x05
     ea0:	ec 85       	ldd	r30, Y+12	; 0x0c
     ea2:	fd 85       	ldd	r31, Y+13	; 0x0d
     ea4:	62 83       	std	Z+2, r22	; 0x02
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	08 95       	ret
     eb4:	ed 89       	ldd	r30, Y+21	; 0x15
     eb6:	ec 0f       	add	r30, r28
     eb8:	fd 2f       	mov	r31, r29
     eba:	f1 1d       	adc	r31, r1
     ebc:	e9 5a       	subi	r30, 0xA9	; 169
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	00 83       	st	Z, r16
     ec2:	1d 8b       	std	Y+21, r17	; 0x15
     ec4:	ec 85       	ldd	r30, Y+12	; 0x0c
     ec6:	fd 85       	ldd	r31, Y+13	; 0x0d
     ec8:	8a 89       	ldd	r24, Y+18	; 0x12
     eca:	81 ff       	sbrs	r24, 1
     ecc:	09 c0       	rjmp	.+18     	; 0xee0 <UartClass::write(unsigned char)+0x92>
     ece:	85 81       	ldd	r24, Z+5	; 0x05
     ed0:	8f 77       	andi	r24, 0x7F	; 127
     ed2:	80 66       	ori	r24, 0x60	; 96
     ed4:	90 e4       	ldi	r25, 0x40	; 64
     ed6:	94 83       	std	Z+4, r25	; 0x04
     ed8:	ec 85       	ldd	r30, Y+12	; 0x0c
     eda:	fd 85       	ldd	r31, Y+13	; 0x0d
     edc:	85 83       	std	Z+5, r24	; 0x05
     ede:	e3 cf       	rjmp	.-58     	; 0xea6 <UartClass::write(unsigned char)+0x58>
     ee0:	85 81       	ldd	r24, Z+5	; 0x05
     ee2:	80 62       	ori	r24, 0x20	; 32
     ee4:	fb cf       	rjmp	.-10     	; 0xedc <UartClass::write(unsigned char)+0x8e>

00000ee6 <UartClass::flush()>:
flush():
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	ec 01       	movw	r28, r24
     eec:	8a 89       	ldd	r24, Y+18	; 0x12
     eee:	80 ff       	sbrs	r24, 0
     ef0:	0b c0       	rjmp	.+22     	; 0xf08 <UartClass::flush()+0x22>
     ef2:	ec 85       	ldd	r30, Y+12	; 0x0c
     ef4:	fd 85       	ldd	r31, Y+13	; 0x0d
     ef6:	85 81       	ldd	r24, Z+5	; 0x05
     ef8:	85 fd       	sbrc	r24, 5
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <UartClass::flush()+0x1c>
     efc:	84 81       	ldd	r24, Z+4	; 0x04
     efe:	86 fd       	sbrc	r24, 6
     f00:	03 c0       	rjmp	.+6      	; 0xf08 <UartClass::flush()+0x22>
     f02:	ce 01       	movw	r24, r28
     f04:	88 df       	rcall	.-240    	; 0xe16 <UartClass::_poll_tx_data_empty()>
     f06:	f5 cf       	rjmp	.-22     	; 0xef2 <UartClass::flush()+0xc>
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <UartClass::operator bool()>:
operator 3():
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	08 95       	ret

00000f12 <micros>:
micros():
     f12:	9f b7       	in	r25, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	e0 91 2a 0b 	lds	r30, 0x0B2A	; 0x800b2a <__TEXT_REGION_LENGTH__+0x7e0b2a>
     f1a:	f0 91 2b 0b 	lds	r31, 0x0B2B	; 0x800b2b <__TEXT_REGION_LENGTH__+0x7e0b2b>
     f1e:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
     f22:	20 91 7e 41 	lds	r18, 0x417E	; 0x80417e <timer_millis>
     f26:	30 91 7f 41 	lds	r19, 0x417F	; 0x80417f <timer_millis+0x1>
     f2a:	40 91 80 41 	lds	r20, 0x4180	; 0x804180 <timer_millis+0x2>
     f2e:	50 91 81 41 	lds	r21, 0x4181	; 0x804181 <timer_millis+0x3>
     f32:	9f bf       	out	0x3f, r25	; 63
     f34:	80 ff       	sbrs	r24, 0
     f36:	08 c0       	rjmp	.+16     	; 0xf48 <micros+0x36>
     f38:	ec 3e       	cpi	r30, 0xEC	; 236
     f3a:	8c e2       	ldi	r24, 0x2C	; 44
     f3c:	f8 07       	cpc	r31, r24
     f3e:	20 f4       	brcc	.+8      	; 0xf48 <micros+0x36>
     f40:	2f 5f       	subi	r18, 0xFF	; 255
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	4f 4f       	sbci	r20, 0xFF	; 255
     f46:	5f 4f       	sbci	r21, 0xFF	; 255
     f48:	0f 01       	movw	r0, r30
     f4a:	16 94       	lsr	r1
     f4c:	07 94       	ror	r0
     f4e:	16 94       	lsr	r1
     f50:	07 94       	ror	r0
     f52:	16 94       	lsr	r1
     f54:	07 94       	ror	r0
     f56:	16 94       	lsr	r1
     f58:	07 94       	ror	r0
     f5a:	f0 01       	movw	r30, r0
     f5c:	16 94       	lsr	r1
     f5e:	07 94       	ror	r0
     f60:	e0 0d       	add	r30, r0
     f62:	f1 1d       	adc	r31, r1
     f64:	16 94       	lsr	r1
     f66:	07 94       	ror	r0
     f68:	10 2c       	mov	r1, r0
     f6a:	16 94       	lsr	r1
     f6c:	01 18       	sub	r0, r1
     f6e:	16 94       	lsr	r1
     f70:	01 0c       	add	r0, r1
     f72:	16 94       	lsr	r1
     f74:	01 18       	sub	r0, r1
     f76:	16 94       	lsr	r1
     f78:	01 0c       	add	r0, r1
     f7a:	16 94       	lsr	r1
     f7c:	01 18       	sub	r0, r1
     f7e:	16 94       	lsr	r1
     f80:	16 94       	lsr	r1
     f82:	01 0c       	add	r0, r1
     f84:	11 24       	eor	r1, r1
     f86:	e0 19       	sub	r30, r0
     f88:	f1 09       	sbc	r31, r1
     f8a:	a8 ee       	ldi	r26, 0xE8	; 232
     f8c:	b3 e0       	ldi	r27, 0x03	; 3
     f8e:	0e 94 31 22 	call	0x4462	; 0x4462 <__muluhisi3>
     f92:	6e 0f       	add	r22, r30
     f94:	7f 1f       	adc	r23, r31
     f96:	81 1d       	adc	r24, r1
     f98:	91 1d       	adc	r25, r1
     f9a:	08 95       	ret

00000f9c <delay>:
delay():
     f9c:	8f 92       	push	r8
     f9e:	9f 92       	push	r9
     fa0:	af 92       	push	r10
     fa2:	bf 92       	push	r11
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	4b 01       	movw	r8, r22
     fae:	5c 01       	movw	r10, r24
     fb0:	b0 df       	rcall	.-160    	; 0xf12 <micros>
     fb2:	6b 01       	movw	r12, r22
     fb4:	7c 01       	movw	r14, r24
     fb6:	ad df       	rcall	.-166    	; 0xf12 <micros>
     fb8:	6c 19       	sub	r22, r12
     fba:	7d 09       	sbc	r23, r13
     fbc:	8e 09       	sbc	r24, r14
     fbe:	9f 09       	sbc	r25, r15
     fc0:	68 3e       	cpi	r22, 0xE8	; 232
     fc2:	73 40       	sbci	r23, 0x03	; 3
     fc4:	81 05       	cpc	r24, r1
     fc6:	91 05       	cpc	r25, r1
     fc8:	b0 f3       	brcs	.-20     	; 0xfb6 <delay+0x1a>
     fca:	21 e0       	ldi	r18, 0x01	; 1
     fcc:	82 1a       	sub	r8, r18
     fce:	91 08       	sbc	r9, r1
     fd0:	a1 08       	sbc	r10, r1
     fd2:	b1 08       	sbc	r11, r1
     fd4:	88 ee       	ldi	r24, 0xE8	; 232
     fd6:	c8 0e       	add	r12, r24
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	d8 1e       	adc	r13, r24
     fdc:	e1 1c       	adc	r14, r1
     fde:	f1 1c       	adc	r15, r1
     fe0:	81 14       	cp	r8, r1
     fe2:	91 04       	cpc	r9, r1
     fe4:	a1 04       	cpc	r10, r1
     fe6:	b1 04       	cpc	r11, r1
     fe8:	31 f7       	brne	.-52     	; 0xfb6 <delay+0x1a>
     fea:	ff 90       	pop	r15
     fec:	ef 90       	pop	r14
     fee:	df 90       	pop	r13
     ff0:	cf 90       	pop	r12
     ff2:	bf 90       	pop	r11
     ff4:	af 90       	pop	r10
     ff6:	9f 90       	pop	r9
     ff8:	8f 90       	pop	r8
     ffa:	08 95       	ret

00000ffc <millis>:
millis():
     ffc:	2f b7       	in	r18, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	60 91 7e 41 	lds	r22, 0x417E	; 0x80417e <timer_millis>
    1004:	70 91 7f 41 	lds	r23, 0x417F	; 0x80417f <timer_millis+0x1>
    1008:	80 91 80 41 	lds	r24, 0x4180	; 0x804180 <timer_millis+0x2>
    100c:	90 91 81 41 	lds	r25, 0x4181	; 0x804181 <timer_millis+0x3>
    1010:	2f bf       	out	0x3f, r18	; 63
    1012:	08 95       	ret

00001014 <hd44780::command(unsigned char)>:
command():
    1014:	8f 92       	push	r8
    1016:	9f 92       	push	r9
    1018:	af 92       	push	r10
    101a:	bf 92       	push	r11
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	ec 01       	movw	r28, r24
    1028:	16 2f       	mov	r17, r22
    102a:	e8 81       	ld	r30, Y
    102c:	f9 81       	ldd	r31, Y+1	; 0x01
    102e:	04 84       	ldd	r0, Z+12	; 0x0c
    1030:	f5 85       	ldd	r31, Z+13	; 0x0d
    1032:	e0 2d       	mov	r30, r0
    1034:	46 2f       	mov	r20, r22
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	09 95       	icall
    103c:	7c 01       	movw	r14, r24
    103e:	11 50       	subi	r17, 0x01	; 1
    1040:	12 30       	cpi	r17, 0x02	; 2
    1042:	d0 f4       	brcc	.+52     	; 0x1078 <hd44780::command(unsigned char)+0x64>
    1044:	19 86       	std	Y+9, r1	; 0x09
    1046:	1a 86       	std	Y+10, r1	; 0x0a
    1048:	88 88       	ldd	r8, Y+16	; 0x10
    104a:	99 88       	ldd	r9, Y+17	; 0x11
    104c:	aa 88       	ldd	r10, Y+18	; 0x12
    104e:	bb 88       	ldd	r11, Y+19	; 0x13
markStart():
    1050:	60 df       	rcall	.-320    	; 0xf12 <micros>
    1052:	68 8f       	std	Y+24, r22	; 0x18
    1054:	79 8f       	std	Y+25, r23	; 0x19
    1056:	8a 8f       	std	Y+26, r24	; 0x1a
    1058:	9b 8f       	std	Y+27, r25	; 0x1b
    105a:	8c 8e       	std	Y+28, r8	; 0x1c
    105c:	9d 8e       	std	Y+29, r9	; 0x1d
    105e:	ae 8e       	std	Y+30, r10	; 0x1e
    1060:	bf 8e       	std	Y+31, r11	; 0x1f
command():
    1062:	c7 01       	movw	r24, r14
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	bf 90       	pop	r11
    1070:	af 90       	pop	r10
    1072:	9f 90       	pop	r9
    1074:	8f 90       	pop	r8
    1076:	08 95       	ret
    1078:	8c 88       	ldd	r8, Y+20	; 0x14
    107a:	9d 88       	ldd	r9, Y+21	; 0x15
    107c:	ae 88       	ldd	r10, Y+22	; 0x16
    107e:	bf 88       	ldd	r11, Y+23	; 0x17
    1080:	e7 cf       	rjmp	.-50     	; 0x1050 <hd44780::command(unsigned char)+0x3c>

00001082 <hd44780::clear() [clone .constprop.24]>:
clear():
    1082:	61 e0       	ldi	r22, 0x01	; 1
    1084:	85 e1       	ldi	r24, 0x15	; 21
    1086:	9e e4       	ldi	r25, 0x4E	; 78
    1088:	c5 cf       	rjmp	.-118    	; 0x1014 <hd44780::command(unsigned char)>

0000108a <hd44780::setCursor(unsigned char, unsigned char)>:
setCursor():
    108a:	dc 01       	movw	r26, r24
    108c:	18 96       	adiw	r26, 0x08	; 8
    108e:	8c 91       	ld	r24, X
    1090:	18 97       	sbiw	r26, 0x08	; 8
    1092:	48 17       	cp	r20, r24
    1094:	10 f0       	brcs	.+4      	; 0x109a <hd44780::setCursor(unsigned char, unsigned char)+0x10>
    1096:	4f ef       	ldi	r20, 0xFF	; 255
    1098:	48 0f       	add	r20, r24
    109a:	1b 96       	adiw	r26, 0x0b	; 11
    109c:	9c 91       	ld	r25, X
    109e:	1b 97       	sbiw	r26, 0x0b	; 11
    10a0:	99 23       	and	r25, r25
    10a2:	89 f0       	breq	.+34     	; 0x10c6 <hd44780::setCursor(unsigned char, unsigned char)+0x3c>
    10a4:	17 96       	adiw	r26, 0x07	; 7
    10a6:	9c 91       	ld	r25, X
    10a8:	17 97       	sbiw	r26, 0x07	; 7
    10aa:	69 17       	cp	r22, r25
    10ac:	30 f0       	brcs	.+12     	; 0x10ba <hd44780::setCursor(unsigned char, unsigned char)+0x30>
    10ae:	69 1b       	sub	r22, r25
    10b0:	4f 5f       	subi	r20, 0xFF	; 255
    10b2:	48 17       	cp	r20, r24
    10b4:	d0 f3       	brcs	.-12     	; 0x10aa <hd44780::setCursor(unsigned char, unsigned char)+0x20>
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	f8 cf       	rjmp	.-16     	; 0x10aa <hd44780::setCursor(unsigned char, unsigned char)+0x20>
    10ba:	19 96       	adiw	r26, 0x09	; 9
    10bc:	6c 93       	st	X, r22
    10be:	19 97       	sbiw	r26, 0x09	; 9
    10c0:	1a 96       	adiw	r26, 0x0a	; 10
    10c2:	4c 93       	st	X, r20
    10c4:	1a 97       	sbiw	r26, 0x0a	; 10
    10c6:	fd 01       	movw	r30, r26
    10c8:	e4 0f       	add	r30, r20
    10ca:	f1 1d       	adc	r31, r1
    10cc:	84 85       	ldd	r24, Z+12	; 0x0c
    10ce:	68 0f       	add	r22, r24
    10d0:	60 68       	ori	r22, 0x80	; 128
    10d2:	cd 01       	movw	r24, r26
    10d4:	9f cf       	rjmp	.-194    	; 0x1014 <hd44780::command(unsigned char)>

000010d6 <hd44780::write(unsigned char)>:
write():
    10d6:	8f 92       	push	r8
    10d8:	9f 92       	push	r9
    10da:	af 92       	push	r10
    10dc:	bf 92       	push	r11
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	ec 01       	movw	r28, r24
    10ec:	46 2f       	mov	r20, r22
_write():
    10ee:	e8 81       	ld	r30, Y
    10f0:	f9 81       	ldd	r31, Y+1	; 0x01
    10f2:	04 84       	ldd	r0, Z+12	; 0x0c
    10f4:	f5 85       	ldd	r31, Z+13	; 0x0d
    10f6:	e0 2d       	mov	r30, r0
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	09 95       	icall
    10fe:	7c 01       	movw	r14, r24
    1100:	8c 88       	ldd	r8, Y+20	; 0x14
    1102:	9d 88       	ldd	r9, Y+21	; 0x15
    1104:	ae 88       	ldd	r10, Y+22	; 0x16
    1106:	bf 88       	ldd	r11, Y+23	; 0x17
markStart():
    1108:	04 df       	rcall	.-504    	; 0xf12 <micros>
    110a:	68 8f       	std	Y+24, r22	; 0x18
    110c:	79 8f       	std	Y+25, r23	; 0x19
    110e:	8a 8f       	std	Y+26, r24	; 0x1a
    1110:	9b 8f       	std	Y+27, r25	; 0x1b
    1112:	8c 8e       	std	Y+28, r8	; 0x1c
    1114:	9d 8e       	std	Y+29, r9	; 0x1d
    1116:	ae 8e       	std	Y+30, r10	; 0x1e
    1118:	bf 8e       	std	Y+31, r11	; 0x1f
_write():
    111a:	01 e0       	ldi	r16, 0x01	; 1
    111c:	10 e0       	ldi	r17, 0x00	; 0
    111e:	ef 28       	or	r14, r15
    1120:	11 f0       	breq	.+4      	; 0x1126 <hd44780::write(unsigned char)+0x50>
    1122:	10 e0       	ldi	r17, 0x00	; 0
    1124:	00 e0       	ldi	r16, 0x00	; 0
write():
    1126:	8b 85       	ldd	r24, Y+11	; 0x0b
    1128:	88 23       	and	r24, r24
    112a:	91 f0       	breq	.+36     	; 0x1150 <hd44780::write(unsigned char)+0x7a>
    112c:	89 85       	ldd	r24, Y+9	; 0x09
    112e:	8f 5f       	subi	r24, 0xFF	; 255
    1130:	89 87       	std	Y+9, r24	; 0x09
    1132:	9f 81       	ldd	r25, Y+7	; 0x07
    1134:	89 17       	cp	r24, r25
    1136:	60 f0       	brcs	.+24     	; 0x1150 <hd44780::write(unsigned char)+0x7a>
    1138:	19 86       	std	Y+9, r1	; 0x09
    113a:	8a 85       	ldd	r24, Y+10	; 0x0a
    113c:	8f 5f       	subi	r24, 0xFF	; 255
    113e:	8a 87       	std	Y+10, r24	; 0x0a
    1140:	98 85       	ldd	r25, Y+8	; 0x08
    1142:	89 17       	cp	r24, r25
    1144:	08 f0       	brcs	.+2      	; 0x1148 <hd44780::write(unsigned char)+0x72>
    1146:	1a 86       	std	Y+10, r1	; 0x0a
    1148:	4a 85       	ldd	r20, Y+10	; 0x0a
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	ce 01       	movw	r24, r28
    114e:	9d df       	rcall	.-198    	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
    1150:	c8 01       	movw	r24, r16
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	bf 90       	pop	r11
    1160:	af 90       	pop	r10
    1162:	9f 90       	pop	r9
    1164:	8f 90       	pop	r8
    1166:	08 95       	ret

00001168 <hd44780::iosetContrast(unsigned char)>:
iosetContrast():
    1168:	8d ef       	ldi	r24, 0xFD	; 253
    116a:	9f ef       	ldi	r25, 0xFF	; 255
    116c:	08 95       	ret

0000116e <hd44780::ioread(hd44780::iotype)>:
ioread():
    116e:	8d ef       	ldi	r24, 0xFD	; 253
    1170:	9f ef       	ldi	r25, 0xFF	; 255
    1172:	08 95       	ret

00001174 <Print::availableForWrite()>:
availableForWrite():
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	08 95       	ret

0000117a <getPalleteNumber()>:
getPalleteNumber():
    117a:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    117e:	84 30       	cpi	r24, 0x04	; 4
    1180:	19 f0       	breq	.+6      	; 0x1188 <getPalleteNumber()+0xe>
    1182:	80 91 79 47 	lds	r24, 0x4779	; 0x804779 <currentValueLeft>
    1186:	08 95       	ret
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	08 95       	ret

0000118c <getTransitionFrames()>:
getTransitionFrames():
    118c:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    1190:	84 30       	cpi	r24, 0x04	; 4
    1192:	41 f4       	brne	.+16     	; 0x11a4 <getTransitionFrames()+0x18>
    1194:	80 91 82 47 	lds	r24, 0x4782	; 0x804782 <currentValueRight+0x1>
    1198:	26 e0       	ldi	r18, 0x06	; 6
    119a:	82 9f       	mul	r24, r18
    119c:	c0 01       	movw	r24, r0
    119e:	11 24       	eor	r1, r1
    11a0:	09 96       	adiw	r24, 0x09	; 9
    11a2:	08 95       	ret
    11a4:	88 30       	cpi	r24, 0x08	; 8
    11a6:	39 f0       	breq	.+14     	; 0x11b6 <getTransitionFrames()+0x2a>
    11a8:	80 91 82 47 	lds	r24, 0x4782	; 0x804782 <currentValueRight+0x1>
    11ac:	23 e0       	ldi	r18, 0x03	; 3
    11ae:	82 9f       	mul	r24, r18
    11b0:	c0 01       	movw	r24, r0
    11b2:	11 24       	eor	r1, r1
    11b4:	08 95       	ret
    11b6:	8f ef       	ldi	r24, 0xFF	; 255
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	08 95       	ret

000011bc <getDwellFrames()>:
getDwellFrames():
    11bc:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    11c0:	84 30       	cpi	r24, 0x04	; 4
    11c2:	51 f0       	breq	.+20     	; 0x11d8 <getDwellFrames()+0x1c>
    11c4:	88 30       	cpi	r24, 0x08	; 8
    11c6:	41 f0       	breq	.+16     	; 0x11d8 <getDwellFrames()+0x1c>
    11c8:	80 91 83 47 	lds	r24, 0x4783	; 0x804783 <currentValueRight+0x2>
    11cc:	24 e0       	ldi	r18, 0x04	; 4
    11ce:	82 9f       	mul	r24, r18
    11d0:	c0 01       	movw	r24, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	02 96       	adiw	r24, 0x02	; 2
    11d6:	08 95       	ret
    11d8:	82 e0       	ldi	r24, 0x02	; 2
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	08 95       	ret

000011de <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>:
getDrift2Colors():
    11de:	2f 92       	push	r2
    11e0:	3f 92       	push	r3
    11e2:	4f 92       	push	r4
    11e4:	5f 92       	push	r5
    11e6:	6f 92       	push	r6
    11e8:	7f 92       	push	r7
    11ea:	8f 92       	push	r8
    11ec:	9f 92       	push	r9
    11ee:	af 92       	push	r10
    11f0:	bf 92       	push	r11
    11f2:	cf 92       	push	r12
    11f4:	df 92       	push	r13
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	1c 01       	movw	r2, r24
    1204:	3b 01       	movw	r6, r22
    1206:	2a 01       	movw	r4, r20
    1208:	48 01       	movw	r8, r16
    120a:	59 01       	movw	r10, r18
    120c:	d7 df       	rcall	.-82     	; 0x11bc <getDwellFrames()>
    120e:	6c 01       	movw	r12, r24
    1210:	bd df       	rcall	.-134    	; 0x118c <getTransitionFrames()>
    1212:	7c 01       	movw	r14, r24
    1214:	b2 df       	rcall	.-156    	; 0x117a <getPalleteNumber()>
    1216:	18 2f       	mov	r17, r24
    1218:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	09 f0       	breq	.+2      	; 0x1222 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x44>
    1220:	5d c0       	rjmp	.+186    	; 0x12dc <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0xfe>
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	8f 57       	subi	r24, 0x7F	; 127
    1228:	98 4b       	sbci	r25, 0xB8	; 184
    122a:	ec 01       	movw	r28, r24
    122c:	88 81       	ld	r24, Y
    122e:	88 23       	and	r24, r24
    1230:	09 f4       	brne	.+2      	; 0x1234 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x56>
    1232:	57 c0       	rjmp	.+174    	; 0x12e2 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x104>
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	dc 01       	movw	r26, r24
    123a:	c1 2f       	mov	r28, r17
    123c:	d0 e0       	ldi	r29, 0x00	; 0
    123e:	c7 5b       	subi	r28, 0xB7	; 183
    1240:	d6 4f       	sbci	r29, 0xF6	; 246
    1242:	fe 01       	movw	r30, r28
    1244:	44 91       	lpm	r20, Z
    1246:	ec 0c       	add	r14, r12
    1248:	fd 1c       	adc	r15, r13
    124a:	bc 01       	movw	r22, r24
    124c:	cd 01       	movw	r24, r26
    124e:	68 0d       	add	r22, r8
    1250:	79 1d       	adc	r23, r9
    1252:	8a 1d       	adc	r24, r10
    1254:	9b 1d       	adc	r25, r11
    1256:	4e 9d       	mul	r20, r14
    1258:	90 01       	movw	r18, r0
    125a:	4f 9d       	mul	r20, r15
    125c:	30 0d       	add	r19, r0
    125e:	11 24       	eor	r1, r1
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	40 e0       	ldi	r20, 0x00	; 0
    1264:	0e 94 41 22 	call	0x4482	; 0x4482 <__udivmodsi4>
    1268:	97 01       	movw	r18, r14
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	0e 94 41 22 	call	0x4482	; 0x4482 <__udivmodsi4>
    1272:	e2 2e       	mov	r14, r18
    1274:	f1 2c       	mov	r15, r1
    1276:	f8 e1       	ldi	r31, 0x18	; 24
    1278:	1f 9f       	mul	r17, r31
    127a:	50 01       	movw	r10, r0
    127c:	11 24       	eor	r1, r1
    127e:	f5 01       	movw	r30, r10
    1280:	03 e0       	ldi	r16, 0x03	; 3
    1282:	20 9f       	mul	r18, r16
    1284:	e0 0d       	add	r30, r0
    1286:	f1 1d       	adc	r31, r1
    1288:	11 24       	eor	r1, r1
    128a:	df 01       	movw	r26, r30
    128c:	ac 5c       	subi	r26, 0xCC	; 204
    128e:	ba 4f       	sbci	r27, 0xFA	; 250
    1290:	af 01       	movw	r20, r30
    1292:	4b 5c       	subi	r20, 0xCB	; 203
    1294:	5a 4f       	sbci	r21, 0xFA	; 250
    1296:	6c 15       	cp	r22, r12
    1298:	7d 05       	cpc	r23, r13
    129a:	40 f5       	brcc	.+80     	; 0x12ec <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x10e>
    129c:	ed 5c       	subi	r30, 0xCD	; 205
    129e:	fa 4f       	sbci	r31, 0xFA	; 250
    12a0:	e4 91       	lpm	r30, Z
    12a2:	e1 01       	movw	r28, r2
    12a4:	e8 83       	st	Y, r30
    12a6:	fd 01       	movw	r30, r26
    12a8:	a4 91       	lpm	r26, Z
    12aa:	e3 01       	movw	r28, r6
    12ac:	a8 83       	st	Y, r26
    12ae:	fa 01       	movw	r30, r20
    12b0:	44 91       	lpm	r20, Z
    12b2:	e2 01       	movw	r28, r4
    12b4:	48 83       	st	Y, r20
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	df 90       	pop	r13
    12c4:	cf 90       	pop	r12
    12c6:	bf 90       	pop	r11
    12c8:	af 90       	pop	r10
    12ca:	9f 90       	pop	r9
    12cc:	8f 90       	pop	r8
    12ce:	7f 90       	pop	r7
    12d0:	6f 90       	pop	r6
    12d2:	5f 90       	pop	r5
    12d4:	4f 90       	pop	r4
    12d6:	3f 90       	pop	r3
    12d8:	2f 90       	pop	r2
    12da:	08 95       	ret
    12dc:	83 e0       	ldi	r24, 0x03	; 3
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a2 cf       	rjmp	.-188    	; 0x1226 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x48>
    12e2:	84 ef       	ldi	r24, 0xF4	; 244
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	a0 e0       	ldi	r26, 0x00	; 0
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	a7 cf       	rjmp	.-178    	; 0x123a <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x5c>
    12ec:	ee ee       	ldi	r30, 0xEE	; 238
    12ee:	f2 e0       	ldi	r31, 0x02	; 2
    12f0:	8f 01       	movw	r16, r30
    12f2:	0c 19       	sub	r16, r12
    12f4:	1d 09       	sbc	r17, r13
    12f6:	68 01       	movw	r12, r16
    12f8:	fe 01       	movw	r30, r28
    12fa:	c4 91       	lpm	r28, Z
    12fc:	ff ef       	ldi	r31, 0xFF	; 255
    12fe:	ef 1a       	sub	r14, r31
    1300:	ff 0a       	sbc	r15, r31
    1302:	2f 5f       	subi	r18, 0xFF	; 255
    1304:	ce 15       	cp	r28, r14
    1306:	1f 04       	cpc	r1, r15
    1308:	09 f0       	breq	.+2      	; 0x130c <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x12e>
    130a:	0c f4       	brge	.+2      	; 0x130e <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x130>
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	8b 01       	movw	r16, r22
    1310:	07 56       	subi	r16, 0x67	; 103
    1312:	1e 4b       	sbci	r17, 0xBE	; 190
    1314:	48 01       	movw	r8, r16
    1316:	8c 0c       	add	r8, r12
    1318:	9d 1c       	adc	r9, r13
    131a:	f4 01       	movw	r30, r8
    131c:	c0 81       	ld	r28, Z
    131e:	c5 01       	movw	r24, r10
    1320:	f3 e0       	ldi	r31, 0x03	; 3
    1322:	2f 9f       	mul	r18, r31
    1324:	80 0d       	add	r24, r0
    1326:	91 1d       	adc	r25, r1
    1328:	11 24       	eor	r1, r1
    132a:	fc 01       	movw	r30, r24
    132c:	ec 5c       	subi	r30, 0xCC	; 204
    132e:	fa 4f       	sbci	r31, 0xFA	; 250
    1330:	d4 91       	lpm	r29, Z
    1332:	fd 01       	movw	r30, r26
    1334:	a4 91       	lpm	r26, Z
    1336:	2f ef       	ldi	r18, 0xFF	; 255
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	2c 1b       	sub	r18, r28
    133c:	31 09       	sbc	r19, r1
    133e:	a2 9f       	mul	r26, r18
    1340:	b0 01       	movw	r22, r0
    1342:	a3 9f       	mul	r26, r19
    1344:	70 0d       	add	r23, r0
    1346:	11 24       	eor	r1, r1
    1348:	dc 9f       	mul	r29, r28
    134a:	60 0d       	add	r22, r0
    134c:	71 1d       	adc	r23, r1
    134e:	11 24       	eor	r1, r1
    1350:	f3 01       	movw	r30, r6
    1352:	70 83       	st	Z, r23
    1354:	8b 5c       	subi	r24, 0xCB	; 203
    1356:	9a 4f       	sbci	r25, 0xFA	; 250
    1358:	fc 01       	movw	r30, r24
    135a:	84 91       	lpm	r24, Z
    135c:	fa 01       	movw	r30, r20
    135e:	44 91       	lpm	r20, Z
    1360:	42 9f       	mul	r20, r18
    1362:	b0 01       	movw	r22, r0
    1364:	43 9f       	mul	r20, r19
    1366:	70 0d       	add	r23, r0
    1368:	11 24       	eor	r1, r1
    136a:	c8 9f       	mul	r28, r24
    136c:	60 0d       	add	r22, r0
    136e:	71 1d       	adc	r23, r1
    1370:	11 24       	eor	r1, r1
    1372:	e2 01       	movw	r28, r4
    1374:	78 83       	st	Y, r23
    1376:	9f cf       	rjmp	.-194    	; 0x12b6 <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0xd8>

00001378 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)>:
pushPixel():
    1378:	22 23       	and	r18, r18
    137a:	81 f0       	breq	.+32     	; 0x139c <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)+0x24>
    137c:	e6 e2       	ldi	r30, 0x26	; 38
    137e:	f8 e4       	ldi	r31, 0x48	; 72
    1380:	2f ef       	ldi	r18, 0xFF	; 255
    1382:	3d e4       	ldi	r19, 0x4D	; 77
    1384:	93 81       	ldd	r25, Z+3	; 0x03
    1386:	91 93       	st	Z+, r25
    1388:	2e 17       	cp	r18, r30
    138a:	3f 07       	cpc	r19, r31
    138c:	d9 f7       	brne	.-10     	; 0x1384 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)+0xc>
    138e:	80 93 ff 4d 	sts	0x4DFF, r24	; 0x804dff <pixels+0x5d9>
    1392:	60 93 00 4e 	sts	0x4E00, r22	; 0x804e00 <pixels+0x5da>
    1396:	40 93 01 4e 	sts	0x4E01, r20	; 0x804e01 <pixels+0x5db>
    139a:	08 95       	ret
    139c:	ef ef       	ldi	r30, 0xFF	; 255
    139e:	fd e4       	ldi	r31, 0x4D	; 77
    13a0:	92 91       	ld	r25, -Z
    13a2:	93 83       	std	Z+3, r25	; 0x03
    13a4:	98 e4       	ldi	r25, 0x48	; 72
    13a6:	e6 32       	cpi	r30, 0x26	; 38
    13a8:	f9 07       	cpc	r31, r25
    13aa:	d1 f7       	brne	.-12     	; 0x13a0 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)+0x28>
    13ac:	80 93 26 48 	sts	0x4826, r24	; 0x804826 <pixels>
    13b0:	60 93 27 48 	sts	0x4827, r22	; 0x804827 <pixels+0x1>
    13b4:	40 93 28 48 	sts	0x4828, r20	; 0x804828 <pixels+0x2>
    13b8:	08 95       	ret

000013ba <getLeftVal(unsigned char)>:
getLeftVal():
    13ba:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    13be:	20 91 89 47 	lds	r18, 0x4789	; 0x804789 <currentMode>
    13c2:	98 e0       	ldi	r25, 0x08	; 8
    13c4:	29 9f       	mul	r18, r25
    13c6:	90 01       	movw	r18, r0
    13c8:	11 24       	eor	r1, r1
    13ca:	e2 0f       	add	r30, r18
    13cc:	f3 2f       	mov	r31, r19
    13ce:	f1 1d       	adc	r31, r1
    13d0:	e5 5c       	subi	r30, 0xC5	; 197
    13d2:	f9 4f       	sbci	r31, 0xF9	; 249
    13d4:	e4 91       	lpm	r30, Z
    13d6:	ef 31       	cpi	r30, 0x1F	; 31
    13d8:	41 f4       	brne	.+16     	; 0x13ea <getLeftVal(unsigned char)+0x30>
    13da:	80 32       	cpi	r24, 0x20	; 32
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <getLeftVal(unsigned char)+0x26>
    13de:	8f e1       	ldi	r24, 0x1F	; 31
    13e0:	e8 2f       	mov	r30, r24
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	e7 50       	subi	r30, 0x07	; 7
    13e6:	fb 4f       	sbci	r31, 0xFB	; 251
    13e8:	84 91       	lpm	r24, Z
    13ea:	08 95       	ret

000013ec <EERef::operator=(unsigned char)>:
operator=():
    13ec:	3f b7       	in	r19, 0x3f	; 63
    13ee:	20 91 02 10 	lds	r18, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
    13f2:	42 2f       	mov	r20, r18
    13f4:	42 70       	andi	r20, 0x02	; 2
    13f6:	21 fd       	sbrc	r18, 1
    13f8:	fa cf       	rjmp	.-12     	; 0x13ee <EERef::operator=(unsigned char)+0x2>
    13fa:	f8 94       	cli
    13fc:	2d e9       	ldi	r18, 0x9D	; 157
    13fe:	24 bf       	out	0x34, r18	; 52
    1400:	40 93 00 10 	sts	0x1000, r20	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    1404:	43 e1       	ldi	r20, 0x13	; 19
    1406:	24 bf       	out	0x34, r18	; 52
    1408:	40 93 00 10 	sts	0x1000, r20	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
    140c:	dc 01       	movw	r26, r24
    140e:	ec 91       	ld	r30, X
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	fc 5e       	subi	r31, 0xEC	; 236
    1414:	60 83       	st	Z, r22
    1416:	3f bf       	out	0x3f, r19	; 63
    1418:	08 95       	ret

0000141a <UartClass::begin(unsigned long)>:
begin():
    141a:	dc 01       	movw	r26, r24
    141c:	ed 91       	ld	r30, X+
    141e:	fc 91       	ld	r31, X
    1420:	00 88       	ldd	r0, Z+16	; 0x10
    1422:	f1 89       	ldd	r31, Z+17	; 0x11
    1424:	e0 2d       	mov	r30, r0
    1426:	23 e0       	ldi	r18, 0x03	; 3
    1428:	30 e1       	ldi	r19, 0x10	; 16
    142a:	09 94       	ijmp

0000142c <Print::flush()>:
flush():
    142c:	08 95       	ret

0000142e <digitalRead>:
check_valid_digital_pin():
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
digitalRead():
    1432:	89 32       	cpi	r24, 0x29	; 41
    1434:	a8 f4       	brcc	.+42     	; 0x1460 <digitalRead+0x32>
    1436:	f9 01       	movw	r30, r18
    1438:	e9 58       	subi	r30, 0x89	; 137
    143a:	ff 4b       	sbci	r31, 0xBF	; 191
    143c:	80 81       	ld	r24, Z
    143e:	8f 3f       	cpi	r24, 0xFF	; 255
    1440:	79 f0       	breq	.+30     	; 0x1460 <digitalRead+0x32>
    1442:	20 56       	subi	r18, 0x60	; 96
    1444:	3f 4b       	sbci	r19, 0xBF	; 191
    1446:	d9 01       	movw	r26, r18
    1448:	ec 91       	ld	r30, X
    144a:	b0 e2       	ldi	r27, 0x20	; 32
    144c:	eb 9f       	mul	r30, r27
    144e:	f0 01       	movw	r30, r0
    1450:	11 24       	eor	r1, r1
    1452:	fc 5f       	subi	r31, 0xFC	; 252
    1454:	90 85       	ldd	r25, Z+8	; 0x08
    1456:	98 23       	and	r25, r24
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	19 f4       	brne	.+6      	; 0x1462 <digitalRead+0x34>
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	08 95       	ret
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	08 95       	ret

00001464 <digitalWrite>:
digitalWrite():
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	89 32       	cpi	r24, 0x29	; 41
    146e:	08 f0       	brcs	.+2      	; 0x1472 <digitalWrite+0xe>
    1470:	7c c0       	rjmp	.+248    	; 0x156a <digitalWrite+0x106>
check_valid_digital_pin():
    1472:	90 e0       	ldi	r25, 0x00	; 0
digitalWrite():
    1474:	dc 01       	movw	r26, r24
    1476:	a9 58       	subi	r26, 0x89	; 137
    1478:	bf 4b       	sbci	r27, 0xBF	; 191
    147a:	2c 91       	ld	r18, X
    147c:	2f 3f       	cpi	r18, 0xFF	; 255
    147e:	09 f4       	brne	.+2      	; 0x1482 <digitalWrite+0x1e>
    1480:	74 c0       	rjmp	.+232    	; 0x156a <digitalWrite+0x106>
    1482:	8c 01       	movw	r16, r24
    1484:	00 56       	subi	r16, 0x60	; 96
    1486:	1f 4b       	sbci	r17, 0xBF	; 191
    1488:	e8 01       	movw	r28, r16
    148a:	e8 81       	ld	r30, Y
    148c:	d0 e2       	ldi	r29, 0x20	; 32
    148e:	ed 9f       	mul	r30, r29
    1490:	f0 01       	movw	r30, r0
    1492:	11 24       	eor	r1, r1
    1494:	fc 5f       	subi	r31, 0xFC	; 252
    1496:	61 11       	cpse	r22, r1
    1498:	33 c0       	rjmp	.+102    	; 0x1500 <digitalWrite+0x9c>
    149a:	26 83       	std	Z+6, r18	; 0x06
    149c:	30 81       	ld	r19, Z
    149e:	23 23       	and	r18, r19
    14a0:	ac 01       	movw	r20, r24
    14a2:	4c 5c       	subi	r20, 0xCC	; 204
    14a4:	5f 4b       	sbci	r21, 0xBF	; 191
    14a6:	21 11       	cpse	r18, r1
    14a8:	11 c0       	rjmp	.+34     	; 0x14cc <digitalWrite+0x68>
    14aa:	ea 01       	movw	r28, r20
    14ac:	28 81       	ld	r18, Y
    14ae:	30 97       	sbiw	r30, 0x00	; 0
    14b0:	49 f1       	breq	.+82     	; 0x1504 <digitalWrite+0xa0>
    14b2:	2f 3f       	cpi	r18, 0xFF	; 255
    14b4:	39 f1       	breq	.+78     	; 0x1504 <digitalWrite+0xa0>
    14b6:	70 96       	adiw	r30, 0x10	; 16
    14b8:	e2 0f       	add	r30, r18
    14ba:	f1 1d       	adc	r31, r1
    14bc:	3f b7       	in	r19, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	20 81       	ld	r18, Z
    14c2:	61 11       	cpse	r22, r1
    14c4:	22 c0       	rjmp	.+68     	; 0x150a <digitalWrite+0xa6>
    14c6:	27 7f       	andi	r18, 0xF7	; 247
    14c8:	20 83       	st	Z, r18
    14ca:	3f bf       	out	0x3f, r19	; 63
digitalPinToTimerNow():
    14cc:	fa 01       	movw	r30, r20
    14ce:	30 81       	ld	r19, Z
    14d0:	3f 3f       	cpi	r19, 0xFF	; 255
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <digitalWrite+0x72>
    14d4:	4a c0       	rjmp	.+148    	; 0x156a <digitalWrite+0x106>
    14d6:	e8 01       	movw	r28, r16
    14d8:	28 81       	ld	r18, Y
    14da:	36 30       	cpi	r19, 0x06	; 6
    14dc:	58 f5       	brcc	.+86     	; 0x1534 <digitalWrite+0xd0>
    14de:	30 91 e6 05 	lds	r19, 0x05E6	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
    14e2:	43 2f       	mov	r20, r19
    14e4:	47 70       	andi	r20, 0x07	; 7
    14e6:	24 13       	cpse	r18, r20
    14e8:	12 c0       	rjmp	.+36     	; 0x150e <digitalWrite+0xaa>
turnOffPWM():
    14ea:	ec 91       	ld	r30, X
    14ec:	e5 30       	cpi	r30, 0x05	; 5
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <digitalWrite+0x8e>
    14f0:	ee 0f       	add	r30, r30
    14f2:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    14f6:	e0 95       	com	r30
    14f8:	e8 23       	and	r30, r24
    14fa:	e0 93 01 0a 	sts	0x0A01, r30	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    14fe:	35 c0       	rjmp	.+106    	; 0x156a <digitalWrite+0x106>
digitalWrite():
    1500:	25 83       	std	Z+5, r18	; 0x05
    1502:	cc cf       	rjmp	.-104    	; 0x149c <digitalWrite+0x38>
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	e0 e0       	ldi	r30, 0x00	; 0
    1508:	d9 cf       	rjmp	.-78     	; 0x14bc <digitalWrite+0x58>
    150a:	28 60       	ori	r18, 0x08	; 8
    150c:	dd cf       	rjmp	.-70     	; 0x14c8 <digitalWrite+0x64>
digitalPinToTimerNow():
    150e:	38 71       	andi	r19, 0x18	; 24
    1510:	69 f4       	brne	.+26     	; 0x152c <digitalWrite+0xc8>
    1512:	21 30       	cpi	r18, 0x01	; 1
    1514:	79 f4       	brne	.+30     	; 0x1534 <digitalWrite+0xd0>
turnOffPWM():
    1516:	ec 91       	ld	r30, X
    1518:	e5 30       	cpi	r30, 0x05	; 5
    151a:	08 f0       	brcs	.+2      	; 0x151e <digitalWrite+0xba>
    151c:	ee 0f       	add	r30, r30
    151e:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    1522:	e0 95       	com	r30
    1524:	e8 23       	and	r30, r24
    1526:	e0 93 41 0a 	sts	0x0A41, r30	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    152a:	1f c0       	rjmp	.+62     	; 0x156a <digitalWrite+0x106>
digitalPinToTimerNow():
    152c:	38 31       	cpi	r19, 0x18	; 24
    152e:	11 f4       	brne	.+4      	; 0x1534 <digitalWrite+0xd0>
    1530:	26 30       	cpi	r18, 0x06	; 6
    1532:	89 f3       	breq	.-30     	; 0x1516 <digitalWrite+0xb2>
    1534:	85 5f       	subi	r24, 0xF5	; 245
    1536:	9f 4b       	sbci	r25, 0xBF	; 191
    1538:	fc 01       	movw	r30, r24
    153a:	80 81       	ld	r24, Z
    153c:	85 ff       	sbrs	r24, 5
    153e:	13 c0       	rjmp	.+38     	; 0x1566 <digitalWrite+0x102>
    1540:	30 e1       	ldi	r19, 0x10	; 16
    1542:	83 9f       	mul	r24, r19
    1544:	f0 01       	movw	r30, r0
    1546:	11 24       	eor	r1, r1
    1548:	f7 5f       	subi	r31, 0xF7	; 247
    154a:	91 81       	ldd	r25, Z+1	; 0x01
    154c:	97 70       	andi	r25, 0x07	; 7
    154e:	97 30       	cpi	r25, 0x07	; 7
    1550:	61 f4       	brne	.+24     	; 0x156a <digitalWrite+0x106>
turnOffPWM():
    1552:	ec 91       	ld	r30, X
    1554:	85 32       	cpi	r24, 0x25	; 37
    1556:	70 f4       	brcc	.+28     	; 0x1574 <digitalWrite+0x110>
    1558:	80 32       	cpi	r24, 0x20	; 32
    155a:	98 f4       	brcc	.+38     	; 0x1582 <digitalWrite+0x11e>
    155c:	88 30       	cpi	r24, 0x08	; 8
    155e:	e1 f2       	breq	.-72     	; 0x1518 <digitalWrite+0xb4>
    1560:	80 31       	cpi	r24, 0x10	; 16
    1562:	21 f2       	breq	.-120    	; 0x14ec <digitalWrite+0x88>
    1564:	02 c0       	rjmp	.+4      	; 0x156a <digitalWrite+0x106>
    1566:	81 11       	cpse	r24, r1
    1568:	f4 cf       	rjmp	.-24     	; 0x1552 <digitalWrite+0xee>
digitalWrite():
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	08 95       	ret
turnOffPWM():
    1574:	80 34       	cpi	r24, 0x40	; 64
    1576:	71 f0       	breq	.+28     	; 0x1594 <digitalWrite+0x130>
    1578:	80 38       	cpi	r24, 0x80	; 128
    157a:	b9 f7       	brne	.-18     	; 0x156a <digitalWrite+0x106>
    157c:	10 92 a0 06 	sts	0x06A0, r1	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
    1580:	f4 cf       	rjmp	.-24     	; 0x156a <digitalWrite+0x106>
    1582:	90 e1       	ldi	r25, 0x10	; 16
    1584:	89 9f       	mul	r24, r25
    1586:	f0 01       	movw	r30, r0
    1588:	11 24       	eor	r1, r1
    158a:	f7 5f       	subi	r31, 0xF7	; 247
    158c:	81 81       	ldd	r24, Z+1	; 0x01
    158e:	8f 7e       	andi	r24, 0xEF	; 239
    1590:	81 83       	std	Z+1, r24	; 0x01
    1592:	eb cf       	rjmp	.-42     	; 0x156a <digitalWrite+0x106>
    1594:	80 91 92 0b 	lds	r24, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    1598:	8e 23       	and	r24, r30
    159a:	39 f3       	breq	.-50     	; 0x156a <digitalWrite+0x106>
    159c:	c0 e2       	ldi	r28, 0x20	; 32
    159e:	2c 9f       	mul	r18, r28
    15a0:	90 01       	movw	r18, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	3c 5f       	subi	r19, 0xFC	; 252
    15a6:	ef 3f       	cpi	r30, 0xFF	; 255
    15a8:	31 f1       	breq	.+76     	; 0x15f6 <digitalWrite+0x192>
    15aa:	20 5f       	subi	r18, 0xF0	; 240
    15ac:	3f 4f       	sbci	r19, 0xFF	; 255
    15ae:	e2 0f       	add	r30, r18
    15b0:	f3 2f       	mov	r31, r19
    15b2:	f1 1d       	adc	r31, r1
    15b4:	4f b7       	in	r20, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    15bc:	9e 7f       	andi	r25, 0xFE	; 254
    15be:	90 93 80 0b 	sts	0x0B80, r25	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    15c2:	90 91 8e 0b 	lds	r25, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
    15c6:	90 ff       	sbrs	r25, 0
    15c8:	fc cf       	rjmp	.-8      	; 0x15c2 <digitalWrite+0x15e>
    15ca:	20 91 92 0b 	lds	r18, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	80 95       	com	r24
    15d2:	90 95       	com	r25
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	82 23       	and	r24, r18
    15d8:	93 23       	and	r25, r19
    15da:	28 ed       	ldi	r18, 0xD8	; 216
    15dc:	24 bf       	out	0x34, r18	; 52
    15de:	80 93 92 0b 	sts	0x0B92, r24	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    15e2:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 77       	andi	r24, 0x7F	; 127
    15f0:	80 83       	st	Z, r24
    15f2:	4f bf       	out	0x3f, r20	; 63
    15f4:	ba cf       	rjmp	.-140    	; 0x156a <digitalWrite+0x106>
digitalWrite():
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	e0 e0       	ldi	r30, 0x00	; 0
    15fa:	dc cf       	rjmp	.-72     	; 0x15b4 <digitalWrite+0x150>

000015fc <hd44780_pinIO::write4bits(unsigned char)>:
write4bits():
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	cf 93       	push	r28
    1602:	8c 01       	movw	r16, r24
    1604:	c6 2f       	mov	r28, r22
    1606:	fc 01       	movw	r30, r24
    1608:	83 a1       	ldd	r24, Z+35	; 0x23
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	c0 ff       	sbrs	r28, 0
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	29 df       	rcall	.-430    	; 0x1464 <digitalWrite>
    1612:	f8 01       	movw	r30, r16
    1614:	84 a1       	ldd	r24, Z+36	; 0x24
    1616:	61 e0       	ldi	r22, 0x01	; 1
    1618:	c1 ff       	sbrs	r28, 1
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	23 df       	rcall	.-442    	; 0x1464 <digitalWrite>
    161e:	f8 01       	movw	r30, r16
    1620:	85 a1       	ldd	r24, Z+37	; 0x25
    1622:	61 e0       	ldi	r22, 0x01	; 1
    1624:	c2 ff       	sbrs	r28, 2
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	1d df       	rcall	.-454    	; 0x1464 <digitalWrite>
    162a:	f8 01       	movw	r30, r16
    162c:	86 a1       	ldd	r24, Z+38	; 0x26
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	c3 ff       	sbrs	r28, 3
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	14 cf       	rjmp	.-472    	; 0x1464 <digitalWrite>

0000163c <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)>:
iowrite():
    163c:	4f 92       	push	r4
    163e:	5f 92       	push	r5
    1640:	6f 92       	push	r6
    1642:	7f 92       	push	r7
    1644:	8f 92       	push	r8
    1646:	9f 92       	push	r9
    1648:	af 92       	push	r10
    164a:	bf 92       	push	r11
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	ec 01       	movw	r28, r24
    1658:	7b 01       	movw	r14, r22
    165a:	14 2f       	mov	r17, r20
    165c:	88 a1       	ldd	r24, Y+32	; 0x20
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	e9 16       	cp	r14, r25
    1664:	f1 04       	cpc	r15, r1
    1666:	09 f0       	breq	.+2      	; 0x166a <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x2e>
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	fc de       	rcall	.-520    	; 0x1464 <digitalWrite>
    166c:	61 2f       	mov	r22, r17
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	84 e0       	ldi	r24, 0x04	; 4
    1672:	75 95       	asr	r23
    1674:	67 95       	ror	r22
    1676:	8a 95       	dec	r24
    1678:	e1 f7       	brne	.-8      	; 0x1672 <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x36>
    167a:	ce 01       	movw	r24, r28
    167c:	bf df       	rcall	.-130    	; 0x15fc <hd44780_pinIO::write4bits(unsigned char)>
waitReady():
    167e:	8c 8c       	ldd	r8, Y+28	; 0x1c
    1680:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1682:	ae 8c       	ldd	r10, Y+30	; 0x1e
    1684:	bf 8c       	ldd	r11, Y+31	; 0x1f
    1686:	48 8c       	ldd	r4, Y+24	; 0x18
    1688:	59 8c       	ldd	r5, Y+25	; 0x19
    168a:	6a 8c       	ldd	r6, Y+26	; 0x1a
    168c:	7b 8c       	ldd	r7, Y+27	; 0x1b
_ZN7hd4478010_waitReadyEmm.isra.0():
    168e:	41 dc       	rcall	.-1918   	; 0xf12 <micros>
    1690:	64 19       	sub	r22, r4
    1692:	75 09       	sbc	r23, r5
    1694:	86 09       	sbc	r24, r6
    1696:	97 09       	sbc	r25, r7
    1698:	68 15       	cp	r22, r8
    169a:	79 05       	cpc	r23, r9
    169c:	8a 05       	cpc	r24, r10
    169e:	9b 05       	cpc	r25, r11
    16a0:	b0 f3       	brcs	.-20     	; 0x168e <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x52>
_ZN13hd44780_pinIO11pulseEnableEv.isra.2():
    16a2:	61 e0       	ldi	r22, 0x01	; 1
    16a4:	8a a1       	ldd	r24, Y+34	; 0x22
    16a6:	de de       	rcall	.-580    	; 0x1464 <digitalWrite>
_delay_us():
    16a8:	88 e0       	ldi	r24, 0x08	; 8
    16aa:	8a 95       	dec	r24
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x6e>
_ZN13hd44780_pinIO11pulseEnableEv.isra.2():
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	8a a1       	ldd	r24, Y+34	; 0x22
    16b2:	d8 de       	rcall	.-592    	; 0x1464 <digitalWrite>
iowrite():
    16b4:	92 e0       	ldi	r25, 0x02	; 2
    16b6:	e9 16       	cp	r14, r25
    16b8:	f1 04       	cpc	r15, r1
    16ba:	69 f0       	breq	.+26     	; 0x16d6 <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x9a>
    16bc:	61 2f       	mov	r22, r17
    16be:	6f 70       	andi	r22, 0x0F	; 15
    16c0:	ce 01       	movw	r24, r28
    16c2:	9c df       	rcall	.-200    	; 0x15fc <hd44780_pinIO::write4bits(unsigned char)>
_ZN13hd44780_pinIO11pulseEnableEv.isra.2():
    16c4:	61 e0       	ldi	r22, 0x01	; 1
    16c6:	8a a1       	ldd	r24, Y+34	; 0x22
    16c8:	cd de       	rcall	.-614    	; 0x1464 <digitalWrite>
_delay_us():
    16ca:	88 e0       	ldi	r24, 0x08	; 8
    16cc:	8a 95       	dec	r24
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)+0x90>
_ZN13hd44780_pinIO11pulseEnableEv.isra.2():
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	8a a1       	ldd	r24, Y+34	; 0x22
    16d4:	c7 de       	rcall	.-626    	; 0x1464 <digitalWrite>
iowrite():
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	bf 90       	pop	r11
    16e6:	af 90       	pop	r10
    16e8:	9f 90       	pop	r9
    16ea:	8f 90       	pop	r8
    16ec:	7f 90       	pop	r7
    16ee:	6f 90       	pop	r6
    16f0:	5f 90       	pop	r5
    16f2:	4f 90       	pop	r4
    16f4:	08 95       	ret

000016f6 <hd44780::command4bit(unsigned char) [clone .constprop.15]>:
command4bit():
    16f6:	cf 92       	push	r12
    16f8:	df 92       	push	r13
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	48 2f       	mov	r20, r24
    1708:	62 e0       	ldi	r22, 0x02	; 2
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	85 e1       	ldi	r24, 0x15	; 21
    170e:	9e e4       	ldi	r25, 0x4E	; 78
    1710:	95 df       	rcall	.-214    	; 0x163c <hd44780_pinIO::iowrite(hd44780::iotype, unsigned char)>
    1712:	8c 01       	movw	r16, r24
    1714:	c5 e1       	ldi	r28, 0x15	; 21
    1716:	de e4       	ldi	r29, 0x4E	; 78
    1718:	cc 88       	ldd	r12, Y+20	; 0x14
    171a:	dd 88       	ldd	r13, Y+21	; 0x15
    171c:	ee 88       	ldd	r14, Y+22	; 0x16
    171e:	ff 88       	ldd	r15, Y+23	; 0x17
markStart():
    1720:	f8 db       	rcall	.-2064   	; 0xf12 <micros>
    1722:	68 8f       	std	Y+24, r22	; 0x18
    1724:	79 8f       	std	Y+25, r23	; 0x19
    1726:	8a 8f       	std	Y+26, r24	; 0x1a
    1728:	9b 8f       	std	Y+27, r25	; 0x1b
    172a:	cc 8e       	std	Y+28, r12	; 0x1c
    172c:	dd 8e       	std	Y+29, r13	; 0x1d
    172e:	ee 8e       	std	Y+30, r14	; 0x1e
    1730:	ff 8e       	std	Y+31, r15	; 0x1f
command4bit():
    1732:	c8 01       	movw	r24, r16
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	df 90       	pop	r13
    1742:	cf 90       	pop	r12
    1744:	08 95       	ret

00001746 <hd44780_pinIO::ioread(hd44780::iotype)>:
ioread():
    1746:	8f 92       	push	r8
    1748:	9f 92       	push	r9
    174a:	af 92       	push	r10
    174c:	bf 92       	push	r11
    174e:	cf 92       	push	r12
    1750:	df 92       	push	r13
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	dc 01       	movw	r26, r24
    1760:	91 96       	adiw	r26, 0x21	; 33
    1762:	2c 91       	ld	r18, X
    1764:	2f 3f       	cpi	r18, 0xFF	; 255
    1766:	09 f4       	brne	.+2      	; 0x176a <hd44780_pinIO::ioread(hd44780::iotype)+0x24>
    1768:	5e c1       	rjmp	.+700    	; 0x1a26 <hd44780_pinIO::ioread(hd44780::iotype)+0x2e0>
    176a:	8b 01       	movw	r16, r22
    176c:	ec 01       	movw	r28, r24
waitReady():
    176e:	cc 8c       	ldd	r12, Y+28	; 0x1c
    1770:	dd 8c       	ldd	r13, Y+29	; 0x1d
    1772:	ee 8c       	ldd	r14, Y+30	; 0x1e
    1774:	ff 8c       	ldd	r15, Y+31	; 0x1f
    1776:	88 8c       	ldd	r8, Y+24	; 0x18
    1778:	99 8c       	ldd	r9, Y+25	; 0x19
    177a:	aa 8c       	ldd	r10, Y+26	; 0x1a
    177c:	bb 8c       	ldd	r11, Y+27	; 0x1b
_ZN7hd4478010_waitReadyEmm.isra.0():
    177e:	c9 db       	rcall	.-2158   	; 0xf12 <micros>
    1780:	68 19       	sub	r22, r8
    1782:	79 09       	sbc	r23, r9
    1784:	8a 09       	sbc	r24, r10
    1786:	9b 09       	sbc	r25, r11
    1788:	6c 15       	cp	r22, r12
    178a:	7d 05       	cpc	r23, r13
    178c:	8e 05       	cpc	r24, r14
    178e:	9f 05       	cpc	r25, r15
    1790:	b0 f3       	brcs	.-20     	; 0x177e <hd44780_pinIO::ioread(hd44780::iotype)+0x38>
ioread():
    1792:	8b a1       	ldd	r24, Y+35	; 0x23
_pinMode():
    1794:	89 32       	cpi	r24, 0x29	; 41
    1796:	28 f5       	brcc	.+74     	; 0x17e2 <hd44780_pinIO::ioread(hd44780::iotype)+0x9c>
check_valid_digital_pin():
    1798:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    179a:	fc 01       	movw	r30, r24
    179c:	e9 58       	subi	r30, 0x89	; 137
    179e:	ff 4b       	sbci	r31, 0xBF	; 191
    17a0:	20 81       	ld	r18, Z
    17a2:	2f 3f       	cpi	r18, 0xFF	; 255
    17a4:	f1 f0       	breq	.+60     	; 0x17e2 <hd44780_pinIO::ioread(hd44780::iotype)+0x9c>
    17a6:	fc 01       	movw	r30, r24
    17a8:	e0 56       	subi	r30, 0x60	; 96
    17aa:	ff 4b       	sbci	r31, 0xBF	; 191
    17ac:	e0 81       	ld	r30, Z
    17ae:	b0 e2       	ldi	r27, 0x20	; 32
    17b0:	eb 9f       	mul	r30, r27
    17b2:	f0 01       	movw	r30, r0
    17b4:	11 24       	eor	r1, r1
    17b6:	fc 5f       	subi	r31, 0xFC	; 252
    17b8:	8c 5c       	subi	r24, 0xCC	; 204
    17ba:	9f 4b       	sbci	r25, 0xBF	; 191
    17bc:	dc 01       	movw	r26, r24
    17be:	3c 91       	ld	r19, X
ioread():
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	a0 e0       	ldi	r26, 0x00	; 0
_pinMode():
    17c4:	3f 3f       	cpi	r19, 0xFF	; 255
    17c6:	29 f0       	breq	.+10     	; 0x17d2 <hd44780_pinIO::ioread(hd44780::iotype)+0x8c>
    17c8:	cf 01       	movw	r24, r30
    17ca:	40 96       	adiw	r24, 0x10	; 16
    17cc:	dc 01       	movw	r26, r24
    17ce:	a3 0f       	add	r26, r19
    17d0:	b1 1d       	adc	r27, r1
    17d2:	9f b7       	in	r25, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	22 83       	std	Z+2, r18	; 0x02
    17d8:	8c 91       	ld	r24, X
    17da:	87 7f       	andi	r24, 0xF7	; 247
    17dc:	8c 93       	st	X, r24
    17de:	26 83       	std	Z+6, r18	; 0x06
    17e0:	9f bf       	out	0x3f, r25	; 63
ioread():
    17e2:	8c a1       	ldd	r24, Y+36	; 0x24
_pinMode():
    17e4:	89 32       	cpi	r24, 0x29	; 41
    17e6:	28 f5       	brcc	.+74     	; 0x1832 <hd44780_pinIO::ioread(hd44780::iotype)+0xec>
check_valid_digital_pin():
    17e8:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    17ea:	fc 01       	movw	r30, r24
    17ec:	e9 58       	subi	r30, 0x89	; 137
    17ee:	ff 4b       	sbci	r31, 0xBF	; 191
    17f0:	20 81       	ld	r18, Z
    17f2:	2f 3f       	cpi	r18, 0xFF	; 255
    17f4:	f1 f0       	breq	.+60     	; 0x1832 <hd44780_pinIO::ioread(hd44780::iotype)+0xec>
    17f6:	fc 01       	movw	r30, r24
    17f8:	e0 56       	subi	r30, 0x60	; 96
    17fa:	ff 4b       	sbci	r31, 0xBF	; 191
    17fc:	e0 81       	ld	r30, Z
    17fe:	b0 e2       	ldi	r27, 0x20	; 32
    1800:	eb 9f       	mul	r30, r27
    1802:	f0 01       	movw	r30, r0
    1804:	11 24       	eor	r1, r1
    1806:	fc 5f       	subi	r31, 0xFC	; 252
    1808:	8c 5c       	subi	r24, 0xCC	; 204
    180a:	9f 4b       	sbci	r25, 0xBF	; 191
    180c:	dc 01       	movw	r26, r24
    180e:	3c 91       	ld	r19, X
ioread():
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	a0 e0       	ldi	r26, 0x00	; 0
_pinMode():
    1814:	3f 3f       	cpi	r19, 0xFF	; 255
    1816:	29 f0       	breq	.+10     	; 0x1822 <hd44780_pinIO::ioread(hd44780::iotype)+0xdc>
    1818:	cf 01       	movw	r24, r30
    181a:	40 96       	adiw	r24, 0x10	; 16
    181c:	dc 01       	movw	r26, r24
    181e:	a3 0f       	add	r26, r19
    1820:	b1 1d       	adc	r27, r1
    1822:	9f b7       	in	r25, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	22 83       	std	Z+2, r18	; 0x02
    1828:	8c 91       	ld	r24, X
    182a:	87 7f       	andi	r24, 0xF7	; 247
    182c:	8c 93       	st	X, r24
    182e:	26 83       	std	Z+6, r18	; 0x06
    1830:	9f bf       	out	0x3f, r25	; 63
ioread():
    1832:	8d a1       	ldd	r24, Y+37	; 0x25
_pinMode():
    1834:	89 32       	cpi	r24, 0x29	; 41
    1836:	28 f5       	brcc	.+74     	; 0x1882 <hd44780_pinIO::ioread(hd44780::iotype)+0x13c>
check_valid_digital_pin():
    1838:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    183a:	fc 01       	movw	r30, r24
    183c:	e9 58       	subi	r30, 0x89	; 137
    183e:	ff 4b       	sbci	r31, 0xBF	; 191
    1840:	20 81       	ld	r18, Z
    1842:	2f 3f       	cpi	r18, 0xFF	; 255
    1844:	f1 f0       	breq	.+60     	; 0x1882 <hd44780_pinIO::ioread(hd44780::iotype)+0x13c>
    1846:	fc 01       	movw	r30, r24
    1848:	e0 56       	subi	r30, 0x60	; 96
    184a:	ff 4b       	sbci	r31, 0xBF	; 191
    184c:	e0 81       	ld	r30, Z
    184e:	b0 e2       	ldi	r27, 0x20	; 32
    1850:	eb 9f       	mul	r30, r27
    1852:	f0 01       	movw	r30, r0
    1854:	11 24       	eor	r1, r1
    1856:	fc 5f       	subi	r31, 0xFC	; 252
    1858:	8c 5c       	subi	r24, 0xCC	; 204
    185a:	9f 4b       	sbci	r25, 0xBF	; 191
    185c:	dc 01       	movw	r26, r24
    185e:	3c 91       	ld	r19, X
ioread():
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	a0 e0       	ldi	r26, 0x00	; 0
_pinMode():
    1864:	3f 3f       	cpi	r19, 0xFF	; 255
    1866:	29 f0       	breq	.+10     	; 0x1872 <hd44780_pinIO::ioread(hd44780::iotype)+0x12c>
    1868:	cf 01       	movw	r24, r30
    186a:	40 96       	adiw	r24, 0x10	; 16
    186c:	dc 01       	movw	r26, r24
    186e:	a3 0f       	add	r26, r19
    1870:	b1 1d       	adc	r27, r1
    1872:	9f b7       	in	r25, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	22 83       	std	Z+2, r18	; 0x02
    1878:	8c 91       	ld	r24, X
    187a:	87 7f       	andi	r24, 0xF7	; 247
    187c:	8c 93       	st	X, r24
    187e:	26 83       	std	Z+6, r18	; 0x06
    1880:	9f bf       	out	0x3f, r25	; 63
ioread():
    1882:	8e a1       	ldd	r24, Y+38	; 0x26
_pinMode():
    1884:	89 32       	cpi	r24, 0x29	; 41
    1886:	28 f5       	brcc	.+74     	; 0x18d2 <hd44780_pinIO::ioread(hd44780::iotype)+0x18c>
check_valid_digital_pin():
    1888:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    188a:	fc 01       	movw	r30, r24
    188c:	e9 58       	subi	r30, 0x89	; 137
    188e:	ff 4b       	sbci	r31, 0xBF	; 191
    1890:	20 81       	ld	r18, Z
    1892:	2f 3f       	cpi	r18, 0xFF	; 255
    1894:	f1 f0       	breq	.+60     	; 0x18d2 <hd44780_pinIO::ioread(hd44780::iotype)+0x18c>
    1896:	fc 01       	movw	r30, r24
    1898:	e0 56       	subi	r30, 0x60	; 96
    189a:	ff 4b       	sbci	r31, 0xBF	; 191
    189c:	e0 81       	ld	r30, Z
    189e:	b0 e2       	ldi	r27, 0x20	; 32
    18a0:	eb 9f       	mul	r30, r27
    18a2:	f0 01       	movw	r30, r0
    18a4:	11 24       	eor	r1, r1
    18a6:	fc 5f       	subi	r31, 0xFC	; 252
    18a8:	8c 5c       	subi	r24, 0xCC	; 204
    18aa:	9f 4b       	sbci	r25, 0xBF	; 191
    18ac:	dc 01       	movw	r26, r24
    18ae:	3c 91       	ld	r19, X
ioread():
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	a0 e0       	ldi	r26, 0x00	; 0
_pinMode():
    18b4:	3f 3f       	cpi	r19, 0xFF	; 255
    18b6:	29 f0       	breq	.+10     	; 0x18c2 <hd44780_pinIO::ioread(hd44780::iotype)+0x17c>
    18b8:	cf 01       	movw	r24, r30
    18ba:	40 96       	adiw	r24, 0x10	; 16
    18bc:	dc 01       	movw	r26, r24
    18be:	a3 0f       	add	r26, r19
    18c0:	b1 1d       	adc	r27, r1
    18c2:	9f b7       	in	r25, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	22 83       	std	Z+2, r18	; 0x02
    18c8:	8c 91       	ld	r24, X
    18ca:	87 7f       	andi	r24, 0xF7	; 247
    18cc:	8c 93       	st	X, r24
    18ce:	26 83       	std	Z+6, r18	; 0x06
    18d0:	9f bf       	out	0x3f, r25	; 63
    18d2:	88 a1       	ldd	r24, Y+32	; 0x20
ioread():
    18d4:	61 e0       	ldi	r22, 0x01	; 1
    18d6:	01 30       	cpi	r16, 0x01	; 1
    18d8:	11 05       	cpc	r17, r1
    18da:	09 f0       	breq	.+2      	; 0x18de <hd44780_pinIO::ioread(hd44780::iotype)+0x198>
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	c2 dd       	rcall	.-1148   	; 0x1464 <digitalWrite>
    18e0:	61 e0       	ldi	r22, 0x01	; 1
    18e2:	89 a1       	ldd	r24, Y+33	; 0x21
    18e4:	bf dd       	rcall	.-1154   	; 0x1464 <digitalWrite>
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	8a a1       	ldd	r24, Y+34	; 0x22
    18ea:	bc dd       	rcall	.-1160   	; 0x1464 <digitalWrite>
_delay_us():
    18ec:	b8 e0       	ldi	r27, 0x08	; 8
    18ee:	ba 95       	dec	r27
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <hd44780_pinIO::ioread(hd44780::iotype)+0x1a8>
ioread():
    18f2:	8b a1       	ldd	r24, Y+35	; 0x23
    18f4:	9c dd       	rcall	.-1224   	; 0x142e <digitalRead>
    18f6:	10 e0       	ldi	r17, 0x00	; 0
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <hd44780_pinIO::ioread(hd44780::iotype)+0x1b8>
    18fc:	10 e1       	ldi	r17, 0x10	; 16
    18fe:	8c a1       	ldd	r24, Y+36	; 0x24
    1900:	96 dd       	rcall	.-1236   	; 0x142e <digitalRead>
    1902:	81 30       	cpi	r24, 0x01	; 1
    1904:	09 f4       	brne	.+2      	; 0x1908 <hd44780_pinIO::ioread(hd44780::iotype)+0x1c2>
    1906:	10 62       	ori	r17, 0x20	; 32
    1908:	8d a1       	ldd	r24, Y+37	; 0x25
    190a:	91 dd       	rcall	.-1246   	; 0x142e <digitalRead>
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	09 f4       	brne	.+2      	; 0x1912 <hd44780_pinIO::ioread(hd44780::iotype)+0x1cc>
    1910:	10 64       	ori	r17, 0x40	; 64
    1912:	8e a1       	ldd	r24, Y+38	; 0x26
    1914:	8c dd       	rcall	.-1256   	; 0x142e <digitalRead>
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	09 f4       	brne	.+2      	; 0x191c <hd44780_pinIO::ioread(hd44780::iotype)+0x1d6>
    191a:	10 68       	ori	r17, 0x80	; 128
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	8a a1       	ldd	r24, Y+34	; 0x22
    1920:	a1 dd       	rcall	.-1214   	; 0x1464 <digitalWrite>
_delay_us():
    1922:	e8 e0       	ldi	r30, 0x08	; 8
    1924:	ea 95       	dec	r30
    1926:	f1 f7       	brne	.-4      	; 0x1924 <hd44780_pinIO::ioread(hd44780::iotype)+0x1de>
ioread():
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	8a a1       	ldd	r24, Y+34	; 0x22
    192c:	9b dd       	rcall	.-1226   	; 0x1464 <digitalWrite>
_delay_us():
    192e:	f8 e0       	ldi	r31, 0x08	; 8
    1930:	fa 95       	dec	r31
    1932:	f1 f7       	brne	.-4      	; 0x1930 <hd44780_pinIO::ioread(hd44780::iotype)+0x1ea>
ioread():
    1934:	8b a1       	ldd	r24, Y+35	; 0x23
    1936:	7b dd       	rcall	.-1290   	; 0x142e <digitalRead>
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	09 f4       	brne	.+2      	; 0x193e <hd44780_pinIO::ioread(hd44780::iotype)+0x1f8>
    193c:	11 60       	ori	r17, 0x01	; 1
    193e:	8c a1       	ldd	r24, Y+36	; 0x24
    1940:	76 dd       	rcall	.-1300   	; 0x142e <digitalRead>
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	09 f4       	brne	.+2      	; 0x1948 <hd44780_pinIO::ioread(hd44780::iotype)+0x202>
    1946:	12 60       	ori	r17, 0x02	; 2
    1948:	8d a1       	ldd	r24, Y+37	; 0x25
    194a:	71 dd       	rcall	.-1310   	; 0x142e <digitalRead>
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	09 f4       	brne	.+2      	; 0x1952 <hd44780_pinIO::ioread(hd44780::iotype)+0x20c>
    1950:	14 60       	ori	r17, 0x04	; 4
    1952:	8e a1       	ldd	r24, Y+38	; 0x26
    1954:	6c dd       	rcall	.-1320   	; 0x142e <digitalRead>
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	09 f4       	brne	.+2      	; 0x195c <hd44780_pinIO::ioread(hd44780::iotype)+0x216>
    195a:	18 60       	ori	r17, 0x08	; 8
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	8a a1       	ldd	r24, Y+34	; 0x22
    1960:	81 dd       	rcall	.-1278   	; 0x1464 <digitalWrite>
    1962:	8b a1       	ldd	r24, Y+35	; 0x23
_pinMode():
    1964:	89 32       	cpi	r24, 0x29	; 41
    1966:	88 f4       	brcc	.+34     	; 0x198a <hd44780_pinIO::ioread(hd44780::iotype)+0x244>
check_valid_digital_pin():
    1968:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    196a:	fc 01       	movw	r30, r24
    196c:	e9 58       	subi	r30, 0x89	; 137
    196e:	ff 4b       	sbci	r31, 0xBF	; 191
    1970:	20 81       	ld	r18, Z
    1972:	2f 3f       	cpi	r18, 0xFF	; 255
    1974:	51 f0       	breq	.+20     	; 0x198a <hd44780_pinIO::ioread(hd44780::iotype)+0x244>
    1976:	80 56       	subi	r24, 0x60	; 96
    1978:	9f 4b       	sbci	r25, 0xBF	; 191
    197a:	dc 01       	movw	r26, r24
    197c:	ec 91       	ld	r30, X
    197e:	b0 e2       	ldi	r27, 0x20	; 32
    1980:	eb 9f       	mul	r30, r27
    1982:	f0 01       	movw	r30, r0
    1984:	11 24       	eor	r1, r1
    1986:	fc 5f       	subi	r31, 0xFC	; 252
    1988:	21 83       	std	Z+1, r18	; 0x01
ioread():
    198a:	8c a1       	ldd	r24, Y+36	; 0x24
_pinMode():
    198c:	89 32       	cpi	r24, 0x29	; 41
    198e:	88 f4       	brcc	.+34     	; 0x19b2 <hd44780_pinIO::ioread(hd44780::iotype)+0x26c>
check_valid_digital_pin():
    1990:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1992:	fc 01       	movw	r30, r24
    1994:	e9 58       	subi	r30, 0x89	; 137
    1996:	ff 4b       	sbci	r31, 0xBF	; 191
    1998:	20 81       	ld	r18, Z
    199a:	2f 3f       	cpi	r18, 0xFF	; 255
    199c:	51 f0       	breq	.+20     	; 0x19b2 <hd44780_pinIO::ioread(hd44780::iotype)+0x26c>
    199e:	80 56       	subi	r24, 0x60	; 96
    19a0:	9f 4b       	sbci	r25, 0xBF	; 191
    19a2:	dc 01       	movw	r26, r24
    19a4:	ec 91       	ld	r30, X
    19a6:	b0 e2       	ldi	r27, 0x20	; 32
    19a8:	eb 9f       	mul	r30, r27
    19aa:	f0 01       	movw	r30, r0
    19ac:	11 24       	eor	r1, r1
    19ae:	fc 5f       	subi	r31, 0xFC	; 252
    19b0:	21 83       	std	Z+1, r18	; 0x01
ioread():
    19b2:	8d a1       	ldd	r24, Y+37	; 0x25
_pinMode():
    19b4:	89 32       	cpi	r24, 0x29	; 41
    19b6:	88 f4       	brcc	.+34     	; 0x19da <hd44780_pinIO::ioread(hd44780::iotype)+0x294>
check_valid_digital_pin():
    19b8:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    19ba:	fc 01       	movw	r30, r24
    19bc:	e9 58       	subi	r30, 0x89	; 137
    19be:	ff 4b       	sbci	r31, 0xBF	; 191
    19c0:	20 81       	ld	r18, Z
    19c2:	2f 3f       	cpi	r18, 0xFF	; 255
    19c4:	51 f0       	breq	.+20     	; 0x19da <hd44780_pinIO::ioread(hd44780::iotype)+0x294>
    19c6:	80 56       	subi	r24, 0x60	; 96
    19c8:	9f 4b       	sbci	r25, 0xBF	; 191
    19ca:	dc 01       	movw	r26, r24
    19cc:	ec 91       	ld	r30, X
    19ce:	b0 e2       	ldi	r27, 0x20	; 32
    19d0:	eb 9f       	mul	r30, r27
    19d2:	f0 01       	movw	r30, r0
    19d4:	11 24       	eor	r1, r1
    19d6:	fc 5f       	subi	r31, 0xFC	; 252
    19d8:	21 83       	std	Z+1, r18	; 0x01
ioread():
    19da:	8e a1       	ldd	r24, Y+38	; 0x26
_pinMode():
    19dc:	89 32       	cpi	r24, 0x29	; 41
    19de:	88 f4       	brcc	.+34     	; 0x1a02 <hd44780_pinIO::ioread(hd44780::iotype)+0x2bc>
check_valid_digital_pin():
    19e0:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    19e2:	fc 01       	movw	r30, r24
    19e4:	e9 58       	subi	r30, 0x89	; 137
    19e6:	ff 4b       	sbci	r31, 0xBF	; 191
    19e8:	20 81       	ld	r18, Z
    19ea:	2f 3f       	cpi	r18, 0xFF	; 255
    19ec:	51 f0       	breq	.+20     	; 0x1a02 <hd44780_pinIO::ioread(hd44780::iotype)+0x2bc>
    19ee:	80 56       	subi	r24, 0x60	; 96
    19f0:	9f 4b       	sbci	r25, 0xBF	; 191
    19f2:	dc 01       	movw	r26, r24
    19f4:	ec 91       	ld	r30, X
    19f6:	b0 e2       	ldi	r27, 0x20	; 32
    19f8:	eb 9f       	mul	r30, r27
    19fa:	f0 01       	movw	r30, r0
    19fc:	11 24       	eor	r1, r1
    19fe:	fc 5f       	subi	r31, 0xFC	; 252
    1a00:	21 83       	std	Z+1, r18	; 0x01
ioread():
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	89 a1       	ldd	r24, Y+33	; 0x21
    1a06:	2e dd       	rcall	.-1444   	; 0x1464 <digitalWrite>
    1a08:	81 2f       	mov	r24, r17
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	ff 90       	pop	r15
    1a16:	ef 90       	pop	r14
    1a18:	df 90       	pop	r13
    1a1a:	cf 90       	pop	r12
    1a1c:	bf 90       	pop	r11
    1a1e:	af 90       	pop	r10
    1a20:	9f 90       	pop	r9
    1a22:	8f 90       	pop	r8
    1a24:	08 95       	ret
    1a26:	8d ef       	ldi	r24, 0xFD	; 253
    1a28:	9f ef       	ldi	r25, 0xFF	; 255
    1a2a:	f0 cf       	rjmp	.-32     	; 0x1a0c <hd44780_pinIO::ioread(hd44780::iotype)+0x2c6>

00001a2c <hd44780_pinIO::ioinit()>:
ioinit():
    1a2c:	cf 92       	push	r12
    1a2e:	df 92       	push	r13
    1a30:	ef 92       	push	r14
    1a32:	ff 92       	push	r15
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	8c 01       	movw	r16, r24
    1a3e:	dc 01       	movw	r26, r24
    1a40:	90 96       	adiw	r26, 0x20	; 32
    1a42:	8c 91       	ld	r24, X
_pinMode():
    1a44:	89 32       	cpi	r24, 0x29	; 41
    1a46:	88 f4       	brcc	.+34     	; 0x1a6a <hd44780_pinIO::ioinit()+0x3e>
check_valid_digital_pin():
    1a48:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	e9 58       	subi	r30, 0x89	; 137
    1a4e:	ff 4b       	sbci	r31, 0xBF	; 191
    1a50:	20 81       	ld	r18, Z
    1a52:	2f 3f       	cpi	r18, 0xFF	; 255
    1a54:	51 f0       	breq	.+20     	; 0x1a6a <hd44780_pinIO::ioinit()+0x3e>
    1a56:	80 56       	subi	r24, 0x60	; 96
    1a58:	9f 4b       	sbci	r25, 0xBF	; 191
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	ec 91       	ld	r30, X
    1a5e:	b0 e2       	ldi	r27, 0x20	; 32
    1a60:	eb 9f       	mul	r30, r27
    1a62:	f0 01       	movw	r30, r0
    1a64:	11 24       	eor	r1, r1
    1a66:	fc 5f       	subi	r31, 0xFC	; 252
    1a68:	21 83       	std	Z+1, r18	; 0x01
ioinit():
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	81 a1       	ldd	r24, Z+33	; 0x21
    1a6e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a70:	b1 f0       	breq	.+44     	; 0x1a9e <hd44780_pinIO::ioinit()+0x72>
_pinMode():
    1a72:	89 32       	cpi	r24, 0x29	; 41
    1a74:	90 f4       	brcc	.+36     	; 0x1a9a <hd44780_pinIO::ioinit()+0x6e>
check_valid_digital_pin():
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
    1a7a:	f9 01       	movw	r30, r18
    1a7c:	e9 58       	subi	r30, 0x89	; 137
    1a7e:	ff 4b       	sbci	r31, 0xBF	; 191
    1a80:	90 81       	ld	r25, Z
    1a82:	9f 3f       	cpi	r25, 0xFF	; 255
    1a84:	51 f0       	breq	.+20     	; 0x1a9a <hd44780_pinIO::ioinit()+0x6e>
    1a86:	20 56       	subi	r18, 0x60	; 96
    1a88:	3f 4b       	sbci	r19, 0xBF	; 191
    1a8a:	d9 01       	movw	r26, r18
    1a8c:	ec 91       	ld	r30, X
    1a8e:	b0 e2       	ldi	r27, 0x20	; 32
    1a90:	eb 9f       	mul	r30, r27
    1a92:	f0 01       	movw	r30, r0
    1a94:	11 24       	eor	r1, r1
    1a96:	fc 5f       	subi	r31, 0xFC	; 252
    1a98:	91 83       	std	Z+1, r25	; 0x01
ioinit():
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	e3 dc       	rcall	.-1594   	; 0x1464 <digitalWrite>
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	82 a1       	ldd	r24, Z+34	; 0x22
_pinMode():
    1aa2:	89 32       	cpi	r24, 0x29	; 41
    1aa4:	90 f4       	brcc	.+36     	; 0x1aca <hd44780_pinIO::ioinit()+0x9e>
check_valid_digital_pin():
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
    1aaa:	f9 01       	movw	r30, r18
    1aac:	e9 58       	subi	r30, 0x89	; 137
    1aae:	ff 4b       	sbci	r31, 0xBF	; 191
    1ab0:	90 81       	ld	r25, Z
    1ab2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ab4:	51 f0       	breq	.+20     	; 0x1aca <hd44780_pinIO::ioinit()+0x9e>
    1ab6:	20 56       	subi	r18, 0x60	; 96
    1ab8:	3f 4b       	sbci	r19, 0xBF	; 191
    1aba:	d9 01       	movw	r26, r18
    1abc:	ec 91       	ld	r30, X
    1abe:	b0 e2       	ldi	r27, 0x20	; 32
    1ac0:	eb 9f       	mul	r30, r27
    1ac2:	f0 01       	movw	r30, r0
    1ac4:	11 24       	eor	r1, r1
    1ac6:	fc 5f       	subi	r31, 0xFC	; 252
    1ac8:	91 83       	std	Z+1, r25	; 0x01
ioinit():
    1aca:	60 e0       	ldi	r22, 0x00	; 0
    1acc:	cb dc       	rcall	.-1642   	; 0x1464 <digitalWrite>
    1ace:	f8 01       	movw	r30, r16
    1ad0:	83 a1       	ldd	r24, Z+35	; 0x23
_pinMode():
    1ad2:	89 32       	cpi	r24, 0x29	; 41
    1ad4:	88 f4       	brcc	.+34     	; 0x1af8 <hd44780_pinIO::ioinit()+0xcc>
check_valid_digital_pin():
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1ad8:	fc 01       	movw	r30, r24
    1ada:	e9 58       	subi	r30, 0x89	; 137
    1adc:	ff 4b       	sbci	r31, 0xBF	; 191
    1ade:	20 81       	ld	r18, Z
    1ae0:	2f 3f       	cpi	r18, 0xFF	; 255
    1ae2:	51 f0       	breq	.+20     	; 0x1af8 <hd44780_pinIO::ioinit()+0xcc>
    1ae4:	80 56       	subi	r24, 0x60	; 96
    1ae6:	9f 4b       	sbci	r25, 0xBF	; 191
    1ae8:	dc 01       	movw	r26, r24
    1aea:	ec 91       	ld	r30, X
    1aec:	b0 e2       	ldi	r27, 0x20	; 32
    1aee:	eb 9f       	mul	r30, r27
    1af0:	f0 01       	movw	r30, r0
    1af2:	11 24       	eor	r1, r1
    1af4:	fc 5f       	subi	r31, 0xFC	; 252
    1af6:	21 83       	std	Z+1, r18	; 0x01
ioinit():
    1af8:	f8 01       	movw	r30, r16
    1afa:	84 a1       	ldd	r24, Z+36	; 0x24
_pinMode():
    1afc:	89 32       	cpi	r24, 0x29	; 41
    1afe:	88 f4       	brcc	.+34     	; 0x1b22 <hd44780_pinIO::ioinit()+0xf6>
check_valid_digital_pin():
    1b00:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1b02:	fc 01       	movw	r30, r24
    1b04:	e9 58       	subi	r30, 0x89	; 137
    1b06:	ff 4b       	sbci	r31, 0xBF	; 191
    1b08:	20 81       	ld	r18, Z
    1b0a:	2f 3f       	cpi	r18, 0xFF	; 255
    1b0c:	51 f0       	breq	.+20     	; 0x1b22 <hd44780_pinIO::ioinit()+0xf6>
    1b0e:	80 56       	subi	r24, 0x60	; 96
    1b10:	9f 4b       	sbci	r25, 0xBF	; 191
    1b12:	dc 01       	movw	r26, r24
    1b14:	ec 91       	ld	r30, X
    1b16:	b0 e2       	ldi	r27, 0x20	; 32
    1b18:	eb 9f       	mul	r30, r27
    1b1a:	f0 01       	movw	r30, r0
    1b1c:	11 24       	eor	r1, r1
    1b1e:	fc 5f       	subi	r31, 0xFC	; 252
    1b20:	21 83       	std	Z+1, r18	; 0x01
ioinit():
    1b22:	f8 01       	movw	r30, r16
    1b24:	85 a1       	ldd	r24, Z+37	; 0x25
_pinMode():
    1b26:	89 32       	cpi	r24, 0x29	; 41
    1b28:	88 f4       	brcc	.+34     	; 0x1b4c <hd44780_pinIO::ioinit()+0x120>
check_valid_digital_pin():
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	e9 58       	subi	r30, 0x89	; 137
    1b30:	ff 4b       	sbci	r31, 0xBF	; 191
    1b32:	20 81       	ld	r18, Z
    1b34:	2f 3f       	cpi	r18, 0xFF	; 255
    1b36:	51 f0       	breq	.+20     	; 0x1b4c <hd44780_pinIO::ioinit()+0x120>
    1b38:	80 56       	subi	r24, 0x60	; 96
    1b3a:	9f 4b       	sbci	r25, 0xBF	; 191
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	ec 91       	ld	r30, X
    1b40:	b0 e2       	ldi	r27, 0x20	; 32
    1b42:	eb 9f       	mul	r30, r27
    1b44:	f0 01       	movw	r30, r0
    1b46:	11 24       	eor	r1, r1
    1b48:	fc 5f       	subi	r31, 0xFC	; 252
    1b4a:	21 83       	std	Z+1, r18	; 0x01
ioinit():
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	86 a1       	ldd	r24, Z+38	; 0x26
_pinMode():
    1b50:	89 32       	cpi	r24, 0x29	; 41
    1b52:	88 f4       	brcc	.+34     	; 0x1b76 <hd44780_pinIO::ioinit()+0x14a>
check_valid_digital_pin():
    1b54:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1b56:	fc 01       	movw	r30, r24
    1b58:	e9 58       	subi	r30, 0x89	; 137
    1b5a:	ff 4b       	sbci	r31, 0xBF	; 191
    1b5c:	20 81       	ld	r18, Z
    1b5e:	2f 3f       	cpi	r18, 0xFF	; 255
    1b60:	51 f0       	breq	.+20     	; 0x1b76 <hd44780_pinIO::ioinit()+0x14a>
    1b62:	80 56       	subi	r24, 0x60	; 96
    1b64:	9f 4b       	sbci	r25, 0xBF	; 191
    1b66:	dc 01       	movw	r26, r24
    1b68:	ec 91       	ld	r30, X
    1b6a:	b0 e2       	ldi	r27, 0x20	; 32
    1b6c:	eb 9f       	mul	r30, r27
    1b6e:	f0 01       	movw	r30, r0
    1b70:	11 24       	eor	r1, r1
    1b72:	fc 5f       	subi	r31, 0xFC	; 252
    1b74:	21 83       	std	Z+1, r18	; 0x01
ioinit():
    1b76:	f8 01       	movw	r30, r16
    1b78:	c7 a1       	ldd	r28, Z+39	; 0x27
    1b7a:	cf 3f       	cpi	r28, 0xFF	; 255
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <hd44780_pinIO::ioinit()+0x154>
    1b7e:	8a c0       	rjmp	.+276    	; 0x1c94 <hd44780_pinIO::ioinit()+0x268>
    1b80:	80 a5       	ldd	r24, Z+40	; 0x28
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <hd44780_pinIO::ioinit()+0x15c>
    1b86:	70 c0       	rjmp	.+224    	; 0x1c68 <hd44780_pinIO::ioinit()+0x23c>
    1b88:	ec 2e       	mov	r14, r28
    1b8a:	f1 2c       	mov	r15, r1
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	8c 2f       	mov	r24, r28
    1b90:	69 dc       	rcall	.-1838   	; 0x1464 <digitalWrite>
_pinMode():
    1b92:	c9 32       	cpi	r28, 0x29	; 41
    1b94:	08 f0       	brcs	.+2      	; 0x1b98 <hd44780_pinIO::ioinit()+0x16c>
    1b96:	8f c0       	rjmp	.+286    	; 0x1cb6 <hd44780_pinIO::ioinit()+0x28a>
    1b98:	c7 01       	movw	r24, r14
    1b9a:	89 58       	subi	r24, 0x89	; 137
    1b9c:	9f 4b       	sbci	r25, 0xBF	; 191
    1b9e:	6c 01       	movw	r12, r24
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	8c 91       	ld	r24, X
    1ba4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ba6:	f1 f0       	breq	.+60     	; 0x1be4 <hd44780_pinIO::ioinit()+0x1b8>
    1ba8:	f7 01       	movw	r30, r14
    1baa:	e0 56       	subi	r30, 0x60	; 96
    1bac:	ff 4b       	sbci	r31, 0xBF	; 191
    1bae:	e0 81       	ld	r30, Z
    1bb0:	b0 e2       	ldi	r27, 0x20	; 32
    1bb2:	eb 9f       	mul	r30, r27
    1bb4:	f0 01       	movw	r30, r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	fc 5f       	subi	r31, 0xFC	; 252
    1bba:	d7 01       	movw	r26, r14
    1bbc:	ac 5c       	subi	r26, 0xCC	; 204
    1bbe:	bf 4b       	sbci	r27, 0xBF	; 191
    1bc0:	ac 91       	ld	r26, X
    1bc2:	af 3f       	cpi	r26, 0xFF	; 255
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <hd44780_pinIO::ioinit()+0x19c>
    1bc6:	71 c0       	rjmp	.+226    	; 0x1caa <hd44780_pinIO::ioinit()+0x27e>
    1bc8:	9f 01       	movw	r18, r30
    1bca:	20 5f       	subi	r18, 0xF0	; 240
    1bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bce:	a2 0f       	add	r26, r18
    1bd0:	b3 2f       	mov	r27, r19
    1bd2:	b1 1d       	adc	r27, r1
    1bd4:	2f b7       	in	r18, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	82 83       	std	Z+2, r24	; 0x02
    1bda:	9c 91       	ld	r25, X
    1bdc:	97 7f       	andi	r25, 0xF7	; 247
    1bde:	9c 93       	st	X, r25
    1be0:	86 83       	std	Z+6, r24	; 0x06
    1be2:	2f bf       	out	0x3f, r18	; 63
    1be4:	f6 01       	movw	r30, r12
    1be6:	80 81       	ld	r24, Z
    1be8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bea:	51 f0       	breq	.+20     	; 0x1c00 <hd44780_pinIO::ioinit()+0x1d4>
    1bec:	f7 01       	movw	r30, r14
    1bee:	e0 56       	subi	r30, 0x60	; 96
    1bf0:	ff 4b       	sbci	r31, 0xBF	; 191
    1bf2:	e0 81       	ld	r30, Z
    1bf4:	20 e2       	ldi	r18, 0x20	; 32
    1bf6:	e2 9f       	mul	r30, r18
    1bf8:	f0 01       	movw	r30, r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	fc 5f       	subi	r31, 0xFC	; 252
    1bfe:	81 83       	std	Z+1, r24	; 0x01
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    1c00:	61 e0       	ldi	r22, 0x01	; 1
    1c02:	8c 2f       	mov	r24, r28
    1c04:	2f dc       	rcall	.-1954   	; 0x1464 <digitalWrite>
_delay_us():
    1c06:	88 e2       	ldi	r24, 0x28	; 40
    1c08:	8a 95       	dec	r24
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <hd44780_pinIO::ioinit()+0x1dc>
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    1c0c:	8c 2f       	mov	r24, r28
    1c0e:	0f dc       	rcall	.-2018   	; 0x142e <digitalRead>
    1c10:	d8 2f       	mov	r29, r24
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	8c 2f       	mov	r24, r28
    1c16:	26 dc       	rcall	.-1972   	; 0x1464 <digitalWrite>
_pinMode():
    1c18:	c9 32       	cpi	r28, 0x29	; 41
    1c1a:	08 f5       	brcc	.+66     	; 0x1c5e <hd44780_pinIO::ioinit()+0x232>
    1c1c:	d6 01       	movw	r26, r12
    1c1e:	8c 91       	ld	r24, X
    1c20:	8f 3f       	cpi	r24, 0xFF	; 255
    1c22:	e9 f0       	breq	.+58     	; 0x1c5e <hd44780_pinIO::ioinit()+0x232>
    1c24:	f7 01       	movw	r30, r14
    1c26:	e0 56       	subi	r30, 0x60	; 96
    1c28:	ff 4b       	sbci	r31, 0xBF	; 191
    1c2a:	e0 81       	ld	r30, Z
    1c2c:	b0 e2       	ldi	r27, 0x20	; 32
    1c2e:	eb 9f       	mul	r30, r27
    1c30:	f0 01       	movw	r30, r0
    1c32:	11 24       	eor	r1, r1
    1c34:	fc 5f       	subi	r31, 0xFC	; 252
    1c36:	d7 01       	movw	r26, r14
    1c38:	ac 5c       	subi	r26, 0xCC	; 204
    1c3a:	bf 4b       	sbci	r27, 0xBF	; 191
    1c3c:	ac 91       	ld	r26, X
    1c3e:	af 3f       	cpi	r26, 0xFF	; 255
    1c40:	b9 f1       	breq	.+110    	; 0x1cb0 <hd44780_pinIO::ioinit()+0x284>
    1c42:	9f 01       	movw	r18, r30
    1c44:	20 5f       	subi	r18, 0xF0	; 240
    1c46:	3f 4f       	sbci	r19, 0xFF	; 255
    1c48:	a2 0f       	add	r26, r18
    1c4a:	b3 2f       	mov	r27, r19
    1c4c:	b1 1d       	adc	r27, r1
    1c4e:	2f b7       	in	r18, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	82 83       	std	Z+2, r24	; 0x02
    1c54:	9c 91       	ld	r25, X
    1c56:	97 7f       	andi	r25, 0xF7	; 247
    1c58:	9c 93       	st	X, r25
    1c5a:	86 83       	std	Z+6, r24	; 0x06
    1c5c:	2f bf       	out	0x3f, r18	; 63
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    1c5e:	d1 30       	cpi	r29, 0x01	; 1
    1c60:	19 f0       	breq	.+6      	; 0x1c68 <hd44780_pinIO::ioinit()+0x23c>
ioinit():
    1c62:	8e ef       	ldi	r24, 0xFE	; 254
    1c64:	f8 01       	movw	r30, r16
    1c66:	80 a7       	std	Z+40, r24	; 0x28
    1c68:	d8 01       	movw	r26, r16
    1c6a:	97 96       	adiw	r26, 0x27	; 39
    1c6c:	8c 91       	ld	r24, X
_pinMode():
    1c6e:	89 32       	cpi	r24, 0x29	; 41
    1c70:	88 f4       	brcc	.+34     	; 0x1c94 <hd44780_pinIO::ioinit()+0x268>
check_valid_digital_pin():
    1c72:	90 e0       	ldi	r25, 0x00	; 0
_pinMode():
    1c74:	fc 01       	movw	r30, r24
    1c76:	e9 58       	subi	r30, 0x89	; 137
    1c78:	ff 4b       	sbci	r31, 0xBF	; 191
    1c7a:	20 81       	ld	r18, Z
    1c7c:	2f 3f       	cpi	r18, 0xFF	; 255
    1c7e:	51 f0       	breq	.+20     	; 0x1c94 <hd44780_pinIO::ioinit()+0x268>
    1c80:	80 56       	subi	r24, 0x60	; 96
    1c82:	9f 4b       	sbci	r25, 0xBF	; 191
    1c84:	dc 01       	movw	r26, r24
    1c86:	ec 91       	ld	r30, X
    1c88:	b0 e2       	ldi	r27, 0x20	; 32
    1c8a:	eb 9f       	mul	r30, r27
    1c8c:	f0 01       	movw	r30, r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	fc 5f       	subi	r31, 0xFC	; 252
    1c92:	21 83       	std	Z+1, r18	; 0x01
ioinit():
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	df 90       	pop	r13
    1ca6:	cf 90       	pop	r12
    1ca8:	08 95       	ret
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	a0 e0       	ldi	r26, 0x00	; 0
    1cae:	92 cf       	rjmp	.-220    	; 0x1bd4 <hd44780_pinIO::ioinit()+0x1a8>
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	a0 e0       	ldi	r26, 0x00	; 0
    1cb4:	cc cf       	rjmp	.-104    	; 0x1c4e <hd44780_pinIO::ioinit()+0x222>
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	8c 2f       	mov	r24, r28
    1cba:	d4 db       	rcall	.-2136   	; 0x1464 <digitalWrite>
_delay_us():
    1cbc:	f8 e2       	ldi	r31, 0x28	; 40
    1cbe:	fa 95       	dec	r31
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <hd44780_pinIO::ioinit()+0x292>
_ZN13hd44780_pinIO9blPinTestEi.isra.3():
    1cc2:	8c 2f       	mov	r24, r28
    1cc4:	b4 db       	rcall	.-2200   	; 0x142e <digitalRead>
    1cc6:	d8 2f       	mov	r29, r24
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	8c 2f       	mov	r24, r28
    1ccc:	cb db       	rcall	.-2154   	; 0x1464 <digitalWrite>
    1cce:	c7 cf       	rjmp	.-114    	; 0x1c5e <hd44780_pinIO::ioinit()+0x232>

00001cd0 <analogWrite>:
analogWrite():
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	89 32       	cpi	r24, 0x29	; 41
    1cd6:	08 f0       	brcs	.+2      	; 0x1cda <analogWrite+0xa>
    1cd8:	42 c0       	rjmp	.+132    	; 0x1d5e <analogWrite+0x8e>
check_valid_digital_pin():
    1cda:	48 2f       	mov	r20, r24
    1cdc:	50 e0       	ldi	r21, 0x00	; 0
analogWrite():
    1cde:	fa 01       	movw	r30, r20
    1ce0:	e9 58       	subi	r30, 0x89	; 137
    1ce2:	ff 4b       	sbci	r31, 0xBF	; 191
    1ce4:	90 81       	ld	r25, Z
    1ce6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ce8:	d1 f1       	breq	.+116    	; 0x1d5e <analogWrite+0x8e>
_pinMode():
    1cea:	fa 01       	movw	r30, r20
    1cec:	e0 56       	subi	r30, 0x60	; 96
    1cee:	ff 4b       	sbci	r31, 0xBF	; 191
    1cf0:	30 81       	ld	r19, Z
    1cf2:	20 e2       	ldi	r18, 0x20	; 32
    1cf4:	32 9f       	mul	r19, r18
    1cf6:	d0 01       	movw	r26, r0
    1cf8:	11 24       	eor	r1, r1
    1cfa:	bc 5f       	subi	r27, 0xFC	; 252
    1cfc:	11 96       	adiw	r26, 0x01	; 1
    1cfe:	9c 93       	st	X, r25
    1d00:	11 97       	sbiw	r26, 0x01	; 1
analogWrite():
    1d02:	fa 01       	movw	r30, r20
    1d04:	e5 5f       	subi	r30, 0xF5	; 245
    1d06:	ff 4b       	sbci	r31, 0xBF	; 191
    1d08:	e0 81       	ld	r30, Z
    1d0a:	e0 38       	cpi	r30, 0x80	; 128
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <analogWrite+0x40>
    1d0e:	d6 c0       	rjmp	.+428    	; 0x1ebc <analogWrite+0x1ec>
    1d10:	61 15       	cp	r22, r1
    1d12:	71 05       	cpc	r23, r1
    1d14:	21 f4       	brne	.+8      	; 0x1d1e <analogWrite+0x4e>
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	a3 cb       	rjmp	.-2234   	; 0x1464 <digitalWrite>
    1d1e:	6f 3f       	cpi	r22, 0xFF	; 255
    1d20:	71 05       	cpc	r23, r1
    1d22:	11 f4       	brne	.+4      	; 0x1d28 <analogWrite+0x58>
    1d24:	61 e0       	ldi	r22, 0x01	; 1
    1d26:	f8 cf       	rjmp	.-16     	; 0x1d18 <analogWrite+0x48>
    1d28:	90 34       	cpi	r25, 0x40	; 64
    1d2a:	08 f0       	brcs	.+2      	; 0x1d2e <analogWrite+0x5e>
    1d2c:	cb c0       	rjmp	.+406    	; 0x1ec4 <analogWrite+0x1f4>
    1d2e:	20 91 e6 05 	lds	r18, 0x05E6	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
    1d32:	f2 2f       	mov	r31, r18
    1d34:	f7 70       	andi	r31, 0x07	; 7
    1d36:	f3 13       	cpse	r31, r19
    1d38:	1a c0       	rjmp	.+52     	; 0x1d6e <analogWrite+0x9e>
    1d3a:	e0 e0       	ldi	r30, 0x00	; 0
    1d3c:	95 30       	cpi	r25, 0x05	; 5
    1d3e:	10 f0       	brcs	.+4      	; 0x1d44 <analogWrite+0x74>
    1d40:	99 0f       	add	r25, r25
    1d42:	e1 e0       	ldi	r30, 0x01	; 1
    1d44:	89 2f       	mov	r24, r25
    1d46:	84 74       	andi	r24, 0x44	; 68
    1d48:	69 f0       	breq	.+26     	; 0x1d64 <analogWrite+0x94>
    1d4a:	ec 5f       	subi	r30, 0xFC	; 252
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	e8 5d       	subi	r30, 0xD8	; 216
    1d50:	f5 4f       	sbci	r31, 0xF5	; 245
    1d52:	60 83       	st	Z, r22
    1d54:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    1d58:	98 2b       	or	r25, r24
    1d5a:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret
    1d64:	89 2f       	mov	r24, r25
    1d66:	82 72       	andi	r24, 0x22	; 34
    1d68:	89 f3       	breq	.-30     	; 0x1d4c <analogWrite+0x7c>
    1d6a:	ee 5f       	subi	r30, 0xFE	; 254
    1d6c:	ef cf       	rjmp	.-34     	; 0x1d4c <analogWrite+0x7c>
    1d6e:	28 71       	andi	r18, 0x18	; 24
    1d70:	36 30       	cpi	r19, 0x06	; 6
    1d72:	a9 f4       	brne	.+42     	; 0x1d9e <analogWrite+0xce>
    1d74:	28 31       	cpi	r18, 0x18	; 24
    1d76:	b9 f4       	brne	.+46     	; 0x1da6 <analogWrite+0xd6>
    1d78:	e0 e0       	ldi	r30, 0x00	; 0
    1d7a:	95 30       	cpi	r25, 0x05	; 5
    1d7c:	10 f0       	brcs	.+4      	; 0x1d82 <analogWrite+0xb2>
    1d7e:	99 0f       	add	r25, r25
    1d80:	e1 e0       	ldi	r30, 0x01	; 1
    1d82:	89 2f       	mov	r24, r25
    1d84:	84 74       	andi	r24, 0x44	; 68
    1d86:	d9 f0       	breq	.+54     	; 0x1dbe <analogWrite+0xee>
    1d88:	ec 5f       	subi	r30, 0xFC	; 252
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	e8 59       	subi	r30, 0x98	; 152
    1d8e:	f5 4f       	sbci	r31, 0xF5	; 245
    1d90:	60 83       	st	Z, r22
    1d92:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    1d96:	98 2b       	or	r25, r24
    1d98:	90 93 41 0a 	sts	0x0A41, r25	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    1d9c:	e0 cf       	rjmp	.-64     	; 0x1d5e <analogWrite+0x8e>
    1d9e:	31 30       	cpi	r19, 0x01	; 1
    1da0:	11 f4       	brne	.+4      	; 0x1da6 <analogWrite+0xd6>
    1da2:	22 23       	and	r18, r18
    1da4:	49 f3       	breq	.-46     	; 0x1d78 <analogWrite+0xa8>
    1da6:	e0 34       	cpi	r30, 0x40	; 64
    1da8:	39 f1       	breq	.+78     	; 0x1df8 <analogWrite+0x128>
    1daa:	70 f4       	brcc	.+28     	; 0x1dc8 <analogWrite+0xf8>
    1dac:	90 ee       	ldi	r25, 0xE0	; 224
    1dae:	9e 0f       	add	r25, r30
    1db0:	95 30       	cpi	r25, 0x05	; 5
    1db2:	90 f0       	brcs	.+36     	; 0x1dd8 <analogWrite+0x108>
    1db4:	60 38       	cpi	r22, 0x80	; 128
    1db6:	71 05       	cpc	r23, r1
    1db8:	0c f0       	brlt	.+2      	; 0x1dbc <analogWrite+0xec>
    1dba:	b4 cf       	rjmp	.-152    	; 0x1d24 <analogWrite+0x54>
    1dbc:	ac cf       	rjmp	.-168    	; 0x1d16 <analogWrite+0x46>
    1dbe:	89 2f       	mov	r24, r25
    1dc0:	82 72       	andi	r24, 0x22	; 34
    1dc2:	19 f3       	breq	.-58     	; 0x1d8a <analogWrite+0xba>
    1dc4:	ee 5f       	subi	r30, 0xFE	; 254
    1dc6:	e1 cf       	rjmp	.-62     	; 0x1d8a <analogWrite+0xba>
    1dc8:	e0 38       	cpi	r30, 0x80	; 128
    1dca:	a1 f7       	brne	.-24     	; 0x1db4 <analogWrite+0xe4>
    1dcc:	60 93 a3 06 	sts	0x06A3, r22	; 0x8006a3 <__TEXT_REGION_LENGTH__+0x7e06a3>
    1dd0:	81 e4       	ldi	r24, 0x41	; 65
    1dd2:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
    1dd6:	c3 cf       	rjmp	.-122    	; 0x1d5e <analogWrite+0x8e>
    1dd8:	90 e1       	ldi	r25, 0x10	; 16
    1dda:	e9 9f       	mul	r30, r25
    1ddc:	f0 01       	movw	r30, r0
    1dde:	11 24       	eor	r1, r1
    1de0:	f7 5f       	subi	r31, 0xF7	; 247
    1de2:	91 81       	ldd	r25, Z+1	; 0x01
    1de4:	97 70       	andi	r25, 0x07	; 7
    1de6:	97 30       	cpi	r25, 0x07	; 7
    1de8:	29 f7       	brne	.-54     	; 0x1db4 <analogWrite+0xe4>
    1dea:	84 85       	ldd	r24, Z+12	; 0x0c
    1dec:	84 87       	std	Z+12, r24	; 0x0c
    1dee:	65 87       	std	Z+13, r22	; 0x0d
    1df0:	81 81       	ldd	r24, Z+1	; 0x01
    1df2:	80 61       	ori	r24, 0x10	; 16
    1df4:	81 83       	std	Z+1, r24	; 0x01
    1df6:	b3 cf       	rjmp	.-154    	; 0x1d5e <analogWrite+0x8e>
    1df8:	61 15       	cp	r22, r1
    1dfa:	71 05       	cpc	r23, r1
    1dfc:	19 f0       	breq	.+6      	; 0x1e04 <analogWrite+0x134>
    1dfe:	6f 3f       	cpi	r22, 0xFF	; 255
    1e00:	71 05       	cpc	r23, r1
    1e02:	11 f0       	breq	.+4      	; 0x1e08 <analogWrite+0x138>
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	03 c0       	rjmp	.+6      	; 0x1e0e <analogWrite+0x13e>
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	2f ef       	ldi	r18, 0xFF	; 255
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	26 1b       	sub	r18, r22
    1e14:	37 0b       	sbc	r19, r23
    1e16:	60 91 ae 0b 	lds	r22, 0x0BAE	; 0x800bae <__TEXT_REGION_LENGTH__+0x7e0bae>
    1e1a:	60 91 af 0b 	lds	r22, 0x0BAF	; 0x800baf <__TEXT_REGION_LENGTH__+0x7e0baf>
    1e1e:	66 23       	and	r22, r22
    1e20:	21 f0       	breq	.+8      	; 0x1e2a <analogWrite+0x15a>
    1e22:	63 30       	cpi	r22, 0x03	; 3
    1e24:	b8 f5       	brcc	.+110    	; 0x1e94 <analogWrite+0x1c4>
    1e26:	22 0f       	add	r18, r18
    1e28:	33 1f       	adc	r19, r19
    1e2a:	10 97       	sbiw	r26, 0x00	; 0
    1e2c:	c1 f1       	breq	.+112    	; 0x1e9e <analogWrite+0x1ce>
    1e2e:	4c 5c       	subi	r20, 0xCC	; 204
    1e30:	5f 4b       	sbci	r21, 0xBF	; 191
    1e32:	ea 01       	movw	r28, r20
    1e34:	e8 81       	ld	r30, Y
    1e36:	ef 3f       	cpi	r30, 0xFF	; 255
    1e38:	91 f1       	breq	.+100    	; 0x1e9e <analogWrite+0x1ce>
    1e3a:	50 96       	adiw	r26, 0x10	; 16
    1e3c:	ea 0f       	add	r30, r26
    1e3e:	fb 2f       	mov	r31, r27
    1e40:	f1 1d       	adc	r31, r1
    1e42:	4f b7       	in	r20, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	21 50       	subi	r18, 0x01	; 1
    1e48:	31 09       	sbc	r19, r1
    1e4a:	59 2f       	mov	r21, r25
    1e4c:	5a 7a       	andi	r21, 0xAA	; 170
    1e4e:	51 f1       	breq	.+84     	; 0x1ea4 <analogWrite+0x1d4>
    1e50:	20 93 ac 0b 	sts	0x0BAC, r18	; 0x800bac <__TEXT_REGION_LENGTH__+0x7e0bac>
    1e54:	30 93 ad 0b 	sts	0x0BAD, r19	; 0x800bad <__TEXT_REGION_LENGTH__+0x7e0bad>
    1e58:	20 91 92 0b 	lds	r18, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    1e5c:	29 23       	and	r18, r25
    1e5e:	39 f5       	brne	.+78     	; 0x1eae <analogWrite+0x1de>
    1e60:	30 91 80 0b 	lds	r19, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    1e64:	23 2f       	mov	r18, r19
    1e66:	2e 7f       	andi	r18, 0xFE	; 254
    1e68:	20 93 80 0b 	sts	0x0B80, r18	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    1e6c:	20 91 8e 0b 	lds	r18, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
    1e70:	20 ff       	sbrs	r18, 0
    1e72:	fc cf       	rjmp	.-8      	; 0x1e6c <analogWrite+0x19c>
    1e74:	20 91 92 0b 	lds	r18, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    1e78:	92 2b       	or	r25, r18
    1e7a:	28 ed       	ldi	r18, 0xD8	; 216
    1e7c:	24 bf       	out	0x34, r18	; 52
    1e7e:	90 93 92 0b 	sts	0x0B92, r25	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    1e82:	30 93 80 0b 	sts	0x0B80, r19	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    1e86:	81 11       	cpse	r24, r1
    1e88:	16 c0       	rjmp	.+44     	; 0x1eb6 <analogWrite+0x1e6>
    1e8a:	80 81       	ld	r24, Z
    1e8c:	8f 77       	andi	r24, 0x7F	; 127
    1e8e:	80 83       	st	Z, r24
    1e90:	4f bf       	out	0x3f, r20	; 63
    1e92:	65 cf       	rjmp	.-310    	; 0x1d5e <analogWrite+0x8e>
    1e94:	22 0f       	add	r18, r18
    1e96:	33 1f       	adc	r19, r19
    1e98:	22 0f       	add	r18, r18
    1e9a:	33 1f       	adc	r19, r19
    1e9c:	c6 cf       	rjmp	.-116    	; 0x1e2a <analogWrite+0x15a>
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	e0 e0       	ldi	r30, 0x00	; 0
    1ea2:	cf cf       	rjmp	.-98     	; 0x1e42 <analogWrite+0x172>
    1ea4:	20 93 a8 0b 	sts	0x0BA8, r18	; 0x800ba8 <__TEXT_REGION_LENGTH__+0x7e0ba8>
    1ea8:	30 93 a9 0b 	sts	0x0BA9, r19	; 0x800ba9 <__TEXT_REGION_LENGTH__+0x7e0ba9>
    1eac:	d5 cf       	rjmp	.-86     	; 0x1e58 <analogWrite+0x188>
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	90 93 84 0b 	sts	0x0B84, r25	; 0x800b84 <__TEXT_REGION_LENGTH__+0x7e0b84>
    1eb4:	e8 cf       	rjmp	.-48     	; 0x1e86 <analogWrite+0x1b6>
    1eb6:	80 81       	ld	r24, Z
    1eb8:	80 68       	ori	r24, 0x80	; 128
    1eba:	e9 cf       	rjmp	.-46     	; 0x1e8e <analogWrite+0x1be>
    1ebc:	90 34       	cpi	r25, 0x40	; 64
    1ebe:	08 f4       	brcc	.+2      	; 0x1ec2 <analogWrite+0x1f2>
    1ec0:	36 cf       	rjmp	.-404    	; 0x1d2e <analogWrite+0x5e>
    1ec2:	84 cf       	rjmp	.-248    	; 0x1dcc <analogWrite+0xfc>
    1ec4:	e0 32       	cpi	r30, 0x20	; 32
    1ec6:	08 f4       	brcc	.+2      	; 0x1eca <analogWrite+0x1fa>
    1ec8:	75 cf       	rjmp	.-278    	; 0x1db4 <analogWrite+0xe4>
    1eca:	e5 32       	cpi	r30, 0x25	; 37
    1ecc:	08 f4       	brcc	.+2      	; 0x1ed0 <analogWrite+0x200>
    1ece:	84 cf       	rjmp	.-248    	; 0x1dd8 <analogWrite+0x108>
    1ed0:	e0 34       	cpi	r30, 0x40	; 64
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <analogWrite+0x206>
    1ed4:	97 cf       	rjmp	.-210    	; 0x1e04 <analogWrite+0x134>
    1ed6:	6e cf       	rjmp	.-292    	; 0x1db4 <analogWrite+0xe4>

00001ed8 <hd44780_pinIO::iosetBacklight(unsigned char)>:
iosetBacklight():
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	fc 01       	movw	r30, r24
    1ede:	87 a1       	ldd	r24, Z+39	; 0x27
    1ee0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <hd44780_pinIO::iosetBacklight(unsigned char)+0xe>
    1ee4:	65 c0       	rjmp	.+202    	; 0x1fb0 <hd44780_pinIO::iosetBacklight(unsigned char)+0xd8>
    1ee6:	90 a5       	ldd	r25, Z+40	; 0x28
    1ee8:	9e 3f       	cpi	r25, 0xFE	; 254
    1eea:	09 f0       	breq	.+2      	; 0x1eee <hd44780_pinIO::iosetBacklight(unsigned char)+0x16>
    1eec:	42 c0       	rjmp	.+132    	; 0x1f72 <hd44780_pinIO::iosetBacklight(unsigned char)+0x9a>
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	66 23       	and	r22, r22
    1ef4:	59 f1       	breq	.+86     	; 0x1f4c <hd44780_pinIO::iosetBacklight(unsigned char)+0x74>
_pinMode():
    1ef6:	89 32       	cpi	r24, 0x29	; 41
    1ef8:	18 f5       	brcc	.+70     	; 0x1f40 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
    1efa:	f9 01       	movw	r30, r18
    1efc:	e9 58       	subi	r30, 0x89	; 137
    1efe:	ff 4b       	sbci	r31, 0xBF	; 191
    1f00:	80 81       	ld	r24, Z
    1f02:	8f 3f       	cpi	r24, 0xFF	; 255
    1f04:	e9 f0       	breq	.+58     	; 0x1f40 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
    1f06:	f9 01       	movw	r30, r18
    1f08:	e0 56       	subi	r30, 0x60	; 96
    1f0a:	ff 4b       	sbci	r31, 0xBF	; 191
    1f0c:	e0 81       	ld	r30, Z
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	e4 9f       	mul	r30, r20
    1f12:	f0 01       	movw	r30, r0
    1f14:	11 24       	eor	r1, r1
    1f16:	fc 5f       	subi	r31, 0xFC	; 252
    1f18:	2c 5c       	subi	r18, 0xCC	; 204
    1f1a:	3f 4b       	sbci	r19, 0xBF	; 191
    1f1c:	e9 01       	movw	r28, r18
    1f1e:	a8 81       	ld	r26, Y
    1f20:	af 3f       	cpi	r26, 0xFF	; 255
    1f22:	89 f0       	breq	.+34     	; 0x1f46 <hd44780_pinIO::iosetBacklight(unsigned char)+0x6e>
    1f24:	9f 01       	movw	r18, r30
    1f26:	20 5f       	subi	r18, 0xF0	; 240
    1f28:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2a:	a2 0f       	add	r26, r18
    1f2c:	b3 2f       	mov	r27, r19
    1f2e:	b1 1d       	adc	r27, r1
    1f30:	2f b7       	in	r18, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	82 83       	std	Z+2, r24	; 0x02
    1f36:	9c 91       	ld	r25, X
    1f38:	97 7f       	andi	r25, 0xF7	; 247
    1f3a:	9c 93       	st	X, r25
    1f3c:	86 83       	std	Z+6, r24	; 0x06
    1f3e:	2f bf       	out	0x3f, r18	; 63
iosetBacklight():
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	37 c0       	rjmp	.+110    	; 0x1fb4 <hd44780_pinIO::iosetBacklight(unsigned char)+0xdc>
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	a0 e0       	ldi	r26, 0x00	; 0
    1f4a:	f2 cf       	rjmp	.-28     	; 0x1f30 <hd44780_pinIO::iosetBacklight(unsigned char)+0x58>
_pinMode():
    1f4c:	89 32       	cpi	r24, 0x29	; 41
    1f4e:	c0 f7       	brcc	.-16     	; 0x1f40 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
    1f50:	f9 01       	movw	r30, r18
    1f52:	e9 58       	subi	r30, 0x89	; 137
    1f54:	ff 4b       	sbci	r31, 0xBF	; 191
    1f56:	80 81       	ld	r24, Z
    1f58:	8f 3f       	cpi	r24, 0xFF	; 255
    1f5a:	91 f3       	breq	.-28     	; 0x1f40 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
    1f5c:	20 56       	subi	r18, 0x60	; 96
    1f5e:	3f 4b       	sbci	r19, 0xBF	; 191
    1f60:	d9 01       	movw	r26, r18
    1f62:	ec 91       	ld	r30, X
    1f64:	b0 e2       	ldi	r27, 0x20	; 32
    1f66:	eb 9f       	mul	r30, r27
    1f68:	f0 01       	movw	r30, r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	fc 5f       	subi	r31, 0xFC	; 252
    1f6e:	81 83       	std	Z+1, r24	; 0x01
    1f70:	e7 cf       	rjmp	.-50     	; 0x1f40 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
iosetBacklight():
    1f72:	2a ed       	ldi	r18, 0xDA	; 218
    1f74:	28 0f       	add	r18, r24
    1f76:	22 30       	cpi	r18, 0x02	; 2
    1f78:	20 f0       	brcs	.+8      	; 0x1f82 <hd44780_pinIO::iosetBacklight(unsigned char)+0xaa>
    1f7a:	2c ef       	ldi	r18, 0xFC	; 252
    1f7c:	28 0f       	add	r18, r24
    1f7e:	20 31       	cpi	r18, 0x10	; 16
    1f80:	60 f4       	brcc	.+24     	; 0x1f9a <hd44780_pinIO::iosetBacklight(unsigned char)+0xc2>
    1f82:	70 e0       	ldi	r23, 0x00	; 0
    1f84:	91 30       	cpi	r25, 0x01	; 1
    1f86:	11 f4       	brne	.+4      	; 0x1f8c <hd44780_pinIO::iosetBacklight(unsigned char)+0xb4>
    1f88:	a3 de       	rcall	.-698    	; 0x1cd0 <analogWrite>
    1f8a:	da cf       	rjmp	.-76     	; 0x1f40 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
    1f8c:	2f ef       	ldi	r18, 0xFF	; 255
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	e9 01       	movw	r28, r18
    1f92:	c6 1b       	sub	r28, r22
    1f94:	d7 0b       	sbc	r29, r23
    1f96:	be 01       	movw	r22, r28
    1f98:	f7 cf       	rjmp	.-18     	; 0x1f88 <hd44780_pinIO::iosetBacklight(unsigned char)+0xb0>
    1f9a:	66 23       	and	r22, r22
    1f9c:	29 f0       	breq	.+10     	; 0x1fa8 <hd44780_pinIO::iosetBacklight(unsigned char)+0xd0>
    1f9e:	91 30       	cpi	r25, 0x01	; 1
    1fa0:	29 f4       	brne	.+10     	; 0x1fac <hd44780_pinIO::iosetBacklight(unsigned char)+0xd4>
    1fa2:	61 e0       	ldi	r22, 0x01	; 1
    1fa4:	5f da       	rcall	.-2882   	; 0x1464 <digitalWrite>
    1fa6:	cc cf       	rjmp	.-104    	; 0x1f40 <hd44780_pinIO::iosetBacklight(unsigned char)+0x68>
    1fa8:	99 23       	and	r25, r25
    1faa:	d9 f3       	breq	.-10     	; 0x1fa2 <hd44780_pinIO::iosetBacklight(unsigned char)+0xca>
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	fa cf       	rjmp	.-12     	; 0x1fa4 <hd44780_pinIO::iosetBacklight(unsigned char)+0xcc>
    1fb0:	8d ef       	ldi	r24, 0xFD	; 253
    1fb2:	9f ef       	ldi	r25, 0xFF	; 255
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	08 95       	ret

00001fba <random(long, long)>:
random():
    1fba:	8f 92       	push	r8
    1fbc:	9f 92       	push	r9
    1fbe:	af 92       	push	r10
    1fc0:	bf 92       	push	r11
    1fc2:	cf 92       	push	r12
    1fc4:	df 92       	push	r13
    1fc6:	ef 92       	push	r14
    1fc8:	ff 92       	push	r15
    1fca:	4b 01       	movw	r8, r22
    1fcc:	5c 01       	movw	r10, r24
    1fce:	82 16       	cp	r8, r18
    1fd0:	93 06       	cpc	r9, r19
    1fd2:	a4 06       	cpc	r10, r20
    1fd4:	b5 06       	cpc	r11, r21
    1fd6:	9c f4       	brge	.+38     	; 0x1ffe <random(long, long)+0x44>
    1fd8:	69 01       	movw	r12, r18
    1fda:	7a 01       	movw	r14, r20
    1fdc:	c8 18       	sub	r12, r8
    1fde:	d9 08       	sbc	r13, r9
    1fe0:	ea 08       	sbc	r14, r10
    1fe2:	fb 08       	sbc	r15, r11
    1fe4:	41 f0       	breq	.+16     	; 0x1ff6 <random(long, long)+0x3c>
    1fe6:	0e 94 c0 21 	call	0x4380	; 0x4380 <random>
    1fea:	a7 01       	movw	r20, r14
    1fec:	96 01       	movw	r18, r12
    1fee:	0e 94 15 22 	call	0x442a	; 0x442a <__divmodsi4>
    1ff2:	6b 01       	movw	r12, r22
    1ff4:	7c 01       	movw	r14, r24
    1ff6:	8c 0c       	add	r8, r12
    1ff8:	9d 1c       	adc	r9, r13
    1ffa:	ae 1c       	adc	r10, r14
    1ffc:	bf 1c       	adc	r11, r15
    1ffe:	c5 01       	movw	r24, r10
    2000:	b4 01       	movw	r22, r8
    2002:	ff 90       	pop	r15
    2004:	ef 90       	pop	r14
    2006:	df 90       	pop	r13
    2008:	cf 90       	pop	r12
    200a:	bf 90       	pop	r11
    200c:	af 90       	pop	r10
    200e:	9f 90       	pop	r9
    2010:	8f 90       	pop	r8
    2012:	08 95       	ret

00002014 <initColorsDrift2()>:
initColorsDrift2():
    2014:	cf 92       	push	r12
    2016:	df 92       	push	r13
    2018:	ef 92       	push	r14
    201a:	ff 92       	push	r15
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	aa d8       	rcall	.-3756   	; 0x117a <getPalleteNumber()>
    2026:	e8 2f       	mov	r30, r24
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	e7 5b       	subi	r30, 0xB7	; 183
    202c:	f6 4f       	sbci	r31, 0xF6	; 246
    202e:	c4 91       	lpm	r28, Z
    2030:	c5 d8       	rcall	.-3702   	; 0x11bc <getDwellFrames()>
    2032:	8c 01       	movw	r16, r24
    2034:	ab d8       	rcall	.-3754   	; 0x118c <getTransitionFrames()>
    2036:	80 0f       	add	r24, r16
    2038:	91 1f       	adc	r25, r17
    203a:	c8 9f       	mul	r28, r24
    203c:	60 01       	movw	r12, r0
    203e:	c9 9f       	mul	r28, r25
    2040:	d0 0c       	add	r13, r0
    2042:	11 24       	eor	r1, r1
    2044:	10 e0       	ldi	r17, 0x00	; 0
    2046:	00 e0       	ldi	r16, 0x00	; 0
    2048:	d0 e0       	ldi	r29, 0x00	; 0
    204a:	c0 e0       	ldi	r28, 0x00	; 0
    204c:	0d 2c       	mov	r0, r13
    204e:	00 0c       	add	r0, r0
    2050:	ee 08       	sbc	r14, r14
    2052:	ff 08       	sbc	r15, r15
    2054:	a7 01       	movw	r20, r14
    2056:	96 01       	movw	r18, r12
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	cb 01       	movw	r24, r22
    205e:	ad df       	rcall	.-166    	; 0x1fba <random(long, long)>
    2060:	cb 01       	movw	r24, r22
    2062:	f8 01       	movw	r30, r16
    2064:	f5 95       	asr	r31
    2066:	e7 95       	ror	r30
    2068:	e7 56       	subi	r30, 0x67	; 103
    206a:	fe 4b       	sbci	r31, 0xBE	; 190
    206c:	60 83       	st	Z, r22
    206e:	9e 01       	movw	r18, r28
    2070:	35 95       	asr	r19
    2072:	27 95       	ror	r18
    2074:	f9 01       	movw	r30, r18
    2076:	ee 0f       	add	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	e2 0f       	add	r30, r18
    207c:	f3 1f       	adc	r31, r19
    207e:	e5 56       	subi	r30, 0x65	; 101
    2080:	fe 4b       	sbci	r31, 0xBE	; 190
    2082:	c0 ff       	sbrs	r28, 0
    2084:	19 c0       	rjmp	.+50     	; 0x20b8 <initColorsDrift2()+0xa4>
    2086:	24 e0       	ldi	r18, 0x04	; 4
    2088:	96 95       	lsr	r25
    208a:	87 95       	ror	r24
    208c:	2a 95       	dec	r18
    208e:	e1 f7       	brne	.-8      	; 0x2088 <initColorsDrift2()+0x74>
    2090:	80 7f       	andi	r24, 0xF0	; 240
    2092:	90 81       	ld	r25, Z
    2094:	89 23       	and	r24, r25
    2096:	80 83       	st	Z, r24
    2098:	21 96       	adiw	r28, 0x01	; 1
    209a:	0d 5f       	subi	r16, 0xFD	; 253
    209c:	1f 4f       	sbci	r17, 0xFF	; 255
    209e:	c4 3f       	cpi	r28, 0xF4	; 244
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	d8 07       	cpc	r29, r24
    20a4:	b9 f6       	brne	.-82     	; 0x2054 <initColorsDrift2()+0x40>
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	ff 90       	pop	r15
    20b0:	ef 90       	pop	r14
    20b2:	df 90       	pop	r13
    20b4:	cf 90       	pop	r12
    20b6:	08 95       	ret
    20b8:	70 83       	st	Z, r23
    20ba:	ee cf       	rjmp	.-36     	; 0x2098 <initColorsDrift2()+0x84>

000020bc <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc.part.2():
    20bc:	fb 01       	movw	r30, r22
    20be:	01 90       	ld	r0, Z+
    20c0:	00 20       	and	r0, r0
    20c2:	e9 f7       	brne	.-6      	; 0x20be <Print::write(char const*) [clone .part.2]+0x2>
    20c4:	31 97       	sbiw	r30, 0x01	; 1
    20c6:	af 01       	movw	r20, r30
    20c8:	46 1b       	sub	r20, r22
    20ca:	57 0b       	sbc	r21, r23
    20cc:	dc 01       	movw	r26, r24
    20ce:	ed 91       	ld	r30, X+
    20d0:	fc 91       	ld	r31, X
    20d2:	02 80       	ldd	r0, Z+2	; 0x02
    20d4:	f3 81       	ldd	r31, Z+3	; 0x03
    20d6:	e0 2d       	mov	r30, r0
    20d8:	09 94       	ijmp

000020da <Print::printNumber(unsigned long, unsigned char)>:
printNumber():
    20da:	8f 92       	push	r8
    20dc:	9f 92       	push	r9
    20de:	af 92       	push	r10
    20e0:	bf 92       	push	r11
    20e2:	ef 92       	push	r14
    20e4:	ff 92       	push	r15
    20e6:	0f 93       	push	r16
    20e8:	1f 93       	push	r17
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	a1 97       	sbiw	r28, 0x21	; 33
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	7c 01       	movw	r14, r24
    20fa:	fa 01       	movw	r30, r20
    20fc:	cb 01       	movw	r24, r22
    20fe:	19 a2       	std	Y+33, r1	; 0x21
    2100:	22 30       	cpi	r18, 0x02	; 2
    2102:	08 f4       	brcc	.+2      	; 0x2106 <Print::printNumber(unsigned long, unsigned char)+0x2c>
    2104:	2a e0       	ldi	r18, 0x0A	; 10
    2106:	8e 01       	movw	r16, r28
    2108:	0f 5d       	subi	r16, 0xDF	; 223
    210a:	1f 4f       	sbci	r17, 0xFF	; 255
    210c:	82 2e       	mov	r8, r18
    210e:	91 2c       	mov	r9, r1
    2110:	b1 2c       	mov	r11, r1
    2112:	a1 2c       	mov	r10, r1
    2114:	bf 01       	movw	r22, r30
    2116:	a5 01       	movw	r20, r10
    2118:	94 01       	movw	r18, r8
    211a:	0e 94 41 22 	call	0x4482	; 0x4482 <__udivmodsi4>
    211e:	f9 01       	movw	r30, r18
    2120:	ca 01       	movw	r24, r20
    2122:	6a 30       	cpi	r22, 0x0A	; 10
    2124:	ec f4       	brge	.+58     	; 0x2160 <Print::printNumber(unsigned long, unsigned char)+0x86>
    2126:	60 5d       	subi	r22, 0xD0	; 208
    2128:	d8 01       	movw	r26, r16
    212a:	6e 93       	st	-X, r22
    212c:	8d 01       	movw	r16, r26
    212e:	23 2b       	or	r18, r19
    2130:	24 2b       	or	r18, r20
    2132:	25 2b       	or	r18, r21
    2134:	79 f7       	brne	.-34     	; 0x2114 <Print::printNumber(unsigned long, unsigned char)+0x3a>
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	80 e0       	ldi	r24, 0x00	; 0
write():
    213a:	10 97       	sbiw	r26, 0x00	; 0
    213c:	19 f0       	breq	.+6      	; 0x2144 <Print::printNumber(unsigned long, unsigned char)+0x6a>
    213e:	bd 01       	movw	r22, r26
    2140:	c7 01       	movw	r24, r14
    2142:	bc df       	rcall	.-136    	; 0x20bc <Print::write(char const*) [clone .part.2]>
printNumber():
    2144:	a1 96       	adiw	r28, 0x21	; 33
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	1f 91       	pop	r17
    2150:	0f 91       	pop	r16
    2152:	ff 90       	pop	r15
    2154:	ef 90       	pop	r14
    2156:	bf 90       	pop	r11
    2158:	af 90       	pop	r10
    215a:	9f 90       	pop	r9
    215c:	8f 90       	pop	r8
    215e:	08 95       	ret
    2160:	69 5c       	subi	r22, 0xC9	; 201
    2162:	e2 cf       	rjmp	.-60     	; 0x2128 <Print::printNumber(unsigned long, unsigned char)+0x4e>

00002164 <Print::println(char const*) [clone .constprop.25]>:
println():
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
write():
    2168:	bc 01       	movw	r22, r24
    216a:	8f e8       	ldi	r24, 0x8F	; 143
    216c:	97 e4       	ldi	r25, 0x47	; 71
    216e:	a6 df       	rcall	.-180    	; 0x20bc <Print::write(char const*) [clone .part.2]>
    2170:	ec 01       	movw	r28, r24
    2172:	65 ef       	ldi	r22, 0xF5	; 245
    2174:	70 e4       	ldi	r23, 0x40	; 64
    2176:	8f e8       	ldi	r24, 0x8F	; 143
    2178:	97 e4       	ldi	r25, 0x47	; 71
    217a:	a0 df       	rcall	.-192    	; 0x20bc <Print::write(char const*) [clone .part.2]>
println():
    217c:	8c 0f       	add	r24, r28
    217e:	9d 1f       	adc	r25, r29
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	08 95       	ret

00002186 <Print::printFloat(double, unsigned char) [clone .constprop.8]>:
printFloat():
    2186:	4f 92       	push	r4
    2188:	5f 92       	push	r5
    218a:	6f 92       	push	r6
    218c:	7f 92       	push	r7
    218e:	8f 92       	push	r8
    2190:	9f 92       	push	r9
    2192:	af 92       	push	r10
    2194:	bf 92       	push	r11
    2196:	cf 92       	push	r12
    2198:	df 92       	push	r13
    219a:	ef 92       	push	r14
    219c:	ff 92       	push	r15
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	6b 01       	movw	r12, r22
    21a6:	7c 01       	movw	r14, r24
    21a8:	74 2e       	mov	r7, r20
    21aa:	ac 01       	movw	r20, r24
    21ac:	9b 01       	movw	r18, r22
    21ae:	0e 94 88 24 	call	0x4910	; 0x4910 <__unordsf2>
write():
    21b2:	68 ef       	ldi	r22, 0xF8	; 248
    21b4:	70 e4       	ldi	r23, 0x40	; 64
printFloat():
    21b6:	81 11       	cpse	r24, r1
    21b8:	26 c0       	rjmp	.+76     	; 0x2206 <Print::printFloat(double, unsigned char) [clone .constprop.8]+0x80>
    21ba:	46 01       	movw	r8, r12
    21bc:	57 01       	movw	r10, r14
    21be:	e8 94       	clt
    21c0:	b7 f8       	bld	r11, 7
    21c2:	2f ef       	ldi	r18, 0xFF	; 255
    21c4:	3f ef       	ldi	r19, 0xFF	; 255
    21c6:	4f e7       	ldi	r20, 0x7F	; 127
    21c8:	5f e7       	ldi	r21, 0x7F	; 127
    21ca:	c5 01       	movw	r24, r10
    21cc:	b4 01       	movw	r22, r8
    21ce:	0e 94 88 24 	call	0x4910	; 0x4910 <__unordsf2>
    21d2:	81 11       	cpse	r24, r1
    21d4:	0c c0       	rjmp	.+24     	; 0x21ee <Print::printFloat(double, unsigned char) [clone .constprop.8]+0x68>
    21d6:	2f ef       	ldi	r18, 0xFF	; 255
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	5f e7       	ldi	r21, 0x7F	; 127
    21de:	c5 01       	movw	r24, r10
    21e0:	b4 01       	movw	r22, r8
    21e2:	0e 94 d7 22 	call	0x45ae	; 0x45ae <__cmpsf2>
write():
    21e6:	6c ef       	ldi	r22, 0xFC	; 252
    21e8:	70 e4       	ldi	r23, 0x40	; 64
printFloat():
    21ea:	18 16       	cp	r1, r24
    21ec:	64 f0       	brlt	.+24     	; 0x2206 <Print::printFloat(double, unsigned char) [clone .constprop.8]+0x80>
    21ee:	2f ef       	ldi	r18, 0xFF	; 255
    21f0:	3f ef       	ldi	r19, 0xFF	; 255
    21f2:	4f e7       	ldi	r20, 0x7F	; 127
    21f4:	5f e4       	ldi	r21, 0x4F	; 79
    21f6:	c7 01       	movw	r24, r14
    21f8:	b6 01       	movw	r22, r12
    21fa:	0e 94 21 24 	call	0x4842	; 0x4842 <__gesf2>
    21fe:	18 16       	cp	r1, r24
    2200:	a4 f4       	brge	.+40     	; 0x222a <Print::printFloat(double, unsigned char) [clone .constprop.8]+0xa4>
write():
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	71 e4       	ldi	r23, 0x41	; 65
    2206:	8f e8       	ldi	r24, 0x8F	; 143
    2208:	97 e4       	ldi	r25, 0x47	; 71
printFloat():
    220a:	cf 91       	pop	r28
    220c:	1f 91       	pop	r17
    220e:	0f 91       	pop	r16
    2210:	ff 90       	pop	r15
    2212:	ef 90       	pop	r14
    2214:	df 90       	pop	r13
    2216:	cf 90       	pop	r12
    2218:	bf 90       	pop	r11
    221a:	af 90       	pop	r10
    221c:	9f 90       	pop	r9
    221e:	8f 90       	pop	r8
    2220:	7f 90       	pop	r7
    2222:	6f 90       	pop	r6
    2224:	5f 90       	pop	r5
    2226:	4f 90       	pop	r4
write():
    2228:	49 cf       	rjmp	.-366    	; 0x20bc <Print::write(char const*) [clone .part.2]>
printFloat():
    222a:	2f ef       	ldi	r18, 0xFF	; 255
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	5f ec       	ldi	r21, 0xCF	; 207
    2232:	c7 01       	movw	r24, r14
    2234:	b6 01       	movw	r22, r12
    2236:	0e 94 d7 22 	call	0x45ae	; 0x45ae <__cmpsf2>
    223a:	87 fd       	sbrc	r24, 7
    223c:	e2 cf       	rjmp	.-60     	; 0x2202 <Print::printFloat(double, unsigned char) [clone .constprop.8]+0x7c>
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	a9 01       	movw	r20, r18
    2244:	c7 01       	movw	r24, r14
    2246:	b6 01       	movw	r22, r12
    2248:	0e 94 d7 22 	call	0x45ae	; 0x45ae <__cmpsf2>
    224c:	10 e0       	ldi	r17, 0x00	; 0
    224e:	00 e0       	ldi	r16, 0x00	; 0
    2250:	87 ff       	sbrs	r24, 7
    2252:	0a c0       	rjmp	.+20     	; 0x2268 <Print::printFloat(double, unsigned char) [clone .constprop.8]+0xe2>
    2254:	6d e2       	ldi	r22, 0x2D	; 45
    2256:	8f e8       	ldi	r24, 0x8F	; 143
    2258:	97 e4       	ldi	r25, 0x47	; 71
    225a:	0e 94 07 05 	call	0xa0e	; 0xa0e <Print::print(char)>
    225e:	8c 01       	movw	r16, r24
    2260:	f7 fa       	bst	r15, 7
    2262:	f0 94       	com	r15
    2264:	f7 f8       	bld	r15, 7
    2266:	f0 94       	com	r15
    2268:	c0 e0       	ldi	r28, 0x00	; 0
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	70 e0       	ldi	r23, 0x00	; 0
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	9f e3       	ldi	r25, 0x3F	; 63
    2272:	7c 16       	cp	r7, r28
    2274:	41 f0       	breq	.+16     	; 0x2286 <Print::printFloat(double, unsigned char) [clone .constprop.8]+0x100>
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e2       	ldi	r20, 0x20	; 32
    227c:	51 e4       	ldi	r21, 0x41	; 65
    227e:	0e 94 db 22 	call	0x45b6	; 0x45b6 <__divsf3>
    2282:	cf 5f       	subi	r28, 0xFF	; 255
    2284:	f6 cf       	rjmp	.-20     	; 0x2272 <Print::printFloat(double, unsigned char) [clone .constprop.8]+0xec>
    2286:	a7 01       	movw	r20, r14
    2288:	96 01       	movw	r18, r12
    228a:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__addsf3>
    228e:	2b 01       	movw	r4, r22
    2290:	3c 01       	movw	r6, r24
    2292:	0e 94 43 23 	call	0x4686	; 0x4686 <__fixunssfsi>
    2296:	4b 01       	movw	r8, r22
    2298:	5c 01       	movw	r10, r24
print():
    229a:	2a e0       	ldi	r18, 0x0A	; 10
    229c:	bc 01       	movw	r22, r24
    229e:	a4 01       	movw	r20, r8
    22a0:	8f e8       	ldi	r24, 0x8F	; 143
    22a2:	97 e4       	ldi	r25, 0x47	; 71
    22a4:	1a df       	rcall	.-460    	; 0x20da <Print::printNumber(unsigned long, unsigned char)>
printFloat():
    22a6:	7c 01       	movw	r14, r24
    22a8:	e0 0e       	add	r14, r16
    22aa:	f1 1e       	adc	r15, r17
    22ac:	cc 23       	and	r28, r28
    22ae:	c9 f1       	breq	.+114    	; 0x2322 <Print::printFloat(double, unsigned char) [clone .constprop.8]+0x19c>
    22b0:	c5 01       	movw	r24, r10
    22b2:	b4 01       	movw	r22, r8
    22b4:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatunsisf>
    22b8:	9b 01       	movw	r18, r22
    22ba:	ac 01       	movw	r20, r24
    22bc:	c3 01       	movw	r24, r6
    22be:	b2 01       	movw	r22, r4
    22c0:	0e 94 72 22 	call	0x44e4	; 0x44e4 <__subsf3>
    22c4:	4b 01       	movw	r8, r22
    22c6:	5c 01       	movw	r10, r24
write():
    22c8:	64 e0       	ldi	r22, 0x04	; 4
    22ca:	71 e4       	ldi	r23, 0x41	; 65
    22cc:	8f e8       	ldi	r24, 0x8F	; 143
    22ce:	97 e4       	ldi	r25, 0x47	; 71
    22d0:	f5 de       	rcall	.-534    	; 0x20bc <Print::write(char const*) [clone .part.2]>
printFloat():
    22d2:	e8 0e       	add	r14, r24
    22d4:	f9 1e       	adc	r15, r25
    22d6:	c1 50       	subi	r28, 0x01	; 1
    22d8:	20 f1       	brcs	.+72     	; 0x2322 <Print::printFloat(double, unsigned char) [clone .constprop.8]+0x19c>
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e2       	ldi	r20, 0x20	; 32
    22e0:	51 e4       	ldi	r21, 0x41	; 65
    22e2:	c5 01       	movw	r24, r10
    22e4:	b4 01       	movw	r22, r8
    22e6:	0e 94 25 24 	call	0x484a	; 0x484a <__mulsf3>
    22ea:	2b 01       	movw	r4, r22
    22ec:	3c 01       	movw	r6, r24
    22ee:	0e 94 43 23 	call	0x4686	; 0x4686 <__fixunssfsi>
print():
    22f2:	4b 01       	movw	r8, r22
    22f4:	b1 2c       	mov	r11, r1
    22f6:	a1 2c       	mov	r10, r1
    22f8:	2a e0       	ldi	r18, 0x0A	; 10
    22fa:	b5 01       	movw	r22, r10
    22fc:	a4 01       	movw	r20, r8
    22fe:	8f e8       	ldi	r24, 0x8F	; 143
    2300:	97 e4       	ldi	r25, 0x47	; 71
    2302:	eb de       	rcall	.-554    	; 0x20da <Print::printNumber(unsigned long, unsigned char)>
printFloat():
    2304:	e8 0e       	add	r14, r24
    2306:	f9 1e       	adc	r15, r25
    2308:	c5 01       	movw	r24, r10
    230a:	b4 01       	movw	r22, r8
    230c:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatunsisf>
    2310:	9b 01       	movw	r18, r22
    2312:	ac 01       	movw	r20, r24
    2314:	c3 01       	movw	r24, r6
    2316:	b2 01       	movw	r22, r4
    2318:	0e 94 72 22 	call	0x44e4	; 0x44e4 <__subsf3>
    231c:	4b 01       	movw	r8, r22
    231e:	5c 01       	movw	r10, r24
    2320:	da cf       	rjmp	.-76     	; 0x22d6 <Print::printFloat(double, unsigned char) [clone .constprop.8]+0x150>
    2322:	c7 01       	movw	r24, r14
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	ff 90       	pop	r15
    232c:	ef 90       	pop	r14
    232e:	df 90       	pop	r13
    2330:	cf 90       	pop	r12
    2332:	bf 90       	pop	r11
    2334:	af 90       	pop	r10
    2336:	9f 90       	pop	r9
    2338:	8f 90       	pop	r8
    233a:	7f 90       	pop	r7
    233c:	6f 90       	pop	r6
    233e:	5f 90       	pop	r5
    2340:	4f 90       	pop	r4
    2342:	08 95       	ret

00002344 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>:
getModeColors():
    2344:	2f 92       	push	r2
    2346:	3f 92       	push	r3
    2348:	4f 92       	push	r4
    234a:	5f 92       	push	r5
    234c:	6f 92       	push	r6
    234e:	7f 92       	push	r7
    2350:	8f 92       	push	r8
    2352:	9f 92       	push	r9
    2354:	af 92       	push	r10
    2356:	bf 92       	push	r11
    2358:	cf 92       	push	r12
    235a:	df 92       	push	r13
    235c:	ef 92       	push	r14
    235e:	ff 92       	push	r15
    2360:	0f 93       	push	r16
    2362:	1f 93       	push	r17
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	2a 97       	sbiw	r28, 0x0a	; 10
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	1c 01       	movw	r2, r24
    2374:	6d 83       	std	Y+5, r22	; 0x05
    2376:	7e 83       	std	Y+6, r23	; 0x06
    2378:	4f 83       	std	Y+7, r20	; 0x07
    237a:	58 87       	std	Y+8, r21	; 0x08
    237c:	28 01       	movw	r4, r16
    237e:	39 01       	movw	r6, r18
    2380:	0e 94 de 08 	call	0x11bc	; 0x11bc <getDwellFrames()>
    2384:	5c 01       	movw	r10, r24
    2386:	0e 94 c6 08 	call	0x118c	; 0x118c <getTransitionFrames()>
    238a:	6c 01       	movw	r12, r24
    238c:	0e 94 bd 08 	call	0x117a	; 0x117a <getPalleteNumber()>
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    2396:	84 30       	cpi	r24, 0x04	; 4
    2398:	09 f0       	breq	.+2      	; 0x239c <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x58>
    239a:	70 c0       	rjmp	.+224    	; 0x247c <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x138>
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	8f 57       	subi	r24, 0x7F	; 127
    23a2:	98 4b       	sbci	r25, 0xB8	; 184
    23a4:	fc 01       	movw	r30, r24
    23a6:	80 81       	ld	r24, Z
    23a8:	88 23       	and	r24, r24
    23aa:	09 f4       	brne	.+2      	; 0x23ae <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x6a>
    23ac:	6a c0       	rjmp	.+212    	; 0x2482 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x13e>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	dc 01       	movw	r26, r24
    23b4:	f9 81       	ldd	r31, Y+1	; 0x01
    23b6:	2f 2f       	mov	r18, r31
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	a9 01       	movw	r20, r18
    23bc:	47 5b       	subi	r20, 0xB7	; 183
    23be:	56 4f       	sbci	r21, 0xF6	; 246
    23c0:	7a 01       	movw	r14, r20
    23c2:	fa 01       	movw	r30, r20
    23c4:	44 91       	lpm	r20, Z
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	64 0d       	add	r22, r4
    23cc:	75 1d       	adc	r23, r5
    23ce:	86 1d       	adc	r24, r6
    23d0:	97 1d       	adc	r25, r7
    23d2:	85 01       	movw	r16, r10
    23d4:	0c 0d       	add	r16, r12
    23d6:	1d 1d       	adc	r17, r13
    23d8:	40 9f       	mul	r20, r16
    23da:	90 01       	movw	r18, r0
    23dc:	41 9f       	mul	r20, r17
    23de:	30 0d       	add	r19, r0
    23e0:	11 24       	eor	r1, r1
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	0e 94 41 22 	call	0x4482	; 0x4482 <__udivmodsi4>
    23ea:	98 01       	movw	r18, r16
    23ec:	50 e0       	ldi	r21, 0x00	; 0
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	0e 94 41 22 	call	0x4482	; 0x4482 <__udivmodsi4>
    23f4:	a2 2f       	mov	r26, r18
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	49 81       	ldd	r20, Y+1	; 0x01
    23fa:	e8 e1       	ldi	r30, 0x18	; 24
    23fc:	4e 9f       	mul	r20, r30
    23fe:	a0 01       	movw	r20, r0
    2400:	11 24       	eor	r1, r1
    2402:	49 87       	std	Y+9, r20	; 0x09
    2404:	5a 87       	std	Y+10, r21	; 0x0a
    2406:	fa 01       	movw	r30, r20
    2408:	53 e0       	ldi	r21, 0x03	; 3
    240a:	25 9f       	mul	r18, r21
    240c:	e0 0d       	add	r30, r0
    240e:	f1 1d       	adc	r31, r1
    2410:	11 24       	eor	r1, r1
    2412:	8f 01       	movw	r16, r30
    2414:	0d 5c       	subi	r16, 0xCD	; 205
    2416:	1a 4f       	sbci	r17, 0xFA	; 250
    2418:	af 01       	movw	r20, r30
    241a:	4c 5c       	subi	r20, 0xCC	; 204
    241c:	5a 4f       	sbci	r21, 0xFA	; 250
    241e:	49 83       	std	Y+1, r20	; 0x01
    2420:	5a 83       	std	Y+2, r21	; 0x02
    2422:	af 01       	movw	r20, r30
    2424:	4b 5c       	subi	r20, 0xCB	; 203
    2426:	5a 4f       	sbci	r21, 0xFA	; 250
    2428:	4b 83       	std	Y+3, r20	; 0x03
    242a:	5c 83       	std	Y+4, r21	; 0x04
    242c:	6a 15       	cp	r22, r10
    242e:	7b 05       	cpc	r23, r11
    2430:	68 f5       	brcc	.+90     	; 0x248c <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x148>
    2432:	f8 01       	movw	r30, r16
    2434:	04 91       	lpm	r16, Z
    2436:	f1 01       	movw	r30, r2
    2438:	00 83       	st	Z, r16
    243a:	e9 81       	ldd	r30, Y+1	; 0x01
    243c:	fa 81       	ldd	r31, Y+2	; 0x02
    243e:	14 91       	lpm	r17, Z
    2440:	ed 81       	ldd	r30, Y+5	; 0x05
    2442:	fe 81       	ldd	r31, Y+6	; 0x06
    2444:	10 83       	st	Z, r17
    2446:	fa 01       	movw	r30, r20
    2448:	64 91       	lpm	r22, Z
    244a:	ef 81       	ldd	r30, Y+7	; 0x07
    244c:	f8 85       	ldd	r31, Y+8	; 0x08
    244e:	60 83       	st	Z, r22
    2450:	2a 96       	adiw	r28, 0x0a	; 10
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	1f 91       	pop	r17
    245c:	0f 91       	pop	r16
    245e:	ff 90       	pop	r15
    2460:	ef 90       	pop	r14
    2462:	df 90       	pop	r13
    2464:	cf 90       	pop	r12
    2466:	bf 90       	pop	r11
    2468:	af 90       	pop	r10
    246a:	9f 90       	pop	r9
    246c:	8f 90       	pop	r8
    246e:	7f 90       	pop	r7
    2470:	6f 90       	pop	r6
    2472:	5f 90       	pop	r5
    2474:	4f 90       	pop	r4
    2476:	3f 90       	pop	r3
    2478:	2f 90       	pop	r2
    247a:	08 95       	ret
    247c:	83 e0       	ldi	r24, 0x03	; 3
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	8f cf       	rjmp	.-226    	; 0x23a0 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x5c>
    2482:	84 ef       	ldi	r24, 0xF4	; 244
    2484:	91 e0       	ldi	r25, 0x01	; 1
    2486:	a0 e0       	ldi	r26, 0x00	; 0
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	94 cf       	rjmp	.-216    	; 0x23b4 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x70>
    248c:	ab 01       	movw	r20, r22
    248e:	4a 19       	sub	r20, r10
    2490:	5b 09       	sbc	r21, r11
    2492:	f7 01       	movw	r30, r14
    2494:	e4 90       	lpm	r14, Z
    2496:	cd 01       	movw	r24, r26
    2498:	01 96       	adiw	r24, 0x01	; 1
    249a:	bb 24       	eor	r11, r11
    249c:	b3 94       	inc	r11
    249e:	b2 0e       	add	r11, r18
    24a0:	e8 16       	cp	r14, r24
    24a2:	19 06       	cpc	r1, r25
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x164>
    24a6:	0c f4       	brge	.+2      	; 0x24aa <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x166>
    24a8:	b1 2c       	mov	r11, r1
    24aa:	ba 01       	movw	r22, r20
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatunsisf>
    24b4:	2b 01       	movw	r4, r22
    24b6:	3c 01       	movw	r6, r24
    24b8:	b6 01       	movw	r22, r12
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatunsisf>
    24c2:	9b 01       	movw	r18, r22
    24c4:	ac 01       	movw	r20, r24
    24c6:	c3 01       	movw	r24, r6
    24c8:	b2 01       	movw	r22, r4
    24ca:	0e 94 db 22 	call	0x45b6	; 0x45b6 <__divsf3>
    24ce:	6b 01       	movw	r12, r22
    24d0:	7c 01       	movw	r14, r24
    24d2:	25 ec       	ldi	r18, 0xC5	; 197
    24d4:	30 e2       	ldi	r19, 0x20	; 32
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	0e 94 21 24 	call	0x4842	; 0x4842 <__gesf2>
    24de:	18 16       	cp	r1, r24
    24e0:	9c f4       	brge	.+38     	; 0x2508 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x1c4>
    24e2:	69 e1       	ldi	r22, 0x19	; 25
    24e4:	75 e0       	ldi	r23, 0x05	; 5
    24e6:	8f e8       	ldi	r24, 0x8F	; 143
    24e8:	97 e4       	ldi	r25, 0x47	; 71
    24ea:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
print():
    24ee:	42 e0       	ldi	r20, 0x02	; 2
    24f0:	c7 01       	movw	r24, r14
    24f2:	b6 01       	movw	r22, r12
    24f4:	48 de       	rcall	.-880    	; 0x2186 <Print::printFloat(double, unsigned char) [clone .constprop.8]>
write():
    24f6:	65 ef       	ldi	r22, 0xF5	; 245
    24f8:	70 e4       	ldi	r23, 0x40	; 64
    24fa:	8f e8       	ldi	r24, 0x8F	; 143
    24fc:	97 e4       	ldi	r25, 0x47	; 71
    24fe:	de dd       	rcall	.-1092   	; 0x20bc <Print::write(char const*) [clone .part.2]>
getModeColors():
    2500:	8f e8       	ldi	r24, 0x8F	; 143
    2502:	97 e4       	ldi	r25, 0x47	; 71
    2504:	0e 94 73 07 	call	0xee6	; 0xee6 <UartClass::flush()>
    2508:	29 85       	ldd	r18, Y+9	; 0x09
    250a:	3a 85       	ldd	r19, Y+10	; 0x0a
    250c:	43 e0       	ldi	r20, 0x03	; 3
    250e:	b4 9e       	mul	r11, r20
    2510:	20 0d       	add	r18, r0
    2512:	31 1d       	adc	r19, r1
    2514:	11 24       	eor	r1, r1
    2516:	29 87       	std	Y+9, r18	; 0x09
    2518:	3a 87       	std	Y+10, r19	; 0x0a
    251a:	f9 01       	movw	r30, r18
    251c:	ed 5c       	subi	r30, 0xCD	; 205
    251e:	fa 4f       	sbci	r31, 0xFA	; 250
    2520:	74 90       	lpm	r7, Z
    2522:	f8 01       	movw	r30, r16
    2524:	04 91       	lpm	r16, Z
    2526:	a7 01       	movw	r20, r14
    2528:	96 01       	movw	r18, r12
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	80 e8       	ldi	r24, 0x80	; 128
    2530:	9f e3       	ldi	r25, 0x3F	; 63
    2532:	0e 94 72 22 	call	0x44e4	; 0x44e4 <__subsf3>
    2536:	4b 01       	movw	r8, r22
    2538:	5c 01       	movw	r10, r24
    253a:	67 2d       	mov	r22, r7
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	0e 94 71 23 	call	0x46e2	; 0x46e2 <__floatsisf>
    2546:	a7 01       	movw	r20, r14
    2548:	96 01       	movw	r18, r12
    254a:	0e 94 25 24 	call	0x484a	; 0x484a <__mulsf3>
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e0       	ldi	r20, 0x00	; 0
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__addsf3>
    255a:	2b 01       	movw	r4, r22
    255c:	3c 01       	movw	r6, r24
    255e:	60 2f       	mov	r22, r16
    2560:	70 e0       	ldi	r23, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	0e 94 71 23 	call	0x46e2	; 0x46e2 <__floatsisf>
    256a:	a5 01       	movw	r20, r10
    256c:	94 01       	movw	r18, r8
    256e:	0e 94 25 24 	call	0x484a	; 0x484a <__mulsf3>
    2572:	9b 01       	movw	r18, r22
    2574:	ac 01       	movw	r20, r24
    2576:	c3 01       	movw	r24, r6
    2578:	b2 01       	movw	r22, r4
    257a:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__addsf3>
    257e:	0e 94 43 23 	call	0x4686	; 0x4686 <__fixunssfsi>
    2582:	f1 01       	movw	r30, r2
    2584:	60 83       	st	Z, r22
    2586:	e9 85       	ldd	r30, Y+9	; 0x09
    2588:	fa 85       	ldd	r31, Y+10	; 0x0a
    258a:	ec 5c       	subi	r30, 0xCC	; 204
    258c:	fa 4f       	sbci	r31, 0xFA	; 250
    258e:	64 91       	lpm	r22, Z
    2590:	e9 81       	ldd	r30, Y+1	; 0x01
    2592:	fa 81       	ldd	r31, Y+2	; 0x02
    2594:	14 91       	lpm	r17, Z
    2596:	70 e0       	ldi	r23, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	0e 94 71 23 	call	0x46e2	; 0x46e2 <__floatsisf>
    25a0:	a7 01       	movw	r20, r14
    25a2:	96 01       	movw	r18, r12
    25a4:	0e 94 25 24 	call	0x484a	; 0x484a <__mulsf3>
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	5f e3       	ldi	r21, 0x3F	; 63
    25b0:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__addsf3>
    25b4:	2b 01       	movw	r4, r22
    25b6:	3c 01       	movw	r6, r24
    25b8:	61 2f       	mov	r22, r17
    25ba:	70 e0       	ldi	r23, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	0e 94 71 23 	call	0x46e2	; 0x46e2 <__floatsisf>
    25c4:	a5 01       	movw	r20, r10
    25c6:	94 01       	movw	r18, r8
    25c8:	0e 94 25 24 	call	0x484a	; 0x484a <__mulsf3>
    25cc:	9b 01       	movw	r18, r22
    25ce:	ac 01       	movw	r20, r24
    25d0:	c3 01       	movw	r24, r6
    25d2:	b2 01       	movw	r22, r4
    25d4:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__addsf3>
    25d8:	0e 94 43 23 	call	0x4686	; 0x4686 <__fixunssfsi>
    25dc:	ed 81       	ldd	r30, Y+5	; 0x05
    25de:	fe 81       	ldd	r31, Y+6	; 0x06
    25e0:	60 83       	st	Z, r22
    25e2:	29 85       	ldd	r18, Y+9	; 0x09
    25e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    25e6:	2b 5c       	subi	r18, 0xCB	; 203
    25e8:	3a 4f       	sbci	r19, 0xFA	; 250
    25ea:	f9 01       	movw	r30, r18
    25ec:	f4 91       	lpm	r31, Z
    25ee:	f9 83       	std	Y+1, r31	; 0x01
    25f0:	eb 81       	ldd	r30, Y+3	; 0x03
    25f2:	fc 81       	ldd	r31, Y+4	; 0x04
    25f4:	f4 91       	lpm	r31, Z
    25f6:	fb 83       	std	Y+3, r31	; 0x03
    25f8:	29 81       	ldd	r18, Y+1	; 0x01
    25fa:	62 2f       	mov	r22, r18
    25fc:	70 e0       	ldi	r23, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	0e 94 71 23 	call	0x46e2	; 0x46e2 <__floatsisf>
    2606:	a7 01       	movw	r20, r14
    2608:	96 01       	movw	r18, r12
    260a:	0e 94 25 24 	call	0x484a	; 0x484a <__mulsf3>
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__addsf3>
    261a:	6b 01       	movw	r12, r22
    261c:	7c 01       	movw	r14, r24
    261e:	3b 81       	ldd	r19, Y+3	; 0x03
    2620:	63 2f       	mov	r22, r19
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	0e 94 71 23 	call	0x46e2	; 0x46e2 <__floatsisf>
    262c:	a5 01       	movw	r20, r10
    262e:	94 01       	movw	r18, r8
    2630:	0e 94 25 24 	call	0x484a	; 0x484a <__mulsf3>
    2634:	9b 01       	movw	r18, r22
    2636:	ac 01       	movw	r20, r24
    2638:	c7 01       	movw	r24, r14
    263a:	b6 01       	movw	r22, r12
    263c:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__addsf3>
    2640:	0e 94 43 23 	call	0x4686	; 0x4686 <__fixunssfsi>
    2644:	02 cf       	rjmp	.-508    	; 0x244a <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)+0x106>

00002646 <updatePatternWave()>:
updatePatternWave():
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	00 d0       	rcall	.+0      	; 0x2650 <updatePatternWave()+0xa>
    2650:	1f 92       	push	r1
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	00 91 75 47 	lds	r16, 0x4775	; 0x804775 <frameNumber>
    265a:	10 91 76 47 	lds	r17, 0x4776	; 0x804776 <frameNumber+0x1>
    265e:	20 91 77 47 	lds	r18, 0x4777	; 0x804777 <frameNumber+0x2>
    2662:	30 91 78 47 	lds	r19, 0x4778	; 0x804778 <frameNumber+0x3>
    2666:	ae 01       	movw	r20, r28
    2668:	4d 5f       	subi	r20, 0xFD	; 253
    266a:	5f 4f       	sbci	r21, 0xFF	; 255
    266c:	be 01       	movw	r22, r28
    266e:	6e 5f       	subi	r22, 0xFE	; 254
    2670:	7f 4f       	sbci	r23, 0xFF	; 255
    2672:	ce 01       	movw	r24, r28
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	66 de       	rcall	.-820    	; 0x2344 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
    2678:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    267c:	84 30       	cpi	r24, 0x04	; 4
    267e:	99 f0       	breq	.+38     	; 0x26a6 <updatePatternWave()+0x60>
    2680:	83 e0       	ldi	r24, 0x03	; 3
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	8f 57       	subi	r24, 0x7F	; 127
    2686:	98 4b       	sbci	r25, 0xB8	; 184
    2688:	fc 01       	movw	r30, r24
    268a:	20 81       	ld	r18, Z
    268c:	4b 81       	ldd	r20, Y+3	; 0x03
    268e:	6a 81       	ldd	r22, Y+2	; 0x02
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	0e 94 bc 09 	call	0x1378	; 0x1378 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)>
    2696:	23 96       	adiw	r28, 0x03	; 3
    2698:	cd bf       	out	0x3d, r28	; 61
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	08 95       	ret
    26a6:	82 e0       	ldi	r24, 0x02	; 2
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	ec cf       	rjmp	.-40     	; 0x2684 <updatePatternWave()+0x3e>

000026ac <initLookupDrift2()>:
initLookupDrift2():
    26ac:	8f 92       	push	r8
    26ae:	9f 92       	push	r9
    26b0:	af 92       	push	r10
    26b2:	bf 92       	push	r11
    26b4:	cf 92       	push	r12
    26b6:	df 92       	push	r13
    26b8:	ef 92       	push	r14
    26ba:	ff 92       	push	r15
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	07 e8       	ldi	r16, 0x87	; 135
    26c6:	14 e4       	ldi	r17, 0x44	; 68
    26c8:	d0 e0       	ldi	r29, 0x00	; 0
    26ca:	c0 e0       	ldi	r28, 0x00	; 0
    26cc:	0e 94 c6 08 	call	0x118c	; 0x118c <getTransitionFrames()>
    26d0:	c8 17       	cp	r28, r24
    26d2:	d9 07       	cpc	r29, r25
    26d4:	08 f0       	brcs	.+2      	; 0x26d8 <initLookupDrift2()+0x2c>
    26d6:	41 c0       	rjmp	.+130    	; 0x275a <initLookupDrift2()+0xae>
getModeRatio():
    26d8:	0e 94 c6 08 	call	0x118c	; 0x118c <getTransitionFrames()>
    26dc:	7c 01       	movw	r14, r24
    26de:	be 01       	movw	r22, r28
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatunsisf>
    26e8:	4b 01       	movw	r8, r22
    26ea:	5c 01       	movw	r10, r24
    26ec:	b7 01       	movw	r22, r14
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatunsisf>
    26f6:	9b 01       	movw	r18, r22
    26f8:	ac 01       	movw	r20, r24
    26fa:	c5 01       	movw	r24, r10
    26fc:	b4 01       	movw	r22, r8
    26fe:	0e 94 db 22 	call	0x45b6	; 0x45b6 <__divsf3>
    2702:	6b 01       	movw	r12, r22
    2704:	7c 01       	movw	r14, r24
    2706:	25 ec       	ldi	r18, 0xC5	; 197
    2708:	30 e2       	ldi	r19, 0x20	; 32
    270a:	40 e8       	ldi	r20, 0x80	; 128
    270c:	5f e3       	ldi	r21, 0x3F	; 63
    270e:	0e 94 21 24 	call	0x4842	; 0x4842 <__gesf2>
    2712:	18 16       	cp	r1, r24
    2714:	9c f4       	brge	.+38     	; 0x273c <initLookupDrift2()+0x90>
    2716:	6f ed       	ldi	r22, 0xDF	; 223
    2718:	74 e0       	ldi	r23, 0x04	; 4
    271a:	8f e8       	ldi	r24, 0x8F	; 143
    271c:	97 e4       	ldi	r25, 0x47	; 71
    271e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
print():
    2722:	42 e0       	ldi	r20, 0x02	; 2
    2724:	c7 01       	movw	r24, r14
    2726:	b6 01       	movw	r22, r12
    2728:	2e dd       	rcall	.-1444   	; 0x2186 <Print::printFloat(double, unsigned char) [clone .constprop.8]>
write():
    272a:	65 ef       	ldi	r22, 0xF5	; 245
    272c:	70 e4       	ldi	r23, 0x40	; 64
    272e:	8f e8       	ldi	r24, 0x8F	; 143
    2730:	97 e4       	ldi	r25, 0x47	; 71
    2732:	c4 dc       	rcall	.-1656   	; 0x20bc <Print::write(char const*) [clone .part.2]>
getModeRatio():
    2734:	8f e8       	ldi	r24, 0x8F	; 143
    2736:	97 e4       	ldi	r25, 0x47	; 71
    2738:	0e 94 73 07 	call	0xee6	; 0xee6 <UartClass::flush()>
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e8       	ldi	r19, 0x80	; 128
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	53 e4       	ldi	r21, 0x43	; 67
    2744:	c7 01       	movw	r24, r14
    2746:	b6 01       	movw	r22, r12
    2748:	0e 94 25 24 	call	0x484a	; 0x484a <__mulsf3>
    274c:	0e 94 43 23 	call	0x4686	; 0x4686 <__fixunssfsi>
    2750:	f8 01       	movw	r30, r16
    2752:	61 93       	st	Z+, r22
    2754:	8f 01       	movw	r16, r30
initLookupDrift2():
    2756:	21 96       	adiw	r28, 0x01	; 1
    2758:	b9 cf       	rjmp	.-142    	; 0x26cc <initLookupDrift2()+0x20>
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	ff 90       	pop	r15
    2764:	ef 90       	pop	r14
    2766:	df 90       	pop	r13
    2768:	cf 90       	pop	r12
    276a:	bf 90       	pop	r11
    276c:	af 90       	pop	r10
    276e:	9f 90       	pop	r9
    2770:	8f 90       	pop	r8
    2772:	08 95       	ret

00002774 <__cxa_pure_virtual>:
__cxa_pure_virtual():
    2774:	0e 94 b8 24 	call	0x4970	; 0x4970 <abort>

00002778 <setMode(unsigned char)>:
setMode():
    2778:	af 92       	push	r10
    277a:	bf 92       	push	r11
    277c:	cf 92       	push	r12
    277e:	df 92       	push	r13
    2780:	ef 92       	push	r14
    2782:	ff 92       	push	r15
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	80 93 89 47 	sts	0x4789, r24	; 0x804789 <currentMode>
    2790:	8c ed       	ldi	r24, 0xDC	; 220
    2792:	95 e0       	ldi	r25, 0x05	; 5
    2794:	e9 e9       	ldi	r30, 0x99	; 153
    2796:	f1 e4       	ldi	r31, 0x41	; 65
    2798:	df 01       	movw	r26, r30
    279a:	9c 01       	movw	r18, r24
    279c:	1d 92       	st	X+, r1
    279e:	21 50       	subi	r18, 0x01	; 1
    27a0:	30 40       	sbci	r19, 0x00	; 0
    27a2:	e1 f7       	brne	.-8      	; 0x279c <setMode(unsigned char)+0x24>
    27a4:	e6 e2       	ldi	r30, 0x26	; 38
    27a6:	f8 e4       	ldi	r31, 0x48	; 72
    27a8:	df 01       	movw	r26, r30
    27aa:	9c 01       	movw	r18, r24
    27ac:	1d 92       	st	X+, r1
    27ae:	21 50       	subi	r18, 0x01	; 1
    27b0:	30 40       	sbci	r19, 0x00	; 0
    27b2:	e1 f7       	brne	.-8      	; 0x27ac <setMode(unsigned char)+0x34>
    27b4:	81 e8       	ldi	r24, 0x81	; 129
    27b6:	a8 2e       	mov	r10, r24
    27b8:	87 e4       	ldi	r24, 0x47	; 71
    27ba:	b8 2e       	mov	r11, r24
    27bc:	09 e7       	ldi	r16, 0x79	; 121
    27be:	17 e4       	ldi	r17, 0x47	; 71
    27c0:	d0 e0       	ldi	r29, 0x00	; 0
    27c2:	c0 e0       	ldi	r28, 0x00	; 0
    27c4:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    27c8:	38 e0       	ldi	r19, 0x08	; 8
    27ca:	83 9f       	mul	r24, r19
    27cc:	c0 01       	movw	r24, r0
    27ce:	11 24       	eor	r1, r1
    27d0:	8c 0f       	add	r24, r28
    27d2:	9d 1f       	adc	r25, r29
    27d4:	fc 01       	movw	r30, r24
    27d6:	e9 57       	subi	r30, 0x79	; 121
    27d8:	fb 4f       	sbci	r31, 0xFB	; 251
    27da:	24 91       	lpm	r18, Z
    27dc:	2f 3f       	cpi	r18, 0xFF	; 255
    27de:	09 f0       	breq	.+2      	; 0x27e2 <setMode(unsigned char)+0x6a>
    27e0:	66 c0       	rjmp	.+204    	; 0x28ae <setMode(unsigned char)+0x136>
    27e2:	fc 01       	movw	r30, r24
    27e4:	e5 5c       	subi	r30, 0xC5	; 197
    27e6:	f9 4f       	sbci	r31, 0xF9	; 249
    27e8:	e4 91       	lpm	r30, Z
    27ea:	ce 2e       	mov	r12, r30
    27ec:	d1 2c       	mov	r13, r1
    27ee:	f1 2c       	mov	r15, r1
    27f0:	e1 2c       	mov	r14, r1
random():
    27f2:	c1 14       	cp	r12, r1
    27f4:	d1 04       	cpc	r13, r1
    27f6:	e1 04       	cpc	r14, r1
    27f8:	f1 04       	cpc	r15, r1
    27fa:	39 f0       	breq	.+14     	; 0x280a <setMode(unsigned char)+0x92>
    27fc:	0e 94 c0 21 	call	0x4380	; 0x4380 <random>
    2800:	a7 01       	movw	r20, r14
    2802:	96 01       	movw	r18, r12
    2804:	0e 94 15 22 	call	0x442a	; 0x442a <__divmodsi4>
    2808:	6b 01       	movw	r12, r22
setMode():
    280a:	fe 01       	movw	r30, r28
    280c:	e7 58       	subi	r30, 0x87	; 135
    280e:	f8 4b       	sbci	r31, 0xB8	; 184
    2810:	c0 82       	st	Z, r12
    2812:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    2816:	b8 e0       	ldi	r27, 0x08	; 8
    2818:	8b 9f       	mul	r24, r27
    281a:	c0 01       	movw	r24, r0
    281c:	11 24       	eor	r1, r1
    281e:	8c 0f       	add	r24, r28
    2820:	9d 1f       	adc	r25, r29
    2822:	fc 01       	movw	r30, r24
    2824:	e9 57       	subi	r30, 0x79	; 121
    2826:	fb 4f       	sbci	r31, 0xFB	; 251
    2828:	e4 91       	lpm	r30, Z
    282a:	ef 3f       	cpi	r30, 0xFF	; 255
    282c:	09 f0       	breq	.+2      	; 0x2830 <setMode(unsigned char)+0xb8>
    282e:	43 c0       	rjmp	.+134    	; 0x28b6 <setMode(unsigned char)+0x13e>
    2830:	fc 01       	movw	r30, r24
    2832:	ec 5a       	subi	r30, 0xAC	; 172
    2834:	f6 4f       	sbci	r31, 0xF6	; 246
    2836:	e4 91       	lpm	r30, Z
    2838:	ce 2e       	mov	r12, r30
    283a:	d1 2c       	mov	r13, r1
    283c:	f1 2c       	mov	r15, r1
    283e:	e1 2c       	mov	r14, r1
random():
    2840:	c1 14       	cp	r12, r1
    2842:	d1 04       	cpc	r13, r1
    2844:	e1 04       	cpc	r14, r1
    2846:	f1 04       	cpc	r15, r1
    2848:	39 f0       	breq	.+14     	; 0x2858 <setMode(unsigned char)+0xe0>
    284a:	0e 94 c0 21 	call	0x4380	; 0x4380 <random>
    284e:	a7 01       	movw	r20, r14
    2850:	96 01       	movw	r18, r12
    2852:	0e 94 15 22 	call	0x442a	; 0x442a <__divmodsi4>
    2856:	6b 01       	movw	r12, r22
setMode():
    2858:	fe 01       	movw	r30, r28
    285a:	ef 57       	subi	r30, 0x7F	; 127
    285c:	f8 4b       	sbci	r31, 0xB8	; 184
    285e:	c0 82       	st	Z, r12
    2860:	21 96       	adiw	r28, 0x01	; 1
    2862:	bf ef       	ldi	r27, 0xFF	; 255
    2864:	ab 1a       	sub	r10, r27
    2866:	bb 0a       	sbc	r11, r27
    2868:	0f 5f       	subi	r16, 0xFF	; 255
    286a:	1f 4f       	sbci	r17, 0xFF	; 255
    286c:	c8 30       	cpi	r28, 0x08	; 8
    286e:	d1 05       	cpc	r29, r1
    2870:	09 f0       	breq	.+2      	; 0x2874 <setMode(unsigned char)+0xfc>
    2872:	a8 cf       	rjmp	.-176    	; 0x27c4 <setMode(unsigned char)+0x4c>
    2874:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    2878:	8a 30       	cpi	r24, 0x0A	; 10
    287a:	11 f4       	brne	.+4      	; 0x2880 <setMode(unsigned char)+0x108>
    287c:	17 df       	rcall	.-466    	; 0x26ac <initLookupDrift2()>
    287e:	ca db       	rcall	.-2156   	; 0x2014 <initColorsDrift2()>
    2880:	10 92 75 47 	sts	0x4775, r1	; 0x804775 <frameNumber>
    2884:	10 92 76 47 	sts	0x4776, r1	; 0x804776 <frameNumber+0x1>
    2888:	10 92 77 47 	sts	0x4777, r1	; 0x804777 <frameNumber+0x2>
    288c:	10 92 78 47 	sts	0x4778, r1	; 0x804778 <frameNumber+0x3>
    2890:	10 92 8b 41 	sts	0x418B, r1	; 0x80418b <currentSettingLeft>
    2894:	10 92 8a 41 	sts	0x418A, r1	; 0x80418a <currentSettingRight>
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	1f 91       	pop	r17
    289e:	0f 91       	pop	r16
    28a0:	ff 90       	pop	r15
    28a2:	ef 90       	pop	r14
    28a4:	df 90       	pop	r13
    28a6:	cf 90       	pop	r12
    28a8:	bf 90       	pop	r11
    28aa:	af 90       	pop	r10
    28ac:	08 95       	ret
    28ae:	e4 91       	lpm	r30, Z
    28b0:	d8 01       	movw	r26, r16
    28b2:	ec 93       	st	X, r30
    28b4:	ae cf       	rjmp	.-164    	; 0x2812 <setMode(unsigned char)+0x9a>
    28b6:	fc 01       	movw	r30, r24
    28b8:	e1 5d       	subi	r30, 0xD1	; 209
    28ba:	fb 4f       	sbci	r31, 0xFB	; 251
    28bc:	e4 91       	lpm	r30, Z
    28be:	d5 01       	movw	r26, r10
    28c0:	ec 93       	st	X, r30
    28c2:	ce cf       	rjmp	.-100    	; 0x2860 <setMode(unsigned char)+0xe8>

000028c4 <__vector_22>:
__vector_22():
    28c4:	1f 92       	push	r1
    28c6:	0f 92       	push	r0
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	0f 92       	push	r0
    28cc:	11 24       	eor	r1, r1
    28ce:	0b b6       	in	r0, 0x3b	; 59
    28d0:	0f 92       	push	r0
    28d2:	2f 93       	push	r18
    28d4:	3f 93       	push	r19
    28d6:	4f 93       	push	r20
    28d8:	5f 93       	push	r21
    28da:	6f 93       	push	r22
    28dc:	7f 93       	push	r23
    28de:	8f 93       	push	r24
    28e0:	9f 93       	push	r25
    28e2:	af 93       	push	r26
    28e4:	bf 93       	push	r27
    28e6:	ef 93       	push	r30
    28e8:	ff 93       	push	r31
    28ea:	8f e8       	ldi	r24, 0x8F	; 143
    28ec:	97 e4       	ldi	r25, 0x47	; 71
    28ee:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <UartClass::_tx_data_empty_irq(UartClass&)>
    28f2:	ff 91       	pop	r31
    28f4:	ef 91       	pop	r30
    28f6:	bf 91       	pop	r27
    28f8:	af 91       	pop	r26
    28fa:	9f 91       	pop	r25
    28fc:	8f 91       	pop	r24
    28fe:	7f 91       	pop	r23
    2900:	6f 91       	pop	r22
    2902:	5f 91       	pop	r21
    2904:	4f 91       	pop	r20
    2906:	3f 91       	pop	r19
    2908:	2f 91       	pop	r18
    290a:	0f 90       	pop	r0
    290c:	0b be       	out	0x3b, r0	; 59
    290e:	0f 90       	pop	r0
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	0f 90       	pop	r0
    2914:	1f 90       	pop	r1
    2916:	18 95       	reti

00002918 <__vector_23>:
__vector_23():
    2918:	1f 92       	push	r1
    291a:	0f 92       	push	r0
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	0f 92       	push	r0
    2920:	11 24       	eor	r1, r1
    2922:	8f 93       	push	r24
    2924:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7e0804>
    2928:	87 ff       	sbrs	r24, 7
    292a:	03 c0       	rjmp	.+6      	; 0x2932 <__vector_23+0x1a>
    292c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
    2930:	f9 cf       	rjmp	.-14     	; 0x2924 <__vector_23+0xc>
    2932:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x7e0805>
    2936:	8f 7b       	andi	r24, 0xBF	; 191
    2938:	80 68       	ori	r24, 0x80	; 128
    293a:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7e0805>
    293e:	8f 91       	pop	r24
    2940:	0f 90       	pop	r0
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	0f 90       	pop	r0
    2946:	1f 90       	pop	r1
    2948:	18 95       	reti

0000294a <__vector_21>:
__vector_21():
    294a:	1f 92       	push	r1
    294c:	0f 92       	push	r0
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	0f 92       	push	r0
    2952:	11 24       	eor	r1, r1
    2954:	0b b6       	in	r0, 0x3b	; 59
    2956:	0f 92       	push	r0
    2958:	2f 93       	push	r18
    295a:	8f 93       	push	r24
    295c:	9f 93       	push	r25
    295e:	ef 93       	push	r30
    2960:	ff 93       	push	r31
_rx_complete_irq():
    2962:	e0 91 9b 47 	lds	r30, 0x479B	; 0x80479b <Serial0+0xc>
    2966:	f0 91 9c 47 	lds	r31, 0x479C	; 0x80479c <Serial0+0xd>
    296a:	81 81       	ldd	r24, Z+1	; 0x01
    296c:	90 81       	ld	r25, Z
    296e:	e0 91 a2 47 	lds	r30, 0x47A2	; 0x8047a2 <Serial0+0x13>
    2972:	81 fd       	sbrc	r24, 1
    2974:	0d c0       	rjmp	.+26     	; 0x2990 <__vector_21+0x46>
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	8e 0f       	add	r24, r30
    297a:	8f 73       	andi	r24, 0x3F	; 63
    297c:	20 91 a3 47 	lds	r18, 0x47A3	; 0x8047a3 <Serial0+0x14>
    2980:	82 17       	cp	r24, r18
    2982:	31 f0       	breq	.+12     	; 0x2990 <__vector_21+0x46>
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	e1 57       	subi	r30, 0x71	; 113
    2988:	f8 4b       	sbci	r31, 0xB8	; 184
    298a:	97 8b       	std	Z+23, r25	; 0x17
    298c:	80 93 a2 47 	sts	0x47A2, r24	; 0x8047a2 <Serial0+0x13>
__vector_21():
    2990:	ff 91       	pop	r31
    2992:	ef 91       	pop	r30
    2994:	9f 91       	pop	r25
    2996:	8f 91       	pop	r24
    2998:	2f 91       	pop	r18
    299a:	0f 90       	pop	r0
    299c:	0b be       	out	0x3b, r0	; 59
    299e:	0f 90       	pop	r0
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	0f 90       	pop	r0
    29a4:	1f 90       	pop	r1
    29a6:	18 95       	reti

000029a8 <__vector_31>:
__vector_31():
    29a8:	1f 92       	push	r1
    29aa:	0f 92       	push	r0
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	0f 92       	push	r0
    29b0:	11 24       	eor	r1, r1
    29b2:	8f 93       	push	r24
    29b4:	9f 93       	push	r25
    29b6:	af 93       	push	r26
    29b8:	bf 93       	push	r27
    29ba:	80 91 7e 41 	lds	r24, 0x417E	; 0x80417e <timer_millis>
    29be:	90 91 7f 41 	lds	r25, 0x417F	; 0x80417f <timer_millis+0x1>
    29c2:	a0 91 80 41 	lds	r26, 0x4180	; 0x804180 <timer_millis+0x2>
    29c6:	b0 91 81 41 	lds	r27, 0x4181	; 0x804181 <timer_millis+0x3>
    29ca:	01 96       	adiw	r24, 0x01	; 1
    29cc:	a1 1d       	adc	r26, r1
    29ce:	b1 1d       	adc	r27, r1
    29d0:	80 93 7e 41 	sts	0x417E, r24	; 0x80417e <timer_millis>
    29d4:	90 93 7f 41 	sts	0x417F, r25	; 0x80417f <timer_millis+0x1>
    29d8:	a0 93 80 41 	sts	0x4180, r26	; 0x804180 <timer_millis+0x2>
    29dc:	b0 93 81 41 	sts	0x4181, r27	; 0x804181 <timer_millis+0x3>
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    29e6:	bf 91       	pop	r27
    29e8:	af 91       	pop	r26
    29ea:	9f 91       	pop	r25
    29ec:	8f 91       	pop	r24
    29ee:	0f 90       	pop	r0
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	0f 90       	pop	r0
    29f4:	1f 90       	pop	r1
    29f6:	18 95       	reti

000029f8 <__vector_44>:
__vector_44():
    29f8:	1f 92       	push	r1
    29fa:	0f 92       	push	r0
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	0f 92       	push	r0
    2a00:	11 24       	eor	r1, r1
    2a02:	0b b6       	in	r0, 0x3b	; 59
    2a04:	0f 92       	push	r0
    2a06:	2f 93       	push	r18
    2a08:	3f 93       	push	r19
    2a0a:	4f 93       	push	r20
    2a0c:	5f 93       	push	r21
    2a0e:	6f 93       	push	r22
    2a10:	7f 93       	push	r23
    2a12:	8f 93       	push	r24
    2a14:	9f 93       	push	r25
    2a16:	af 93       	push	r26
    2a18:	bf 93       	push	r27
    2a1a:	ef 93       	push	r30
    2a1c:	ff 93       	push	r31
    2a1e:	40 91 3c 0b 	lds	r20, 0x0B3C	; 0x800b3c <__TEXT_REGION_LENGTH__+0x7e0b3c>
    2a22:	50 91 3d 0b 	lds	r21, 0x0B3D	; 0x800b3d <__TEXT_REGION_LENGTH__+0x7e0b3d>
digitalReadFast():
    2a26:	86 b3       	in	r24, 0x16	; 22
__vector_44():
    2a28:	28 2f       	mov	r18, r24
    2a2a:	28 70       	andi	r18, 0x08	; 8
    2a2c:	83 fd       	sbrc	r24, 3
    2a2e:	27 c0       	rjmp	.+78     	; 0x2a7e <__vector_44+0x86>
    2a30:	81 e4       	ldi	r24, 0x41	; 65
    2a32:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <__TEXT_REGION_LENGTH__+0x7e0b34>
    2a36:	80 91 7a 41 	lds	r24, 0x417A	; 0x80417a <__vector_44::lasttime>
    2a3a:	90 91 7b 41 	lds	r25, 0x417B	; 0x80417b <__vector_44::lasttime+0x1>
    2a3e:	ba 01       	movw	r22, r20
    2a40:	68 1b       	sub	r22, r24
    2a42:	79 0b       	sbc	r23, r25
    2a44:	cb 01       	movw	r24, r22
    2a46:	70 e0       	ldi	r23, 0x00	; 0
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	40 93 7a 41 	sts	0x417A, r20	; 0x80417a <__vector_44::lasttime>
    2a4e:	50 93 7b 41 	sts	0x417B, r21	; 0x80417b <__vector_44::lasttime+0x1>
    2a52:	60 93 7c 41 	sts	0x417C, r22	; 0x80417c <__vector_44::lasttime+0x2>
    2a56:	70 93 7d 41 	sts	0x417D, r23	; 0x80417d <__vector_44::lasttime+0x3>
    2a5a:	22 23       	and	r18, r18
    2a5c:	59 f1       	breq	.+86     	; 0x2ab4 <__vector_44+0xbc>
    2a5e:	f8 9b       	sbis	0x1f, 0	; 31
    2a60:	10 c0       	rjmp	.+32     	; 0x2a82 <__vector_44+0x8a>
    2a62:	89 30       	cpi	r24, 0x09	; 9
    2a64:	97 40       	sbci	r25, 0x07	; 7
    2a66:	98 f0       	brcs	.+38     	; 0x2a8e <__vector_44+0x96>
    2a68:	f8 98       	cbi	0x1f, 0	; 31
    2a6a:	10 92 79 41 	sts	0x4179, r1	; 0x804179 <bitnum>
    2a6e:	e9 e5       	ldi	r30, 0x59	; 89
    2a70:	f1 e4       	ldi	r31, 0x41	; 65
    2a72:	80 e2       	ldi	r24, 0x20	; 32
    2a74:	df 01       	movw	r26, r30
    2a76:	1d 92       	st	X+, r1
    2a78:	8a 95       	dec	r24
    2a7a:	e9 f7       	brne	.-6      	; 0x2a76 <__vector_44+0x7e>
    2a7c:	08 c0       	rjmp	.+16     	; 0x2a8e <__vector_44+0x96>
    2a7e:	81 e5       	ldi	r24, 0x51	; 81
    2a80:	d8 cf       	rjmp	.-80     	; 0x2a32 <__vector_44+0x3a>
    2a82:	83 58       	subi	r24, 0x83	; 131
    2a84:	94 41       	sbci	r25, 0x14	; 20
    2a86:	8b 3d       	cpi	r24, 0xDB	; 219
    2a88:	95 40       	sbci	r25, 0x05	; 5
    2a8a:	08 f4       	brcc	.+2      	; 0x2a8e <__vector_44+0x96>
    2a8c:	f8 9a       	sbi	0x1f, 0	; 31
    2a8e:	ff 91       	pop	r31
    2a90:	ef 91       	pop	r30
    2a92:	bf 91       	pop	r27
    2a94:	af 91       	pop	r26
    2a96:	9f 91       	pop	r25
    2a98:	8f 91       	pop	r24
    2a9a:	7f 91       	pop	r23
    2a9c:	6f 91       	pop	r22
    2a9e:	5f 91       	pop	r21
    2aa0:	4f 91       	pop	r20
    2aa2:	3f 91       	pop	r19
    2aa4:	2f 91       	pop	r18
    2aa6:	0f 90       	pop	r0
    2aa8:	0b be       	out	0x3b, r0	; 59
    2aaa:	0f 90       	pop	r0
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	0f 90       	pop	r0
    2ab0:	1f 90       	pop	r1
    2ab2:	18 95       	reti
    2ab4:	f8 9b       	sbis	0x1f, 0	; 31
    2ab6:	eb cf       	rjmp	.-42     	; 0x2a8e <__vector_44+0x96>
    2ab8:	9c 01       	movw	r18, r24
    2aba:	2d 52       	subi	r18, 0x2D	; 45
    2abc:	31 40       	sbci	r19, 0x01	; 1
    2abe:	25 36       	cpi	r18, 0x65	; 101
    2ac0:	33 40       	sbci	r19, 0x03	; 3
    2ac2:	c0 f5       	brcc	.+112    	; 0x2b34 <__vector_44+0x13c>
    2ac4:	80 91 58 41 	lds	r24, 0x4158	; 0x804158 <dataIn>
    2ac8:	88 0f       	add	r24, r24
    2aca:	80 93 58 41 	sts	0x4158, r24	; 0x804158 <dataIn>
    2ace:	80 91 79 41 	lds	r24, 0x4179	; 0x804179 <bitnum>
    2ad2:	87 70       	andi	r24, 0x07	; 7
    2ad4:	87 30       	cpi	r24, 0x07	; 7
    2ad6:	09 f5       	brne	.+66     	; 0x2b1a <__vector_44+0x122>
    2ad8:	80 91 58 41 	lds	r24, 0x4158	; 0x804158 <dataIn>
    2adc:	e0 91 79 41 	lds	r30, 0x4179	; 0x804179 <bitnum>
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	93 e0       	ldi	r25, 0x03	; 3
    2ae4:	f5 95       	asr	r31
    2ae6:	e7 95       	ror	r30
    2ae8:	9a 95       	dec	r25
    2aea:	e1 f7       	brne	.-8      	; 0x2ae4 <__vector_44+0xec>
    2aec:	e7 5a       	subi	r30, 0xA7	; 167
    2aee:	fe 4b       	sbci	r31, 0xBE	; 190
    2af0:	80 83       	st	Z, r24
    2af2:	80 91 79 41 	lds	r24, 0x4179	; 0x804179 <bitnum>
    2af6:	87 30       	cpi	r24, 0x07	; 7
    2af8:	71 f4       	brne	.+28     	; 0x2b16 <__vector_44+0x11e>
    2afa:	80 91 58 41 	lds	r24, 0x4158	; 0x804158 <dataIn>
    2afe:	82 95       	swap	r24
    2b00:	86 95       	lsr	r24
    2b02:	86 95       	lsr	r24
    2b04:	83 70       	andi	r24, 0x03	; 3
    2b06:	09 f1       	breq	.+66     	; 0x2b4a <__vector_44+0x152>
    2b08:	81 30       	cpi	r24, 0x01	; 1
    2b0a:	09 f1       	breq	.+66     	; 0x2b4e <__vector_44+0x156>
    2b0c:	82 30       	cpi	r24, 0x02	; 2
    2b0e:	09 f1       	breq	.+66     	; 0x2b52 <__vector_44+0x15a>
    2b10:	8f ef       	ldi	r24, 0xFF	; 255
    2b12:	80 93 02 40 	sts	0x4002, r24	; 0x804002 <pktLength>
    2b16:	10 92 58 41 	sts	0x4158, r1	; 0x804158 <dataIn>
    2b1a:	90 91 79 41 	lds	r25, 0x4179	; 0x804179 <bitnum>
    2b1e:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <pktLength>
    2b22:	98 17       	cp	r25, r24
    2b24:	c0 f0       	brcs	.+48     	; 0x2b56 <__vector_44+0x15e>
    2b26:	10 92 79 41 	sts	0x4179, r1	; 0x804179 <bitnum>
    2b2a:	f8 98       	cbi	0x1f, 0	; 31
    2b2c:	f9 9a       	sbi	0x1f, 1	; 31
    2b2e:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <__TEXT_REGION_LENGTH__+0x7e0b35>
    2b32:	ad cf       	rjmp	.-166    	; 0x2a8e <__vector_44+0x96>
    2b34:	8f 5c       	subi	r24, 0xCF	; 207
    2b36:	94 40       	sbci	r25, 0x04	; 4
    2b38:	85 36       	cpi	r24, 0x65	; 101
    2b3a:	93 40       	sbci	r25, 0x03	; 3
    2b3c:	08 f0       	brcs	.+2      	; 0x2b40 <__vector_44+0x148>
    2b3e:	94 cf       	rjmp	.-216    	; 0x2a68 <__vector_44+0x70>
    2b40:	80 91 58 41 	lds	r24, 0x4158	; 0x804158 <dataIn>
    2b44:	88 0f       	add	r24, r24
    2b46:	8f 5f       	subi	r24, 0xFF	; 255
    2b48:	c0 cf       	rjmp	.-128    	; 0x2aca <__vector_44+0xd2>
    2b4a:	8f e1       	ldi	r24, 0x1F	; 31
    2b4c:	e2 cf       	rjmp	.-60     	; 0x2b12 <__vector_44+0x11a>
    2b4e:	8f e3       	ldi	r24, 0x3F	; 63
    2b50:	e0 cf       	rjmp	.-64     	; 0x2b12 <__vector_44+0x11a>
    2b52:	8f e7       	ldi	r24, 0x7F	; 127
    2b54:	de cf       	rjmp	.-68     	; 0x2b12 <__vector_44+0x11a>
    2b56:	80 91 79 41 	lds	r24, 0x4179	; 0x804179 <bitnum>
    2b5a:	8f 5f       	subi	r24, 0xFF	; 255
    2b5c:	80 93 79 41 	sts	0x4179, r24	; 0x804179 <bitnum>
    2b60:	96 cf       	rjmp	.-212    	; 0x2a8e <__vector_44+0x96>

00002b62 <__vector_30>:
__vector_30():
    2b62:	1f 92       	push	r1
    2b64:	0f 92       	push	r0
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	0f 92       	push	r0
    2b6a:	11 24       	eor	r1, r1
    2b6c:	0b b6       	in	r0, 0x3b	; 59
    2b6e:	0f 92       	push	r0
    2b70:	2f 93       	push	r18
    2b72:	3f 93       	push	r19
    2b74:	4f 93       	push	r20
    2b76:	5f 93       	push	r21
    2b78:	8f 93       	push	r24
    2b7a:	9f 93       	push	r25
    2b7c:	ef 93       	push	r30
    2b7e:	ff 93       	push	r31
    2b80:	8a b1       	in	r24, 0x0a	; 10
    2b82:	9b b1       	in	r25, 0x0b	; 11
    2b84:	9b b9       	out	0x0b, r25	; 11
    2b86:	90 91 00 40 	lds	r25, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    2b8a:	99 0f       	add	r25, r25
    2b8c:	99 0f       	add	r25, r25
    2b8e:	e8 2f       	mov	r30, r24
    2b90:	ef 70       	andi	r30, 0x0F	; 15
    2b92:	e6 95       	lsr	r30
    2b94:	e6 95       	lsr	r30
    2b96:	20 91 01 40 	lds	r18, 0x4001	; 0x804001 <__vector_30::EncL_Prev>
    2b9a:	22 0f       	add	r18, r18
    2b9c:	22 0f       	add	r18, r18
    2b9e:	e2 2b       	or	r30, r18
    2ba0:	e0 93 01 40 	sts	0x4001, r30	; 0x804001 <__vector_30::EncL_Prev>
    2ba4:	83 70       	andi	r24, 0x03	; 3
    2ba6:	98 2b       	or	r25, r24
    2ba8:	90 93 00 40 	sts	0x4000, r25	; 0x804000 <__DATA_REGION_ORIGIN__>
    2bac:	ef 70       	andi	r30, 0x0F	; 15
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	ed 56       	subi	r30, 0x6D	; 109
    2bb2:	f9 4f       	sbci	r31, 0xF9	; 249
    2bb4:	84 91       	lpm	r24, Z
    2bb6:	e0 91 57 41 	lds	r30, 0x4157	; 0x804157 <__vector_30::EncL_Val>
    2bba:	8e 0f       	add	r24, r30
    2bbc:	80 93 57 41 	sts	0x4157, r24	; 0x804157 <__vector_30::EncL_Val>
    2bc0:	9f 70       	andi	r25, 0x0F	; 15
    2bc2:	e9 2f       	mov	r30, r25
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	ed 56       	subi	r30, 0x6D	; 109
    2bc8:	f9 4f       	sbci	r31, 0xF9	; 249
    2bca:	94 91       	lpm	r25, Z
    2bcc:	e0 91 56 41 	lds	r30, 0x4156	; 0x804156 <__vector_30::EncR_Val>
    2bd0:	9e 0f       	add	r25, r30
    2bd2:	90 93 56 41 	sts	0x4156, r25	; 0x804156 <__vector_30::EncR_Val>
    2bd6:	84 30       	cpi	r24, 0x04	; 4
    2bd8:	0c f4       	brge	.+2      	; 0x2bdc <__vector_30+0x7a>
    2bda:	81 c0       	rjmp	.+258    	; 0x2cde <__vector_30+0x17c>
    2bdc:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	e7 58       	subi	r30, 0x87	; 135
    2be4:	f8 4b       	sbci	r31, 0xB8	; 184
    2be6:	20 81       	ld	r18, Z
    2be8:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    2bec:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    2bf0:	38 e0       	ldi	r19, 0x08	; 8
    2bf2:	83 9f       	mul	r24, r19
    2bf4:	a0 01       	movw	r20, r0
    2bf6:	11 24       	eor	r1, r1
    2bf8:	e4 0f       	add	r30, r20
    2bfa:	f5 2f       	mov	r31, r21
    2bfc:	f1 1d       	adc	r31, r1
    2bfe:	e5 5c       	subi	r30, 0xC5	; 197
    2c00:	f9 4f       	sbci	r31, 0xF9	; 249
    2c02:	e4 91       	lpm	r30, Z
    2c04:	2e 17       	cp	r18, r30
    2c06:	40 f4       	brcc	.+16     	; 0x2c18 <__vector_30+0xb6>
    2c08:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	e7 58       	subi	r30, 0x87	; 135
    2c10:	f8 4b       	sbci	r31, 0xB8	; 184
    2c12:	20 81       	ld	r18, Z
    2c14:	2f 5f       	subi	r18, 0xFF	; 255
    2c16:	20 83       	st	Z, r18
    2c18:	81 50       	subi	r24, 0x01	; 1
    2c1a:	85 30       	cpi	r24, 0x05	; 5
    2c1c:	10 f5       	brcc	.+68     	; 0x2c62 <__vector_30+0x100>
    2c1e:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <currentSettingLeft>
    2c22:	86 30       	cpi	r24, 0x06	; 6
    2c24:	f0 f4       	brcc	.+60     	; 0x2c62 <__vector_30+0x100>
    2c26:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <currentSettingLeft>
    2c2a:	80 fd       	sbrc	r24, 0
    2c2c:	1a c0       	rjmp	.+52     	; 0x2c62 <__vector_30+0x100>
    2c2e:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	e7 58       	subi	r30, 0x87	; 135
    2c36:	f8 4b       	sbci	r31, 0xB8	; 184
    2c38:	20 81       	ld	r18, Z
    2c3a:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	e6 58       	subi	r30, 0x86	; 134
    2c42:	f8 4b       	sbci	r31, 0xB8	; 184
    2c44:	80 81       	ld	r24, Z
    2c46:	82 17       	cp	r24, r18
    2c48:	60 f4       	brcc	.+24     	; 0x2c62 <__vector_30+0x100>
    2c4a:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	e7 58       	subi	r30, 0x87	; 135
    2c52:	f8 4b       	sbci	r31, 0xB8	; 184
    2c54:	80 81       	ld	r24, Z
    2c56:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	e6 58       	subi	r30, 0x86	; 134
    2c5e:	f8 4b       	sbci	r31, 0xB8	; 184
    2c60:	80 83       	st	Z, r24
    2c62:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    2c66:	81 60       	ori	r24, 0x01	; 1
    2c68:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
    2c6c:	10 92 57 41 	sts	0x4157, r1	; 0x804157 <__vector_30::EncL_Val>
    2c70:	94 30       	cpi	r25, 0x04	; 4
    2c72:	0c f4       	brge	.+2      	; 0x2c76 <__vector_30+0x114>
    2c74:	72 c0       	rjmp	.+228    	; 0x2d5a <__vector_30+0x1f8>
    2c76:	e0 91 8a 41 	lds	r30, 0x418A	; 0x80418a <currentSettingRight>
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	ef 57       	subi	r30, 0x7F	; 127
    2c7e:	f8 4b       	sbci	r31, 0xB8	; 184
    2c80:	20 81       	ld	r18, Z
    2c82:	e0 91 8a 41 	lds	r30, 0x418A	; 0x80418a <currentSettingRight>
    2c86:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    2c8a:	38 e0       	ldi	r19, 0x08	; 8
    2c8c:	83 9f       	mul	r24, r19
    2c8e:	c0 01       	movw	r24, r0
    2c90:	11 24       	eor	r1, r1
    2c92:	e8 0f       	add	r30, r24
    2c94:	f9 2f       	mov	r31, r25
    2c96:	f1 1d       	adc	r31, r1
    2c98:	ec 5a       	subi	r30, 0xAC	; 172
    2c9a:	f6 4f       	sbci	r31, 0xF6	; 246
    2c9c:	e4 91       	lpm	r30, Z
    2c9e:	2e 17       	cp	r18, r30
    2ca0:	40 f4       	brcc	.+16     	; 0x2cb2 <__vector_30+0x150>
    2ca2:	e0 91 8a 41 	lds	r30, 0x418A	; 0x80418a <currentSettingRight>
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	ef 57       	subi	r30, 0x7F	; 127
    2caa:	f8 4b       	sbci	r31, 0xB8	; 184
    2cac:	80 81       	ld	r24, Z
    2cae:	8f 5f       	subi	r24, 0xFF	; 255
    2cb0:	80 83       	st	Z, r24
    2cb2:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    2cb6:	81 60       	ori	r24, 0x01	; 1
    2cb8:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
    2cbc:	10 92 56 41 	sts	0x4156, r1	; 0x804156 <__vector_30::EncR_Val>
    2cc0:	ff 91       	pop	r31
    2cc2:	ef 91       	pop	r30
    2cc4:	9f 91       	pop	r25
    2cc6:	8f 91       	pop	r24
    2cc8:	5f 91       	pop	r21
    2cca:	4f 91       	pop	r20
    2ccc:	3f 91       	pop	r19
    2cce:	2f 91       	pop	r18
    2cd0:	0f 90       	pop	r0
    2cd2:	0b be       	out	0x3b, r0	; 59
    2cd4:	0f 90       	pop	r0
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	0f 90       	pop	r0
    2cda:	1f 90       	pop	r1
    2cdc:	18 95       	reti
    2cde:	8d 3f       	cpi	r24, 0xFD	; 253
    2ce0:	3c f6       	brge	.-114    	; 0x2c70 <__vector_30+0x10e>
    2ce2:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	e7 58       	subi	r30, 0x87	; 135
    2cea:	f8 4b       	sbci	r31, 0xB8	; 184
    2cec:	80 81       	ld	r24, Z
    2cee:	88 23       	and	r24, r24
    2cf0:	41 f0       	breq	.+16     	; 0x2d02 <__vector_30+0x1a0>
    2cf2:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	e7 58       	subi	r30, 0x87	; 135
    2cfa:	f8 4b       	sbci	r31, 0xB8	; 184
    2cfc:	80 81       	ld	r24, Z
    2cfe:	81 50       	subi	r24, 0x01	; 1
    2d00:	80 83       	st	Z, r24
    2d02:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    2d06:	81 50       	subi	r24, 0x01	; 1
    2d08:	82 30       	cpi	r24, 0x02	; 2
    2d0a:	08 f0       	brcs	.+2      	; 0x2d0e <__vector_30+0x1ac>
    2d0c:	aa cf       	rjmp	.-172    	; 0x2c62 <__vector_30+0x100>
    2d0e:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <currentSettingLeft>
    2d12:	86 30       	cpi	r24, 0x06	; 6
    2d14:	08 f0       	brcs	.+2      	; 0x2d18 <__vector_30+0x1b6>
    2d16:	a5 cf       	rjmp	.-182    	; 0x2c62 <__vector_30+0x100>
    2d18:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <currentSettingLeft>
    2d1c:	80 ff       	sbrs	r24, 0
    2d1e:	a1 cf       	rjmp	.-190    	; 0x2c62 <__vector_30+0x100>
    2d20:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	e7 58       	subi	r30, 0x87	; 135
    2d28:	f8 4b       	sbci	r31, 0xB8	; 184
    2d2a:	20 81       	ld	r18, Z
    2d2c:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    2d30:	e1 50       	subi	r30, 0x01	; 1
    2d32:	ff 0b       	sbc	r31, r31
    2d34:	e7 58       	subi	r30, 0x87	; 135
    2d36:	f8 4b       	sbci	r31, 0xB8	; 184
    2d38:	80 81       	ld	r24, Z
    2d3a:	28 17       	cp	r18, r24
    2d3c:	08 f0       	brcs	.+2      	; 0x2d40 <__vector_30+0x1de>
    2d3e:	91 cf       	rjmp	.-222    	; 0x2c62 <__vector_30+0x100>
    2d40:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	e7 58       	subi	r30, 0x87	; 135
    2d48:	f8 4b       	sbci	r31, 0xB8	; 184
    2d4a:	80 81       	ld	r24, Z
    2d4c:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    2d50:	e1 50       	subi	r30, 0x01	; 1
    2d52:	ff 0b       	sbc	r31, r31
    2d54:	e7 58       	subi	r30, 0x87	; 135
    2d56:	f8 4b       	sbci	r31, 0xB8	; 184
    2d58:	83 cf       	rjmp	.-250    	; 0x2c60 <__vector_30+0xfe>
    2d5a:	9d 3f       	cpi	r25, 0xFD	; 253
    2d5c:	0c f0       	brlt	.+2      	; 0x2d60 <__vector_30+0x1fe>
    2d5e:	b0 cf       	rjmp	.-160    	; 0x2cc0 <__vector_30+0x15e>
    2d60:	e0 91 8a 41 	lds	r30, 0x418A	; 0x80418a <currentSettingRight>
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	ef 57       	subi	r30, 0x7F	; 127
    2d68:	f8 4b       	sbci	r31, 0xB8	; 184
    2d6a:	80 81       	ld	r24, Z
    2d6c:	88 23       	and	r24, r24
    2d6e:	09 f4       	brne	.+2      	; 0x2d72 <__vector_30+0x210>
    2d70:	a0 cf       	rjmp	.-192    	; 0x2cb2 <__vector_30+0x150>
    2d72:	e0 91 8a 41 	lds	r30, 0x418A	; 0x80418a <currentSettingRight>
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	ef 57       	subi	r30, 0x7F	; 127
    2d7a:	f8 4b       	sbci	r31, 0xB8	; 184
    2d7c:	80 81       	ld	r24, Z
    2d7e:	81 50       	subi	r24, 0x01	; 1
    2d80:	97 cf       	rjmp	.-210    	; 0x2cb0 <__vector_30+0x14e>

00002d82 <global constructors keyed to 65535_0_DriftAnimate_V2.ino.cpp.o.3535>:
_GLOBAL__I_65535_0_DriftAnimate_V2.ino.cpp.o.3535():
    2d82:	0f 93       	push	r16
    2d84:	1f 93       	push	r17
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	ef e8       	ldi	r30, 0x8F	; 143
    2d8c:	f7 e4       	ldi	r31, 0x47	; 71
    2d8e:	12 82       	std	Z+2, r1	; 0x02
    2d90:	13 82       	std	Z+3, r1	; 0x03
    2d92:	88 ee       	ldi	r24, 0xE8	; 232
    2d94:	93 e0       	ldi	r25, 0x03	; 3
    2d96:	a0 e0       	ldi	r26, 0x00	; 0
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	84 83       	std	Z+4, r24	; 0x04
    2d9c:	95 83       	std	Z+5, r25	; 0x05
    2d9e:	a6 83       	std	Z+6, r26	; 0x06
    2da0:	b7 83       	std	Z+7, r27	; 0x07
    2da2:	81 e6       	ldi	r24, 0x61	; 97
    2da4:	90 e4       	ldi	r25, 0x40	; 64
    2da6:	80 83       	st	Z, r24
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	98 e0       	ldi	r25, 0x08	; 8
    2dae:	84 87       	std	Z+12, r24	; 0x0c
    2db0:	95 87       	std	Z+13, r25	; 0x0d
    2db2:	8c ea       	ldi	r24, 0xAC	; 172
    2db4:	99 e0       	ldi	r25, 0x09	; 9
    2db6:	86 87       	std	Z+14, r24	; 0x0e
    2db8:	97 87       	std	Z+15, r25	; 0x0f
    2dba:	02 e0       	ldi	r16, 0x02	; 2
    2dbc:	00 8b       	std	Z+16, r16	; 0x10
    2dbe:	11 e0       	ldi	r17, 0x01	; 1
    2dc0:	11 8b       	std	Z+17, r17	; 0x11
    2dc2:	12 8a       	std	Z+18, r1	; 0x12
    2dc4:	c5 e1       	ldi	r28, 0x15	; 21
    2dc6:	de e4       	ldi	r29, 0x4E	; 78
    2dc8:	1a 82       	std	Y+2, r1	; 0x02
    2dca:	1b 82       	std	Y+3, r1	; 0x03
    2dcc:	8d ec       	ldi	r24, 0xCD	; 205
    2dce:	90 e4       	ldi	r25, 0x40	; 64
    2dd0:	88 83       	st	Y, r24
    2dd2:	99 83       	std	Y+1, r25	; 0x01
    2dd4:	1f 82       	std	Y+7, r1	; 0x07
    2dd6:	18 86       	std	Y+8, r1	; 0x08
    2dd8:	80 ed       	ldi	r24, 0xD0	; 208
    2dda:	97 e0       	ldi	r25, 0x07	; 7
    2ddc:	a0 e0       	ldi	r26, 0x00	; 0
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	88 8b       	std	Y+16, r24	; 0x10
    2de2:	99 8b       	std	Y+17, r25	; 0x11
    2de4:	aa 8b       	std	Y+18, r26	; 0x12
    2de6:	bb 8b       	std	Y+19, r27	; 0x13
    2de8:	86 e2       	ldi	r24, 0x26	; 38
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	a0 e0       	ldi	r26, 0x00	; 0
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	8c 8b       	std	Y+20, r24	; 0x14
    2df2:	9d 8b       	std	Y+21, r25	; 0x15
    2df4:	ae 8b       	std	Y+22, r26	; 0x16
    2df6:	bf 8b       	std	Y+23, r27	; 0x17
    2df8:	1c 86       	std	Y+12, r1	; 0x0c
    2dfa:	1d 86       	std	Y+13, r1	; 0x0d
    2dfc:	1e 86       	std	Y+14, r1	; 0x0e
    2dfe:	1f 86       	std	Y+15, r1	; 0x0f
    2e00:	1b 86       	std	Y+11, r1	; 0x0b
    2e02:	0e 94 89 07 	call	0xf12	; 0xf12 <micros>
    2e06:	68 8f       	std	Y+24, r22	; 0x18
    2e08:	79 8f       	std	Y+25, r23	; 0x19
    2e0a:	8a 8f       	std	Y+26, r24	; 0x1a
    2e0c:	9b 8f       	std	Y+27, r25	; 0x1b
    2e0e:	1c 8e       	std	Y+28, r1	; 0x1c
    2e10:	1d 8e       	std	Y+29, r1	; 0x1d
    2e12:	1e 8e       	std	Y+30, r1	; 0x1e
    2e14:	1f 8e       	std	Y+31, r1	; 0x1f
    2e16:	83 ee       	ldi	r24, 0xE3	; 227
    2e18:	90 e4       	ldi	r25, 0x40	; 64
    2e1a:	88 83       	st	Y, r24
    2e1c:	99 83       	std	Y+1, r25	; 0x01
    2e1e:	8a e1       	ldi	r24, 0x1A	; 26
    2e20:	88 a3       	std	Y+32, r24	; 0x20
    2e22:	8d e1       	ldi	r24, 0x1D	; 29
    2e24:	8a a3       	std	Y+34, r24	; 0x22
    2e26:	8b e1       	ldi	r24, 0x1B	; 27
    2e28:	89 a3       	std	Y+33, r24	; 0x21
    2e2a:	86 e1       	ldi	r24, 0x16	; 22
    2e2c:	8b a3       	std	Y+35, r24	; 0x23
    2e2e:	87 e1       	ldi	r24, 0x17	; 23
    2e30:	8c a3       	std	Y+36, r24	; 0x24
    2e32:	88 e1       	ldi	r24, 0x18	; 24
    2e34:	8d a3       	std	Y+37, r24	; 0x25
    2e36:	89 e1       	ldi	r24, 0x19	; 25
    2e38:	8e a3       	std	Y+38, r24	; 0x26
    2e3a:	8f ef       	ldi	r24, 0xFF	; 255
    2e3c:	8f a3       	std	Y+39, r24	; 0x27
    2e3e:	88 a7       	std	Y+40, r24	; 0x28
    2e40:	e2 e0       	ldi	r30, 0x02	; 2
    2e42:	fe e4       	ldi	r31, 0x4E	; 78
    2e44:	15 82       	std	Z+5, r1	; 0x05
    2e46:	86 e2       	ldi	r24, 0x26	; 38
    2e48:	98 e4       	ldi	r25, 0x48	; 72
    2e4a:	86 83       	std	Z+6, r24	; 0x06
    2e4c:	97 83       	std	Z+7, r25	; 0x07
    2e4e:	14 86       	std	Z+12, r1	; 0x0c
    2e50:	15 86       	std	Z+13, r1	; 0x0d
    2e52:	16 86       	std	Z+14, r1	; 0x0e
    2e54:	17 86       	std	Z+15, r1	; 0x0f
    2e56:	13 87       	std	Z+11, r17	; 0x0b
    2e58:	10 87       	std	Z+8, r17	; 0x08
    2e5a:	11 86       	std	Z+9, r1	; 0x09
    2e5c:	02 87       	std	Z+10, r16	; 0x0a
    2e5e:	8c ed       	ldi	r24, 0xDC	; 220
    2e60:	95 e0       	ldi	r25, 0x05	; 5
    2e62:	82 83       	std	Z+2, r24	; 0x02
    2e64:	93 83       	std	Z+3, r25	; 0x03
    2e66:	84 ef       	ldi	r24, 0xF4	; 244
    2e68:	91 e0       	ldi	r25, 0x01	; 1
    2e6a:	80 83       	st	Z, r24
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	86 e0       	ldi	r24, 0x06	; 6
    2e70:	84 83       	std	Z+4, r24	; 0x04
    2e72:	84 e0       	ldi	r24, 0x04	; 4
    2e74:	94 e0       	ldi	r25, 0x04	; 4
    2e76:	80 8b       	std	Z+16, r24	; 0x10
    2e78:	91 8b       	std	Z+17, r25	; 0x11
    2e7a:	80 e4       	ldi	r24, 0x40	; 64
    2e7c:	82 8b       	std	Z+18, r24	; 0x12
    2e7e:	df 91       	pop	r29
    2e80:	cf 91       	pop	r28
    2e82:	1f 91       	pop	r17
    2e84:	0f 91       	pop	r16
    2e86:	08 95       	ret

00002e88 <main>:
main():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	62 97       	sbiw	r28, 0x12	; 18
    2e92:	cd bf       	out	0x3d, r28	; 61
    2e94:	de bf       	out	0x3e, r29	; 62
init_clock():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1213
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x0B << 2));
    #elif (F_CPU == 28000000)
      /* Overclocked - generally quite reliable at room temperature, but a dumb frequency (see PWM section) */
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x0A << 2));
    #elif (F_CPU == 24000000)
      _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x09 << 2));
    2e96:	88 ed       	ldi	r24, 0xD8	; 216
    2e98:	94 e2       	ldi	r25, 0x24	; 36
    2e9a:	84 bf       	out	0x34, r24	; 52
    2e9c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
init_TCA0():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1460
}

void __attribute__((weak)) init_TCA0() {
  /* TCA0_PINS from pins_arduino.h */
  /* Enable Split Mode to get more PWM pins, since analogWrite() only provides 8-bit PWM anyway*/
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
    2ea0:	21 e0       	ldi	r18, 0x01	; 1
    2ea2:	20 93 03 0a 	sts	0x0A03, r18	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7e0a03>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1465

  //Only 1 WGM is available in split mode

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
    2ea6:	8e ef       	ldi	r24, 0xFE	; 254
    2ea8:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7e0a26>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1466
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
    2eac:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7e0a27>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1497
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) //use 64 divider unless it's 5 MHz or under
    #if defined(MILLIS_USE_TIMERA0) && (TIME_TRACKING_TIMER_DIVIDER != 64)
      #error "wiring.c and timers.h want to set millis timer TCA0 to different divider"
    #endif
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
    2eb0:	9b e0       	ldi	r25, 0x0B	; 11
    2eb2:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7e0a00>
init_timers():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1446
uint8_t PeripheralControl = 0xFF;

void init_timers() {
  init_TCA0();
  #if (defined(TCA1))
    PORTMUX.TCAROUTEA = TCA0_PINS | TCA1_PINS;
    2eb6:	32 e0       	ldi	r19, 0x02	; 2
    2eb8:	30 93 e6 05 	sts	0x05E6, r19	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
init_TCA1():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1515

#if defined(TCA1)
void __attribute__((weak)) init_TCA1() {

  /* Enable Split Mode */
  TCA1.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
    2ebc:	20 93 43 0a 	sts	0x0A43, r18	; 0x800a43 <__TEXT_REGION_LENGTH__+0x7e0a43>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1518

  /* Period setting, 8-bit register in SPLIT mode */
  TCA1.SPLIT.LPER    = PWM_TIMER_PERIOD;
    2ec0:	80 93 66 0a 	sts	0x0A66, r24	; 0x800a66 <__TEXT_REGION_LENGTH__+0x7e0a66>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1519
  TCA1.SPLIT.HPER    = PWM_TIMER_PERIOD;
    2ec4:	80 93 67 0a 	sts	0x0A67, r24	; 0x800a67 <__TEXT_REGION_LENGTH__+0x7e0a67>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1530
    TCA1.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) //use 64 divider unless it's 5 MHz or under
    #if defined(MILLIS_USE_TIMERA1) && (TIME_TRACKING_TIMER_DIVIDER != 64)
      #error "wiring.c and timers.h want to set millis timer TCA1 to different divider"
    #endif
    TCA1.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
    2ec8:	90 93 40 0a 	sts	0x0A40, r25	; 0x800a40 <__TEXT_REGION_LENGTH__+0x7e0a40>
init_TCBs():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1552
 * Set up routing (defined in pins_arduino.h)
 * Notice how there's no semicolon until after the preprocessor conditionals.
 * In other words, that's all one line.
 */

  PORTMUX.TCBROUTEA = 0
    2ecc:	90 93 e7 05 	sts	0x05E7, r25	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7e05e7>
main():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1571
                        | TCB4_PINS
  #endif
        ;
  // Start with TCB0 - we take advantage of the fact that we can get a pointer
  // to TCB09's struct, and increment it to go through all of them.
  TCB_t *timer_B = (TCB_t *)&TCB0;
    2ed0:	e0 e0       	ldi	r30, 0x00	; 0
    2ed2:	fb e0       	ldi	r31, 0x0B	; 11
init_TCBs():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1591
  #endif

  // Timer B Setup loop for TCB[0:end]
  do {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
    2ed4:	37 e0       	ldi	r19, 0x07	; 7
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1594

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD; // TOP = 254 see section at start
    2ed6:	9e ef       	ldi	r25, 0xFE	; 254
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1597
    // default duty 50% - we have to set something here because of the
    // errata, otherwise CCMP will not get the CCMPL either.
    timer_B->CCMPH = PWM_TIMER_COMPARE;
    2ed8:	20 e8       	ldi	r18, 0x80	; 128
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1600

    // Use TCA clock (250kHz, +/- 50%) and enable
    timer_B->CTRLA = (TCB_CLKSEL_TCA0_gc) | (TCB_ENABLE_bm);
    2eda:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1591
  #endif

  // Timer B Setup loop for TCB[0:end]
  do {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
    2edc:	31 83       	std	Z+1, r19	; 0x01
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1594

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD; // TOP = 254 see section at start
    2ede:	94 87       	std	Z+12, r25	; 0x0c
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1597
    // default duty 50% - we have to set something here because of the
    // errata, otherwise CCMP will not get the CCMPL either.
    timer_B->CCMPH = PWM_TIMER_COMPARE;
    2ee0:	25 87       	std	Z+13, r18	; 0x0d
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1600

    // Use TCA clock (250kHz, +/- 50%) and enable
    timer_B->CTRLA = (TCB_CLKSEL_TCA0_gc) | (TCB_ENABLE_bm);
    2ee2:	80 83       	st	Z, r24
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1603

    // Increment pointer to next TCB instance
    timer_B++;
    2ee4:	70 96       	adiw	r30, 0x10	; 16
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1606

    // Stop when pointing to the last timer.
  } while (timer_B <= timer_B_end);
    2ee6:	e0 34       	cpi	r30, 0x40	; 64
    2ee8:	4b e0       	ldi	r20, 0x0B	; 11
    2eea:	f4 07       	cpc	r31, r20
    2eec:	b9 f7       	brne	.-18     	; 0x2edc <main+0x54>
init_TCD0():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1643
 * prescaler is 1. Similarly, it cannot be enabled right after disabling it - the ENRDY bit must*
 * be set in the status register. We skip checking this here because, as we do many places the  *
 * initiialization functions assume that the chip starts from a reset condition.               */

void __attribute__((weak)) init_TCD0() {
  TCD0.CMPACLR  = 0x0FFF;
    2eee:	4f ef       	ldi	r20, 0xFF	; 255
    2ef0:	5f e0       	ldi	r21, 0x0F	; 15
    2ef2:	40 93 aa 0b 	sts	0x0BAA, r20	; 0x800baa <__TEXT_REGION_LENGTH__+0x7e0baa>
    2ef6:	50 93 ab 0b 	sts	0x0BAB, r21	; 0x800bab <__TEXT_REGION_LENGTH__+0x7e0bab>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1647
  // Match with CMPBCLR clears all outputs. For normal PWM this just needs to be higher than
  // it will count to - so set to maximum (other settings used for non-overlapping PWM and
  // other advanced functionality)
  TCD0.CTRLC    = 0x80;                   // WOD outputs PWM B, WOC outputs PWM A
    2efa:	20 93 82 0b 	sts	0x0B82, r18	; 0x800b82 <__TEXT_REGION_LENGTH__+0x7e0b82>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1649
  // That doesn't need to be that way, but I declare that that's all we support through analogWrite()
  TCD0.CTRLB    = TCD_WGMODE_ONERAMP_gc;
    2efe:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <__TEXT_REGION_LENGTH__+0x7e0b81>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1654
  // One ramp or dual slope are the only options that are viable to reproduce classic behavior.
  // and the latter is incompatible with using it as millis timer, and we want to share as much
  // code as we can between the TCD0 and non-TCD0 millis. IIRC with dual slope, one value needs
  // to be inverted and the other does not.
  TCD0.CMPBCLR  = TIMERD0_TOP_SETTING;
    2f02:	4b ef       	ldi	r20, 0xFB	; 251
    2f04:	53 e0       	ldi	r21, 0x03	; 3
    2f06:	40 93 ae 0b 	sts	0x0BAE, r20	; 0x800bae <__TEXT_REGION_LENGTH__+0x7e0bae>
    2f0a:	50 93 af 0b 	sts	0x0BAF, r21	; 0x800baf <__TEXT_REGION_LENGTH__+0x7e0baf>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1664
  #if (defined(TIMERD0_SET_CLOCK) && TIMERD0_SET_CLOCK == 0x08)
    _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, (0x05 << 2));
  #endif


  TCD0.CTRLA    = TIMERD0_CLOCK_SETTING | TCD_ENABLE_bm;
    2f0e:	91 e7       	ldi	r25, 0x71	; 113
    2f10:	90 93 80 0b 	sts	0x0B80, r25	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
init_ADC0():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1105
    #elif F_CPU >= 36000000
      ADC0.CTRLC = ADC_PRESC_DIV28_gc; //1.286 @ 36 MHz
    #elif F_CPU >  28000000
      ADC0.CTRLC = ADC_PRESC_DIV24_gc; //1.33 @ 32 MHz, 1.
    #elif F_CPU >= 24000000
      ADC0.CTRLC = ADC_PRESC_DIV20_gc; //1.2 @ 24, 1.25 @ 25, 1.4 @ 28  MHz
    2f14:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1117
    #elif F_CPU >= 4000000
      ADC0.CTRLC = ADC_PRESC_DIV4_gc;  //1 MHz
    #else  // 1 MHz / 2 = 500 kHz - the lowest setting
      ADC0.CTRLC = ADC_PRESC_DIV2_gc;
    #endif
    ADC0.SAMPCTRL = 14; //16 ADC clock sampling time - should be about the same amount of *time* as originally?
    2f18:	9e e0       	ldi	r25, 0x0E	; 14
    2f1a:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x7e0605>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1119
    // This is WAY conservative! We could drop it down...
    ADC0.CTRLD = ADC_INITDLY_DLY64_gc; //VREF can take 50uS to become ready, and we're running the ADC clock
    2f1e:	90 e6       	ldi	r25, 0x60	; 96
    2f20:	90 93 03 06 	sts	0x0603, r25	; 0x800603 <__TEXT_REGION_LENGTH__+0x7e0603>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1122
    // at around 1 MHz, so we want 64 ADC clocks when we start up a new reference so we don't get bad readings at first
    /* Enable ADC */
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_10BIT_gc;
    2f24:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7e0600>
analogReference():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:124


void analogReference(uint8_t mode) {
  check_valid_analog_ref(mode);
  if (mode < 7 && mode !=4) {
    VREF.ADC0REF = (VREF.ADC0REF & ~(VREF_REFSEL_gm))|(mode);
    2f28:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2f2c:	88 7f       	andi	r24, 0xF8	; 248
    2f2e:	85 60       	ori	r24, 0x05	; 5
    2f30:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
DACReference():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:131
}

void DACReference(uint8_t mode) {
  check_valid_analog_ref(mode);
  if (mode < 7 && mode !=4) {
    VREF.DAC0REF = (VREF.DAC0REF & ~(VREF_REFSEL_gm))|(mode);
    2f34:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2f38:	88 7f       	andi	r24, 0xF8	; 248
    2f3a:	85 60       	ori	r24, 0x05	; 5
    2f3c:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
init_millis():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1042
      //RTC.CLKSEL = 0; this is the power on value
    #endif
      RTC.INTCTRL = 0x01; //enable overflow interrupt
      RTC.CTRLA = (RTC_RUNSTDBY_bm|RTC_RTCEN_bm|RTC_PRESCALER_DIV32_gc);//fire it up, prescale by 32.
    #else //It's a type b timer
      _timer->CCMP = TIME_TRACKING_TIMER_PERIOD;
    2f40:	8f ed       	ldi	r24, 0xDF	; 223
    2f42:	9e e2       	ldi	r25, 0x2E	; 46
    2f44:	80 93 2c 0b 	sts	0x0B2C, r24	; 0x800b2c <__TEXT_REGION_LENGTH__+0x7e0b2c>
    2f48:	90 93 2d 0b 	sts	0x0B2D, r25	; 0x800b2d <__TEXT_REGION_LENGTH__+0x7e0b2d>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1044
      // Enable timer interrupt, but clear the rest of register
      _timer->INTCTRL = TCB_CAPT_bm;
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	80 93 25 0b 	sts	0x0B25, r24	; 0x800b25 <__TEXT_REGION_LENGTH__+0x7e0b25>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1046
      // Clear timer mode (since it will have been set as PWM by init())
      _timer->CTRLB = 0;
    2f52:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <__TEXT_REGION_LENGTH__+0x7e0b21>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring.c:1048
      // CLK_PER/1 is 0b00, . CLK_PER/2 is 0b01, so bitwise OR of valid divider with enable works
      _timer->CTRLA = TIME_TRACKING_TIMER_DIVIDER|TCB_ENABLE_bm;  // Keep this last before enabling interrupts to ensure tracking as accurate as possible
    2f56:	93 e0       	ldi	r25, 0x03	; 3
    2f58:	90 93 20 0b 	sts	0x0B20, r25	; 0x800b20 <__TEXT_REGION_LENGTH__+0x7e0b20>
main():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/main.cpp:53
  onBeforeInit(); //Emnpty callback called before init but after the .init stuff. First normal code executed
  init(); //Interrupts are turned on just prior to init() returning.
  initVariant();
  if (!onAfterInit()) sei();  //enable interrupts.
    2f5c:	78 94       	sei
_pinMode():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:228
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
  //if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
    2f5e:	90 e4       	ldi	r25, 0x40	; 64
    2f60:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
    2f64:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
    2f68:	92 e0       	ldi	r25, 0x02	; 2
    2f6a:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
    2f6e:	20 93 01 04 	sts	0x0401, r18	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:233
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    2f72:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
    cli();                              /* Interrupts off for PINnCTRL stuff */
    2f74:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    2f76:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <__TEXT_REGION_LENGTH__+0x7e0442>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:237
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    2f7a:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <__TEXT_REGION_LENGTH__+0x7e0450>
    2f7e:	28 60       	ori	r18, 0x08	; 8
    2f80:	20 93 50 04 	sts	0x0450, r18	; 0x800450 <__TEXT_REGION_LENGTH__+0x7e0450>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
      port->OUTSET = bit_mask;          /* emulate setting of the port output register on classic AVR */
    2f84:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7e0445>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:243
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
      port->OUTCLR = bit_mask;          /* emulate clearing of the port output register on classic AVR */
    }
    SREG = status;                      /* Restore state */
    2f88:	3f bf       	out	0x3f, r19	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:233
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    2f8a:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
    cli();                              /* Interrupts off for PINnCTRL stuff */
    2f8c:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    2f8e:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <__TEXT_REGION_LENGTH__+0x7e0442>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:237
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    2f92:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <__TEXT_REGION_LENGTH__+0x7e0451>
    2f96:	88 60       	ori	r24, 0x08	; 8
    2f98:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <__TEXT_REGION_LENGTH__+0x7e0451>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
      port->OUTSET = bit_mask;          /* emulate setting of the port output register on classic AVR */
    2f9c:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <__TEXT_REGION_LENGTH__+0x7e0445>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:243
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
      port->OUTCLR = bit_mask;          /* emulate clearing of the port output register on classic AVR */
    }
    SREG = status;                      /* Restore state */
    2fa0:	2f bf       	out	0x3f, r18	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:233
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    2fa2:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
    cli();                              /* Interrupts off for PINnCTRL stuff */
    2fa4:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    2fa6:	90 e1       	ldi	r25, 0x10	; 16
    2fa8:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <__TEXT_REGION_LENGTH__+0x7e0422>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:237
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    2fac:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x7e0434>
    2fb0:	88 60       	ori	r24, 0x08	; 8
    2fb2:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x7e0434>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
      port->OUTSET = bit_mask;          /* emulate setting of the port output register on classic AVR */
    2fb6:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <__TEXT_REGION_LENGTH__+0x7e0425>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:243
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
      port->OUTCLR = bit_mask;          /* emulate clearing of the port output register on classic AVR */
    }
    SREG = status;                      /* Restore state */
    2fba:	2f bf       	out	0x3f, r18	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:233
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    2fbc:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
    cli();                              /* Interrupts off for PINnCTRL stuff */
    2fbe:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    2fc0:	94 e0       	ldi	r25, 0x04	; 4
    2fc2:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <__TEXT_REGION_LENGTH__+0x7e0442>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:237
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    2fc6:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <__TEXT_REGION_LENGTH__+0x7e0452>
    2fca:	88 60       	ori	r24, 0x08	; 8
    2fcc:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <__TEXT_REGION_LENGTH__+0x7e0452>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
      port->OUTSET = bit_mask;          /* emulate setting of the port output register on classic AVR */
    2fd0:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <__TEXT_REGION_LENGTH__+0x7e0445>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:243
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
      port->OUTCLR = bit_mask;          /* emulate clearing of the port output register on classic AVR */
    }
    SREG = status;                      /* Restore state */
    2fd4:	2f bf       	out	0x3f, r18	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:233
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    2fd6:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
    cli();                              /* Interrupts off for PINnCTRL stuff */
    2fd8:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    2fda:	88 e0       	ldi	r24, 0x08	; 8
    2fdc:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <__TEXT_REGION_LENGTH__+0x7e0442>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:237
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    2fe0:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x7e0453>
    2fe4:	98 60       	ori	r25, 0x08	; 8
    2fe6:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <__TEXT_REGION_LENGTH__+0x7e0453>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
      port->OUTSET = bit_mask;          /* emulate setting of the port output register on classic AVR */
    2fea:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7e0445>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:243
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
      port->OUTCLR = bit_mask;          /* emulate clearing of the port output register on classic AVR */
    }
    SREG = status;                      /* Restore state */
    2fee:	2f bf       	out	0x3f, r18	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:233
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    2ff0:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
    cli();                              /* Interrupts off for PINnCTRL stuff */
    2ff2:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    2ff4:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x7e0422>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:237
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    2ff8:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x7e0433>
    2ffc:	98 60       	ori	r25, 0x08	; 8
    2ffe:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <__TEXT_REGION_LENGTH__+0x7e0433>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
      port->OUTSET = bit_mask;          /* emulate setting of the port output register on classic AVR */
    3002:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x7e0425>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:243
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
      port->OUTCLR = bit_mask;          /* emulate clearing of the port output register on classic AVR */
    }
    SREG = status;                      /* Restore state */
    3006:	2f bf       	out	0x3f, r18	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:233
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
    uint8_t status = SREG;              /* Save state */
    3008:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:234
    cli();                              /* Interrupts off for PINnCTRL stuff */
    300a:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:235
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    300c:	90 e2       	ldi	r25, 0x20	; 32
    300e:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <__TEXT_REGION_LENGTH__+0x7e0422>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:237
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
    3012:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x7e0435>
    3016:	88 60       	ori	r24, 0x08	; 8
    3018:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x7e0435>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:238
      port->OUTSET = bit_mask;          /* emulate setting of the port output register on classic AVR */
    301c:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <__TEXT_REGION_LENGTH__+0x7e0425>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:243
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
      port->OUTCLR = bit_mask;          /* emulate clearing of the port output register on classic AVR */
    }
    SREG = status;                      /* Restore state */
    3020:	2f bf       	out	0x3f, r18	; 63
setupPCINT():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:982
}

#define debugSerial Serial0

void setupPCINT() {
  if (!MVIO.STATUS) {
    3022:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3026:	81 11       	cpse	r24, r1
    3028:	4f c0       	rjmp	.+158    	; 0x30c8 <main+0x240>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:983
    uint32_t start = millis();
    302a:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
    302e:	4b 01       	movw	r8, r22
    3030:	5c 01       	movw	r10, r24
analogRead():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:143
    pin = digitalPinToAnalogInput(pin);
    if(pin == NOT_A_PIN) return -1;

  }
  /* Select channel */
  ADC0.MUXPOS = ((pin & 0x7F) << ADC_MUXPOS_gp);
    3032:	15 e4       	ldi	r17, 0x45	; 69
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:147
  /* Reference should be already set up */

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
    3034:	01 e0       	ldi	r16, 0x01	; 1
setupPCINT():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:984
    while ((!MVIO.STATUS) && millis() - start > 2000) {
    3036:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    303a:	81 11       	cpse	r24, r1
    303c:	45 c0       	rjmp	.+138    	; 0x30c8 <main+0x240>
    303e:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
    3042:	68 19       	sub	r22, r8
    3044:	79 09       	sbc	r23, r9
    3046:	8a 09       	sbc	r24, r10
    3048:	9b 09       	sbc	r25, r11
    304a:	61 3d       	cpi	r22, 0xD1	; 209
    304c:	77 40       	sbci	r23, 0x07	; 7
    304e:	81 05       	cpc	r24, r1
    3050:	91 05       	cpc	r25, r1
    3052:	d0 f1       	brcs	.+116    	; 0x30c8 <main+0x240>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:985
      if (millis() - start > 1000) {
    3054:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
    3058:	68 19       	sub	r22, r8
    305a:	79 09       	sbc	r23, r9
    305c:	8a 09       	sbc	r24, r10
    305e:	9b 09       	sbc	r25, r11
    3060:	69 3e       	cpi	r22, 0xE9	; 233
    3062:	73 40       	sbci	r23, 0x03	; 3
    3064:	81 05       	cpc	r24, r1
    3066:	91 05       	cpc	r25, r1
    3068:	30 f3       	brcs	.-52     	; 0x3036 <main+0x1ae>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:986
        Serial.println("MVIO failed to initialize? No VDDIO2?");
    306a:	86 e0       	ldi	r24, 0x06	; 6
    306c:	91 e4       	ldi	r25, 0x41	; 65
    306e:	7a d8       	rcall	.-3852   	; 0x2164 <Print::println(char const*) [clone .constprop.25]>
analogRead():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:143
    pin = digitalPinToAnalogInput(pin);
    if(pin == NOT_A_PIN) return -1;

  }
  /* Select channel */
  ADC0.MUXPOS = ((pin & 0x7F) << ADC_MUXPOS_gp);
    3070:	10 93 08 06 	sts	0x0608, r17	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:147
  /* Reference should be already set up */

  /* Start conversion */
  ADC0.COMMAND = ADC_STCONV_bm;
    3074:	00 93 0a 06 	sts	0x060A, r16	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:150

  /* Wait for result ready */
  while(!(ADC0.INTFLAGS & ADC_RESRDY_bm));
    3078:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
    307c:	80 ff       	sbrs	r24, 0
    307e:	fc cf       	rjmp	.-8      	; 0x3078 <main+0x1f0>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_analog.c:156

  #if (defined(__AVR_DA__) && (!defined(NO_ADC_WORKAROUND)))
    // That may become defined when DA-series silicon is available with the fix
    ADC0.MUXPOS = 0x40;
  #endif
  return ADC0.RES;
    3080:	c0 90 10 06 	lds	r12, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
    3084:	d0 90 11 06 	lds	r13, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
print():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:78
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    3088:	0d 2c       	mov	r0, r13
    308a:	00 0c       	add	r0, r0
    308c:	ee 08       	sbc	r14, r14
    308e:	ff 08       	sbc	r15, r15
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:96
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3090:	2a e0       	ldi	r18, 0x0A	; 10
    3092:	b7 01       	movw	r22, r14
    3094:	a6 01       	movw	r20, r12
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:91
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    3096:	f7 fe       	sbrs	r15, 7
    3098:	0d c0       	rjmp	.+26     	; 0x30b4 <main+0x22c>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:92
      int t = print('-');
    309a:	6d e2       	ldi	r22, 0x2D	; 45
    309c:	8f e8       	ldi	r24, 0x8F	; 143
    309e:	97 e4       	ldi	r25, 0x47	; 71
    30a0:	0e 94 07 05 	call	0xa0e	; 0xa0e <Print::print(char)>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:93
      n = -n;
    30a4:	44 27       	eor	r20, r20
    30a6:	55 27       	eor	r21, r21
    30a8:	ba 01       	movw	r22, r20
    30aa:	4c 19       	sub	r20, r12
    30ac:	5d 09       	sbc	r21, r13
    30ae:	6e 09       	sbc	r22, r14
    30b0:	7f 09       	sbc	r23, r15
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:94
      return printNumber(n, 10) + t;
    30b2:	2a e0       	ldi	r18, 0x0A	; 10
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:96
    }
    return printNumber(n, 10);
    30b4:	8f e8       	ldi	r24, 0x8F	; 143
    30b6:	97 e4       	ldi	r25, 0x47	; 71
    30b8:	10 d8       	rcall	.-4064   	; 0x20da <Print::printNumber(unsigned long, unsigned char)>
write():
    30ba:	65 ef       	ldi	r22, 0xF5	; 245
    30bc:	70 e4       	ldi	r23, 0x40	; 64
    30be:	8f e8       	ldi	r24, 0x8F	; 143
    30c0:	97 e4       	ldi	r25, 0x47	; 71
    30c2:	0e 94 5e 10 	call	0x20bc	; 0x20bc <Print::write(char const*) [clone .part.2]>
    30c6:	b7 cf       	rjmp	.-146    	; 0x3036 <main+0x1ae>
setupPCINT():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:991
        Serial.println(analogRead(ADC_VDDIO2DIV10));
      }
    }
  }
  VPORTC.INTFLAGS = VPORTC.INTFLAGS;
    30c8:	8b b1       	in	r24, 0x0b	; 11
    30ca:	8b b9       	out	0x0b, r24	; 11
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:992
  PORTC.PIN0CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    30cc:	89 e0       	ldi	r24, 0x09	; 9
    30ce:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__TEXT_REGION_LENGTH__+0x7e0450>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:993
  PORTC.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    30d2:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <__TEXT_REGION_LENGTH__+0x7e0451>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:994
  PORTC.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    30d6:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <__TEXT_REGION_LENGTH__+0x7e0452>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:995
  PORTC.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    30da:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x7e0453>
swap():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.cpp:166
  uint8_t ret_val = _pins_to_swap(_usart_pins, _mux_count, tx, rx);   // return 127 when correct swap number wasn't found
  return swap(ret_val);
}

bool UartClass::swap(uint8_t newmux) {
  if (_state < _mux_count) {
    30de:	90 91 a1 47 	lds	r25, 0x47A1	; 0x8047a1 <Serial0+0x12>
    30e2:	80 91 9f 47 	lds	r24, 0x479F	; 0x80479f <Serial0+0x10>
    30e6:	98 17       	cp	r25, r24
    30e8:	08 f0       	brcs	.+2      	; 0x30ec <main+0x264>
    30ea:	83 c1       	rjmp	.+774    	; 0x33f2 <main+0x56a>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.cpp:167
    _pin_set = newmux;
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	80 93 a0 47 	sts	0x47A0, r24	; 0x8047a0 <Serial0+0x11>
setup():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:223
  //_PROTECTED_WRITE(CLKCTRL_OSCHFTUNE,CLKCTRL_OSCHFTUNE);
  setupPins();
  setupPCINT();
  //setupRF();
  Serial.swap(1);
  Serial.begin(115200);
    30f2:	40 e0       	ldi	r20, 0x00	; 0
    30f4:	52 ec       	ldi	r21, 0xC2	; 194
    30f6:	61 e0       	ldi	r22, 0x01	; 1
    30f8:	70 e0       	ldi	r23, 0x00	; 0
    30fa:	8f e8       	ldi	r24, 0x8F	; 143
    30fc:	97 e4       	ldi	r25, 0x47	; 71
    30fe:	0e 94 0d 0a 	call	0x141a	; 0x141a <UartClass::begin(unsigned long)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:224
  Serial.println("Hi, I started!");
    3102:	8c e2       	ldi	r24, 0x2C	; 44
    3104:	91 e4       	ldi	r25, 0x41	; 65
    3106:	2e d8       	rcall	.-4004   	; 0x2164 <Print::println(char const*) [clone .constprop.25]>
begin():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:198
	 * - 40x4 is dual 40x2 displays using dual E signals which is not suppo
	 *
	 * users can override this at any time by calling setRowOffsets(r0,r1,r2,r3)
	 */

	if((!_rowOffsets[0] && !_rowOffsets[1] && !_rowOffsets[2] && !_rowOffsets[3])
    3108:	80 91 21 4e 	lds	r24, 0x4E21	; 0x804e21 <lcd+0xc>
    310c:	81 11       	cpse	r24, r1
    310e:	0c c0       	rjmp	.+24     	; 0x3128 <main+0x2a0>
    3110:	80 91 22 4e 	lds	r24, 0x4E22	; 0x804e22 <lcd+0xd>
    3114:	81 11       	cpse	r24, r1
    3116:	08 c0       	rjmp	.+16     	; 0x3128 <main+0x2a0>
    3118:	80 91 23 4e 	lds	r24, 0x4E23	; 0x804e23 <lcd+0xe>
    311c:	81 11       	cpse	r24, r1
    311e:	04 c0       	rjmp	.+8      	; 0x3128 <main+0x2a0>
    3120:	80 91 24 4e 	lds	r24, 0x4E24	; 0x804e24 <lcd+0xf>
    3124:	88 23       	and	r24, r24
    3126:	21 f0       	breq	.+8      	; 0x3130 <main+0x2a8>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:199
	 || (_cols && (_cols != cols)))
    3128:	80 91 1c 4e 	lds	r24, 0x4E1C	; 0x804e1c <lcd+0x7>
    312c:	8f 7e       	andi	r24, 0xEF	; 239
    312e:	59 f0       	breq	.+22     	; 0x3146 <main+0x2be>
setRowOffsets():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:564
// See here for further explanation of lcd memory addressing:
// http://web.alfredstate.edu/weimandn/lcd/lcd_addressing/lcd_addressing_index.html

int hd44780::setRowOffsets(int row0, int row1, int row2, int row3)
{
	_rowOffsets[0] = row0;
    3130:	10 92 21 4e 	sts	0x4E21, r1	; 0x804e21 <lcd+0xc>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:565
	_rowOffsets[1] = row1;
    3134:	80 e4       	ldi	r24, 0x40	; 64
    3136:	80 93 22 4e 	sts	0x4E22, r24	; 0x804e22 <lcd+0xd>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:566
	_rowOffsets[2] = row2;
    313a:	80 e1       	ldi	r24, 0x10	; 16
    313c:	80 93 23 4e 	sts	0x4E23, r24	; 0x804e23 <lcd+0xe>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:567
	_rowOffsets[3] = row3;
    3140:	80 e5       	ldi	r24, 0x50	; 80
    3142:	80 93 24 4e 	sts	0x4E24, r24	; 0x804e24 <lcd+0xf>
begin():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:208


	/*
	 * Save rows/cols
	 */
	_rows = rows;
    3146:	82 e0       	ldi	r24, 0x02	; 2
    3148:	80 93 1d 4e 	sts	0x4E1D, r24	; 0x804e1d <lcd+0x8>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:209
	_cols = cols;
    314c:	80 e1       	ldi	r24, 0x10	; 16
    314e:	80 93 1c 4e 	sts	0x4E1C, r24	; 0x804e1c <lcd+0x7>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:218
	 * according to datasheet,we need at least 40ms after power rises above 2.7V
	 * before sending commands.The Arduino AVR can turn on and start running way
	 * before 4.5V so we'll wait 100ms to add some additional margin
	 */

	delay(100); 
    3152:	64 e6       	ldi	r22, 0x64	; 100
    3154:	70 e0       	ldi	r23, 0x00	; 0
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <delay>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:221
  
	// default to 4 bit mode (can be overridded by i/o class library)
	_displayfunction = HD44780_4BITMODE;
    315e:	10 92 19 4e 	sts	0x4E19, r1	; 0x804e19 <lcd+0x4>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:224

	// call h/w i/o class init function
	if((rval = ioinit())) // intentional assignment
    3162:	85 e1       	ldi	r24, 0x15	; 21
    3164:	9e e4       	ldi	r25, 0x4E	; 78
    3166:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <hd44780_pinIO::ioinit()>
    316a:	89 2b       	or	r24, r25
    316c:	09 f0       	breq	.+2      	; 0x3170 <main+0x2e8>
    316e:	49 c0       	rjmp	.+146    	; 0x3202 <main+0x37a>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:229
	{
		return(rval);
	}

	if (_rows > 1)
    3170:	80 91 1d 4e 	lds	r24, 0x4E1D	; 0x804e1d <lcd+0x8>
    3174:	82 30       	cpi	r24, 0x02	; 2
    3176:	28 f0       	brcs	.+10     	; 0x3182 <main+0x2fa>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:231
	{
		_displayfunction |= HD44780_2LINE;
    3178:	80 91 19 4e 	lds	r24, 0x4E19	; 0x804e19 <lcd+0x4>
    317c:	88 60       	ori	r24, 0x08	; 8
    317e:	80 93 19 4e 	sts	0x4E19, r24	; 0x804e19 <lcd+0x4>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:484
	 * like yield() to potentially allow other code to execute during this time period.
	 *
	 * delay() can be used because this code is never called from a constructor
	 *
	 */
	command4bit(HD44780_FUNCTIONSET|HD44780_8BITMODE);
    3182:	80 e3       	ldi	r24, 0x30	; 48
    3184:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <hd44780::command4bit(unsigned char) [clone .constprop.15]>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:485
	delay(5); // wait 5ms vs 4.1ms, some are slower than spec
    3188:	65 e0       	ldi	r22, 0x05	; 5
    318a:	70 e0       	ldi	r23, 0x00	; 0
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	0e 94 ce 07 	call	0xf9c	; 0xf9c <delay>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:487

	command4bit(HD44780_FUNCTIONSET|HD44780_8BITMODE);
    3194:	80 e3       	ldi	r24, 0x30	; 48
    3196:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <hd44780::command4bit(unsigned char) [clone .constprop.15]>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:488
	delay(1); // wait 1ms vs 100us
    319a:	61 e0       	ldi	r22, 0x01	; 1
    319c:	70 e0       	ldi	r23, 0x00	; 0
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <delay>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:490
    
	command4bit(HD44780_FUNCTIONSET|HD44780_8BITMODE);
    31a6:	80 e3       	ldi	r24, 0x30	; 48
    31a8:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <hd44780::command4bit(unsigned char) [clone .constprop.15]>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:491
	delay(1); // wait 1ms vs 100us
    31ac:	61 e0       	ldi	r22, 0x01	; 1
    31ae:	70 e0       	ldi	r23, 0x00	; 0
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	0e 94 ce 07 	call	0xf9c	; 0xf9c <delay>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:504
	 * isn't in 4 bit mode yet.
	 * Note: there is no need for a delay *after* command4bit() since
	 * it uses markStart(_insExecTime) to indicate the instruction time
	 * and will be honored by waitReady() used in the i/o class.
	 */
	if(!(_displayfunction & HD44780_8BITMODE))
    31b8:	80 91 19 4e 	lds	r24, 0x4E19	; 0x804e19 <lcd+0x4>
    31bc:	84 fd       	sbrc	r24, 4
    31be:	03 c0       	rjmp	.+6      	; 0x31c6 <main+0x33e>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:505
		command4bit(HD44780_FUNCTIONSET|HD44780_4BITMODE);
    31c0:	80 e2       	ldi	r24, 0x20	; 32
    31c2:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <hd44780::command4bit(unsigned char) [clone .constprop.15]>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:514
	 * and in 4 bit mode for 4bit only host interfaces so we can 
	 * now use the "normal" library command() & API interface functions
	 */

	// set # lines, font size, etc.
	command(HD44780_FUNCTIONSET | _displayfunction);  
    31c6:	60 91 19 4e 	lds	r22, 0x4E19	; 0x804e19 <lcd+0x4>
    31ca:	60 62       	ori	r22, 0x20	; 32
    31cc:	85 e1       	ldi	r24, 0x15	; 21
    31ce:	9e e4       	ldi	r25, 0x4E	; 78
    31d0:	0e 94 0a 08 	call	0x1014	; 0x1014 <hd44780::command(unsigned char)>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:518


	// turn the display on with no cursor or blinking default
	_displaycontrol = HD44780_DISPLAYON | HD44780_CURSOROFF | HD44780_BLINKOFF;  
    31d4:	84 e0       	ldi	r24, 0x04	; 4
    31d6:	80 93 1a 4e 	sts	0x4E1A, r24	; 0x804e1a <lcd+0x5>
display():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:639

// turn on display pixels
int hd44780::display()
{
	_displaycontrol |= HD44780_DISPLAYON;
	return(command(HD44780_DISPLAYCONTROL | _displaycontrol));
    31da:	6c e0       	ldi	r22, 0x0C	; 12
    31dc:	85 e1       	ldi	r24, 0x15	; 21
    31de:	9e e4       	ldi	r25, 0x4E	; 78
    31e0:	0e 94 0a 08 	call	0x1014	; 0x1014 <hd44780::command(unsigned char)>
begin():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:521

	// turn the display on with no cursor or blinking default
	_displaycontrol = HD44780_DISPLAYON | HD44780_CURSOROFF | HD44780_BLINKOFF;  
	display();

	clear(); // clear display
    31e4:	0e 94 41 08 	call	0x1082	; 0x1082 <hd44780::clear() [clone .constprop.24]>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:524

	// Initialize to default text direction (for romance languages)
	_displaymode = HD44780_ENTRYLEFT2RIGHT;
    31e8:	82 e0       	ldi	r24, 0x02	; 2
    31ea:	80 93 1b 4e 	sts	0x4E1B, r24	; 0x804e1b <lcd+0x6>
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:526
	// set the entry mode
	rval = command(HD44780_ENTRYMODESET | _displaymode);
    31ee:	66 e0       	ldi	r22, 0x06	; 6
    31f0:	85 e1       	ldi	r24, 0x15	; 21
    31f2:	9e e4       	ldi	r25, 0x4E	; 78
    31f4:	0e 94 0a 08 	call	0x1014	; 0x1014 <hd44780::command(unsigned char)>
backlight():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.cpp:788
#endif

// turn on backlight at full intensity
int hd44780::backlight(void)
{
	return(iosetBacklight(-1)); // max brightness
    31f8:	6f ef       	ldi	r22, 0xFF	; 255
    31fa:	85 e1       	ldi	r24, 0x15	; 21
    31fc:	9e e4       	ldi	r25, 0x4E	; 78
    31fe:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <hd44780_pinIO::iosetBacklight(unsigned char)>
setup():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:226
  lcd.begin(16, 2);
  lcd.print(F("Woah I'm on a DB!"));
    3202:	62 eb       	ldi	r22, 0xB2	; 178
    3204:	76 e0       	ldi	r23, 0x06	; 6
    3206:	85 e1       	ldi	r24, 0x15	; 21
    3208:	9e e4       	ldi	r25, 0x4E	; 78
    320a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:227
  lcd.setCursor(0, 1);
    320e:	41 e0       	ldi	r20, 0x01	; 1
    3210:	60 e0       	ldi	r22, 0x00	; 0
    3212:	85 e1       	ldi	r24, 0x15	; 21
    3214:	9e e4       	ldi	r25, 0x4E	; 78
    3216:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:228
  lcd.print(F("Nothing works!"));
    321a:	63 ea       	ldi	r22, 0xA3	; 163
    321c:	76 e0       	ldi	r23, 0x06	; 6
    321e:	85 e1       	ldi	r24, 0x15	; 21
    3220:	9e e4       	ldi	r25, 0x4E	; 78
    3222:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:229
  digitalWrite(LCD_BL_R, HIGH);
    3226:	61 e0       	ldi	r22, 0x01	; 1
    3228:	88 e0       	ldi	r24, 0x08	; 8
    322a:	0e 94 32 0a 	call	0x1464	; 0x1464 <digitalWrite>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:230
  digitalWrite(LCD_BL_G, HIGH);
    322e:	61 e0       	ldi	r22, 0x01	; 1
    3230:	89 e0       	ldi	r24, 0x09	; 9
    3232:	0e 94 32 0a 	call	0x1464	; 0x1464 <digitalWrite>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:231
  digitalWrite(LCD_BL_B, HIGH);
    3236:	61 e0       	ldi	r22, 0x01	; 1
    3238:	8a e0       	ldi	r24, 0x0A	; 10
    323a:	0e 94 32 0a 	call	0x1464	; 0x1464 <digitalWrite>
_pinMode():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:228
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
  //if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
    323e:	80 e4       	ldi	r24, 0x40	; 64
    3240:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7e0461>
setup():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:233
  pinMode(PIN_PD6,OUTPUT);
  digitalWrite(PIN_PD6,HIGH);
    3244:	61 e0       	ldi	r22, 0x01	; 1
    3246:	8c e1       	ldi	r24, 0x1C	; 28
    3248:	0e 94 32 0a 	call	0x1464	; 0x1464 <digitalWrite>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:234
  delay(2000);
    324c:	60 ed       	ldi	r22, 0xD0	; 208
    324e:	77 e0       	ldi	r23, 0x07	; 7
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	0e 94 ce 07 	call	0xf9c	; 0xf9c <delay>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:235
  lcd.clear();
    3258:	0e 94 41 08 	call	0x1082	; 0x1082 <hd44780::clear() [clone .constprop.24]>
loadMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:386
  currentSettingLeft = 0;
  currentSettingRight = 0;
}

void loadMode() {
  Serial.println("LoadMode Called");
    325c:	8b e3       	ldi	r24, 0x3B	; 59
    325e:	91 e4       	ldi	r25, 0x41	; 65
    3260:	0e 94 b2 10 	call	0x2164	; 0x2164 <Print::println(char const*) [clone .constprop.25]>
_ZNK5EERefdeEv():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:47
  EERef(const uint8_t index)
    : index(index)                 {}

  // Access/read members.
  uint8_t operator*() const            {
    return (*(uint8_t *)((uint16_t)(MAPPED_EEPROM_START + (index & EEPROM_INDEX_MASK))));
    3264:	10 91 0f 14 	lds	r17, 0x140F	; 0x80140f <__TEXT_REGION_LENGTH__+0x7e140f>
loadMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:387
  if (EEPROM.read(0x0F) != 255) {
    3268:	1f 3f       	cpi	r17, 0xFF	; 255
    326a:	79 f1       	breq	.+94     	; 0x32ca <main+0x442>
printHex():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.cpp:459

  return 1;
}

void UartClass::printHex(const uint8_t b) {
  char x = (b >> 4) | '0';
    326c:	61 2f       	mov	r22, r17
    326e:	62 95       	swap	r22
    3270:	6f 70       	andi	r22, 0x0F	; 15
    3272:	60 63       	ori	r22, 0x30	; 48
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.cpp:460
  if (x > '9')
    3274:	6a 33       	cpi	r22, 0x3A	; 58
    3276:	0c f0       	brlt	.+2      	; 0x327a <main+0x3f2>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.cpp:461
    x += 7;
    3278:	69 5f       	subi	r22, 0xF9	; 249
write():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.h:128
    virtual void flush(void);
    virtual size_t write(uint8_t b);
    inline size_t write(unsigned long n) {return write((uint8_t)n);}
    inline size_t write(long n)          {return write((uint8_t)n);}
    inline size_t write(unsigned int n)  {return write((uint8_t)n);}
    inline size_t write(int n)           {return write((uint8_t)n);}
    327a:	8f e8       	ldi	r24, 0x8F	; 143
    327c:	97 e4       	ldi	r25, 0x47	; 71
    327e:	0e 94 27 07 	call	0xe4e	; 0xe4e <UartClass::write(unsigned char)>
printHex():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.cpp:463
  write(x);
  x = (b & 0x0F) | '0';
    3282:	61 2f       	mov	r22, r17
    3284:	6f 70       	andi	r22, 0x0F	; 15
    3286:	60 63       	ori	r22, 0x30	; 48
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.cpp:464
  if (x > '9')
    3288:	6a 33       	cpi	r22, 0x3A	; 58
    328a:	08 f0       	brcs	.+2      	; 0x328e <main+0x406>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.cpp:465
    x += 7;
    328c:	69 5f       	subi	r22, 0xF9	; 249
write():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.h:128
    328e:	8f e8       	ldi	r24, 0x8F	; 143
    3290:	97 e4       	ldi	r25, 0x47	; 71
    3292:	0e 94 27 07 	call	0xe4e	; 0xe4e <UartClass::write(unsigned char)>
_ZNK5EERefdeEv():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:47
    3296:	80 91 0f 14 	lds	r24, 0x140F	; 0x80140f <__TEXT_REGION_LENGTH__+0x7e140f>
loadMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:389
    Serial.printHex(EEPROM.read(0x0F));
    currentMode = EEPROM.read(0x0F);
    329a:	80 93 89 47 	sts	0x4789, r24	; 0x804789 <currentMode>
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	80 e0       	ldi	r24, 0x00	; 0
_ZNK5EERefdeEv():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:47
    32a2:	fc 01       	movw	r30, r24
    32a4:	e0 5f       	subi	r30, 0xF0	; 240
    32a6:	fb 4e       	sbci	r31, 0xEB	; 235
    32a8:	20 81       	ld	r18, Z
loadMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:391
    for (byte i = 0; i < 8; i++) {
      currentValueLeft[i] = EEPROM.read(0x10 + i);
    32aa:	fc 01       	movw	r30, r24
    32ac:	e7 58       	subi	r30, 0x87	; 135
    32ae:	f8 4b       	sbci	r31, 0xB8	; 184
    32b0:	20 83       	st	Z, r18
_ZNK5EERefdeEv():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:47
    32b2:	fc 01       	movw	r30, r24
    32b4:	e8 5e       	subi	r30, 0xE8	; 232
    32b6:	fb 4e       	sbci	r31, 0xEB	; 235
    32b8:	20 81       	ld	r18, Z
loadMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:392
      currentValueRight[i] = EEPROM.read(0x18 + i);
    32ba:	fc 01       	movw	r30, r24
    32bc:	ef 57       	subi	r30, 0x7F	; 127
    32be:	f8 4b       	sbci	r31, 0xB8	; 184
    32c0:	20 83       	st	Z, r18
    32c2:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:390
void loadMode() {
  Serial.println("LoadMode Called");
  if (EEPROM.read(0x0F) != 255) {
    Serial.printHex(EEPROM.read(0x0F));
    currentMode = EEPROM.read(0x0F);
    for (byte i = 0; i < 8; i++) {
    32c4:	88 30       	cpi	r24, 0x08	; 8
    32c6:	91 05       	cpc	r25, r1
    32c8:	61 f7       	brne	.-40     	; 0x32a2 <main+0x41a>
map():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
#include "Common.h"

/* C++ prototypes */
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    32ca:	21 2c       	mov	r2, r1
    32cc:	31 2c       	mov	r3, r1
    32ce:	21 01       	movw	r4, r2
    32d0:	2a 94       	dec	r2
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:402
void handleUI() {
  static byte lastBtnState = 7;
  static byte lastBtnBounceState = 7;
  static unsigned long lastBtnAt = 0;
  static unsigned long lastPressAt = 0;
  byte btnRead = BTN_PORT_READ();
    32d2:	06 b1       	in	r16, 0x06	; 6
    32d4:	10 e0       	ldi	r17, 0x00	; 0
    32d6:	53 e0       	ldi	r21, 0x03	; 3
    32d8:	15 95       	asr	r17
    32da:	07 95       	ror	r16
    32dc:	5a 95       	dec	r21
    32de:	e1 f7       	brne	.-8      	; 0x32d8 <main+0x450>
    32e0:	f0 2f       	mov	r31, r16
    32e2:	f7 70       	andi	r31, 0x07	; 7
    32e4:	ff 2e       	mov	r15, r31
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:403
  if (!(btnRead == lastBtnBounceState)) { //debounce all buttons at once.
    32e6:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <handleUI()::lastBtnBounceState>
    32ea:	f8 17       	cp	r31, r24
    32ec:	09 f4       	brne	.+2      	; 0x32f0 <main+0x468>
    32ee:	84 c0       	rjmp	.+264    	; 0x33f8 <main+0x570>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:404
    lastBtnBounceState = btnRead;
    32f0:	f0 93 04 40 	sts	0x4004, r31	; 0x804004 <handleUI()::lastBtnBounceState>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:405
    lastBtnAt = millis();
    32f4:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
    32f8:	60 93 86 41 	sts	0x4186, r22	; 0x804186 <handleUI()::lastBtnAt>
    32fc:	70 93 87 41 	sts	0x4187, r23	; 0x804187 <handleUI()::lastBtnAt+0x1>
    3300:	80 93 88 41 	sts	0x4188, r24	; 0x804188 <handleUI()::lastBtnAt+0x2>
    3304:	90 93 89 41 	sts	0x4189, r25	; 0x804189 <handleUI()::lastBtnAt+0x3>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:473
void handleLCD() {
  static byte drift2_colors = 255;
  static unsigned long lastInputAt;
  static byte attractmode = 0;
  byte uichg = 0;
  if (millis() - lastRFUpdateAt < 5000 && lastRFUpdateAt) {
    3308:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
    330c:	00 91 91 41 	lds	r16, 0x4191	; 0x804191 <lastRFUpdateAt>
    3310:	10 91 92 41 	lds	r17, 0x4192	; 0x804192 <lastRFUpdateAt+0x1>
    3314:	20 91 93 41 	lds	r18, 0x4193	; 0x804193 <lastRFUpdateAt+0x2>
    3318:	30 91 94 41 	lds	r19, 0x4194	; 0x804194 <lastRFUpdateAt+0x3>
    331c:	60 1b       	sub	r22, r16
    331e:	71 0b       	sbc	r23, r17
    3320:	82 0b       	sbc	r24, r18
    3322:	93 0b       	sbc	r25, r19
    3324:	68 38       	cpi	r22, 0x88	; 136
    3326:	73 41       	sbci	r23, 0x13	; 19
    3328:	81 05       	cpc	r24, r1
    332a:	91 05       	cpc	r25, r1
    332c:	68 f4       	brcc	.+26     	; 0x3348 <main+0x4c0>
    332e:	80 91 91 41 	lds	r24, 0x4191	; 0x804191 <lastRFUpdateAt>
    3332:	90 91 92 41 	lds	r25, 0x4192	; 0x804192 <lastRFUpdateAt+0x1>
    3336:	a0 91 93 41 	lds	r26, 0x4193	; 0x804193 <lastRFUpdateAt+0x2>
    333a:	b0 91 94 41 	lds	r27, 0x4194	; 0x804194 <lastRFUpdateAt+0x3>
    333e:	89 2b       	or	r24, r25
    3340:	8a 2b       	or	r24, r26
    3342:	8b 2b       	or	r24, r27
    3344:	09 f0       	breq	.+2      	; 0x3348 <main+0x4c0>
    3346:	53 c1       	rjmp	.+678    	; 0x35ee <main+0x766>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:476
    return;
  }
  cli();
    3348:	f8 94       	cli
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:477
  uichg = UIChanged;
    334a:	10 91 06 40 	lds	r17, 0x4006	; 0x804006 <UIChanged>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:478
  UIChanged = 0;
    334e:	10 92 06 40 	sts	0x4006, r1	; 0x804006 <UIChanged>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:479
  sei();
    3352:	78 94       	sei
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:480
  if (uichg == 0) {
    3354:	11 11       	cpse	r17, r1
    3356:	cc c1       	rjmp	.+920    	; 0x36f0 <main+0x868>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:481
    if (millis() - lastInputAt > 60000) {
    3358:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
    335c:	c0 90 8d 41 	lds	r12, 0x418D	; 0x80418d <handleLCD()::lastInputAt>
    3360:	d0 90 8e 41 	lds	r13, 0x418E	; 0x80418e <handleLCD()::lastInputAt+0x1>
    3364:	e0 90 8f 41 	lds	r14, 0x418F	; 0x80418f <handleLCD()::lastInputAt+0x2>
    3368:	f0 90 90 41 	lds	r15, 0x4190	; 0x804190 <handleLCD()::lastInputAt+0x3>
    336c:	6c 19       	sub	r22, r12
    336e:	7d 09       	sbc	r23, r13
    3370:	8e 09       	sbc	r24, r14
    3372:	9f 09       	sbc	r25, r15
    3374:	61 36       	cpi	r22, 0x61	; 97
    3376:	7a 4e       	sbci	r23, 0xEA	; 234
    3378:	81 05       	cpc	r24, r1
    337a:	91 05       	cpc	r25, r1
    337c:	08 f4       	brcc	.+2      	; 0x3380 <main+0x4f8>
    337e:	37 c1       	rjmp	.+622    	; 0x35ee <main+0x766>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:482
      if (!attractmode || (millis() - lastInputAt > 120000)) {
    3380:	80 91 8c 41 	lds	r24, 0x418C	; 0x80418c <handleLCD()::attractmode>
    3384:	81 11       	cpse	r24, r1
    3386:	27 c1       	rjmp	.+590    	; 0x35d6 <main+0x74e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:483
        attractmode = 1;
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	80 93 8c 41 	sts	0x418C, r24	; 0x80418c <handleLCD()::attractmode>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:484
        lastInputAt = millis() - 60000;
    338e:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
    3392:	60 56       	subi	r22, 0x60	; 96
    3394:	7a 4e       	sbci	r23, 0xEA	; 234
    3396:	81 09       	sbc	r24, r1
    3398:	91 09       	sbc	r25, r1
    339a:	60 93 8d 41 	sts	0x418D, r22	; 0x80418d <handleLCD()::lastInputAt>
    339e:	70 93 8e 41 	sts	0x418E, r23	; 0x80418e <handleLCD()::lastInputAt+0x1>
    33a2:	80 93 8f 41 	sts	0x418F, r24	; 0x80418f <handleLCD()::lastInputAt+0x2>
    33a6:	90 93 90 41 	sts	0x4190, r25	; 0x804190 <handleLCD()::lastInputAt+0x3>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:555
    }
  }
  attractmode = 0;
}
void doAttractLCD() {
  lcd.clear();
    33aa:	0e 94 41 08 	call	0x1082	; 0x1082 <hd44780::clear() [clone .constprop.24]>
random():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    33ae:	e8 d7       	rcall	.+4048   	; 0x4380 <random>
    33b0:	23 e0       	ldi	r18, 0x03	; 3
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e0       	ldi	r20, 0x00	; 0
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	0e 94 15 22 	call	0x442a	; 0x442a <__divmodsi4>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:557
  byte s = random(0, 3);
  if (!s) {
    33bc:	61 11       	cpse	r22, r1
    33be:	54 c1       	rjmp	.+680    	; 0x3668 <main+0x7e0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:558
    lcd.setCursor(0, 0);
    33c0:	40 e0       	ldi	r20, 0x00	; 0
    33c2:	60 e0       	ldi	r22, 0x00	; 0
    33c4:	85 e1       	ldi	r24, 0x15	; 21
    33c6:	9e e4       	ldi	r25, 0x4E	; 78
    33c8:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:559
    lcd.print(F("Light Test v2.1"));
    33cc:	65 e4       	ldi	r22, 0x45	; 69
    33ce:	77 e0       	ldi	r23, 0x07	; 7
    33d0:	85 e1       	ldi	r24, 0x15	; 21
    33d2:	9e e4       	ldi	r25, 0x4E	; 78
    33d4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:560
    lcd.setCursor(0, 1);
    33d8:	41 e0       	ldi	r20, 0x01	; 1
    33da:	60 e0       	ldi	r22, 0x00	; 0
    33dc:	85 e1       	ldi	r24, 0x15	; 21
    33de:	9e e4       	ldi	r25, 0x4E	; 78
    33e0:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:561
    lcd.print(F("AVR128DB48"));
    33e4:	6a e3       	ldi	r22, 0x3A	; 58
    33e6:	77 e0       	ldi	r23, 0x07	; 7
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:574
    lcd.setCursor(2, 0);
    lcd.print(F("PLAY WITH ME"));
    lcd.setCursor(0, 1);
    byte r = random(0, 2);
    if (r == 0) {
      lcd.print(F("USE KNOBS&BUTTON"));
    33e8:	85 e1       	ldi	r24, 0x15	; 21
    33ea:	9e e4       	ldi	r25, 0x4E	; 78
    33ec:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
    33f0:	fe c0       	rjmp	.+508    	; 0x35ee <main+0x766>
swap():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/UART.cpp:173
    return true;
  } else if (newmux == MUX_NONE) {  //128 codes for MUX_NONE
    _pin_set = _mux_count;
    return true;
  } else {
    _pin_set = 0;
    33f2:	10 92 a0 47 	sts	0x47A0, r1	; 0x8047a0 <Serial0+0x11>
    33f6:	7d ce       	rjmp	.-774    	; 0x30f2 <main+0x26a>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:407
  byte btnRead = BTN_PORT_READ();
  if (!(btnRead == lastBtnBounceState)) { //debounce all buttons at once.
    lastBtnBounceState = btnRead;
    lastBtnAt = millis();
  } else {
    if (millis() - lastBtnAt > 50) { //has been stable for 50ms
    33f8:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
    33fc:	80 90 86 41 	lds	r8, 0x4186	; 0x804186 <handleUI()::lastBtnAt>
    3400:	90 90 87 41 	lds	r9, 0x4187	; 0x804187 <handleUI()::lastBtnAt+0x1>
    3404:	a0 90 88 41 	lds	r10, 0x4188	; 0x804188 <handleUI()::lastBtnAt+0x2>
    3408:	b0 90 89 41 	lds	r11, 0x4189	; 0x804189 <handleUI()::lastBtnAt+0x3>
    340c:	68 19       	sub	r22, r8
    340e:	79 09       	sbc	r23, r9
    3410:	8a 09       	sbc	r24, r10
    3412:	9b 09       	sbc	r25, r11
    3414:	63 33       	cpi	r22, 0x33	; 51
    3416:	71 05       	cpc	r23, r1
    3418:	81 05       	cpc	r24, r1
    341a:	91 05       	cpc	r25, r1
    341c:	08 f4       	brcc	.+2      	; 0x3420 <main+0x598>
    341e:	74 cf       	rjmp	.-280    	; 0x3308 <main+0x480>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:408
      if (btnRead < lastBtnState ) {
    3420:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <handleUI()::lastBtnState>
    3424:	f8 16       	cp	r15, r24
    3426:	d8 f4       	brcc	.+54     	; 0x345e <main+0x5d6>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:409
        if (!lastPressAt && !(btnRead & 1)) {
    3428:	80 91 82 41 	lds	r24, 0x4182	; 0x804182 <handleUI()::lastPressAt>
    342c:	90 91 83 41 	lds	r25, 0x4183	; 0x804183 <handleUI()::lastPressAt+0x1>
    3430:	a0 91 84 41 	lds	r26, 0x4184	; 0x804184 <handleUI()::lastPressAt+0x2>
    3434:	b0 91 85 41 	lds	r27, 0x4185	; 0x804185 <handleUI()::lastPressAt+0x3>
    3438:	89 2b       	or	r24, r25
    343a:	8a 2b       	or	r24, r26
    343c:	8b 2b       	or	r24, r27
    343e:	61 f4       	brne	.+24     	; 0x3458 <main+0x5d0>
    3440:	00 fd       	sbrc	r16, 0
    3442:	0a c0       	rjmp	.+20     	; 0x3458 <main+0x5d0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:410
          lastPressAt = millis();
    3444:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
    3448:	60 93 82 41 	sts	0x4182, r22	; 0x804182 <handleUI()::lastPressAt>
    344c:	70 93 83 41 	sts	0x4183, r23	; 0x804183 <handleUI()::lastPressAt+0x1>
    3450:	80 93 84 41 	sts	0x4184, r24	; 0x804184 <handleUI()::lastPressAt+0x2>
    3454:	90 93 85 41 	sts	0x4185, r25	; 0x804185 <handleUI()::lastPressAt+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:455
            currentSettingRight++;
          }
          UIChanged |= 2;
        }
      }
      lastBtnState = btnRead;
    3458:	f0 92 03 40 	sts	0x4003, r15	; 0x804003 <handleUI()::lastBtnState>
    345c:	55 cf       	rjmp	.-342    	; 0x3308 <main+0x480>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:414
        if (!lastPressAt && !(btnRead & 1)) {
          lastPressAt = millis();
        }
        //do nothing - was button being pressed
      } else {
        if (((btnRead & MODE_BTN_bm)) && !(lastBtnState & MODE_BTN_bm)) {
    345e:	02 ff       	sbrs	r16, 2
    3460:	72 c0       	rjmp	.+228    	; 0x3546 <main+0x6be>
    3462:	82 fd       	sbrc	r24, 2
    3464:	70 c0       	rjmp	.+224    	; 0x3546 <main+0x6be>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:415
          if (lastPressAt && millis() - lastPressAt > 10000) {
    3466:	80 90 82 41 	lds	r8, 0x4182	; 0x804182 <handleUI()::lastPressAt>
    346a:	90 90 83 41 	lds	r9, 0x4183	; 0x804183 <handleUI()::lastPressAt+0x1>
    346e:	a0 90 84 41 	lds	r10, 0x4184	; 0x804184 <handleUI()::lastPressAt+0x2>
    3472:	b0 90 85 41 	lds	r11, 0x4185	; 0x804185 <handleUI()::lastPressAt+0x3>
    3476:	81 14       	cp	r8, r1
    3478:	91 04       	cpc	r9, r1
    347a:	a1 04       	cpc	r10, r1
    347c:	b1 04       	cpc	r11, r1
    347e:	09 f4       	brne	.+2      	; 0x3482 <main+0x5fa>
    3480:	4e c0       	rjmp	.+156    	; 0x351e <main+0x696>
    3482:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
    3486:	68 19       	sub	r22, r8
    3488:	79 09       	sbc	r23, r9
    348a:	8a 09       	sbc	r24, r10
    348c:	9b 09       	sbc	r25, r11
    348e:	61 31       	cpi	r22, 0x11	; 17
    3490:	77 42       	sbci	r23, 0x27	; 39
    3492:	81 05       	cpc	r24, r1
    3494:	91 05       	cpc	r25, r1
    3496:	08 f4       	brcc	.+2      	; 0x349a <main+0x612>
    3498:	ec c6       	rjmp	.+3544   	; 0x4272 <nextbyte24+0x4e>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:417

            lcd.clear();
    349a:	0e 94 41 08 	call	0x1082	; 0x1082 <hd44780::clear() [clone .constprop.24]>
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:373
  }

}

void clearMode() {
  for (byte i = 0x0F; i < 0x20; i++) {
    349e:	4f e0       	ldi	r20, 0x0F	; 15
    34a0:	e4 2e       	mov	r14, r20
_ZN5EERefC2Eh():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:43
 */

struct EERef {

  EERef(const uint8_t index)
    : index(index)                 {}
    34a2:	e8 86       	std	Y+8, r14	; 0x08
_ZN11EEPROMClass5writeEhh.isra.5():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:221
  }
  uint8_t read(uint8_t idx)              {
    return EERef(idx);
  }
  void write(uint8_t idx, uint8_t val)   {
    (EERef(idx)) = val;
    34a4:	6f ef       	ldi	r22, 0xFF	; 255
    34a6:	ce 01       	movw	r24, r28
    34a8:	08 96       	adiw	r24, 0x08	; 8
    34aa:	0e 94 f6 09 	call	0x13ec	; 0x13ec <EERef::operator=(unsigned char)>
clearMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:373
    34ae:	e3 94       	inc	r14
    34b0:	30 e2       	ldi	r19, 0x20	; 32
    34b2:	e3 12       	cpse	r14, r19
    34b4:	f6 cf       	rjmp	.-20     	; 0x34a2 <main+0x61a>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:376
    EEPROM.write(i, 255);
  }
  currentMode = 0;
    34b6:	10 92 89 47 	sts	0x4789, r1	; 0x804789 <currentMode>
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:378
  for (byte i = 0; i < 8; i++) {
    currentValueLeft[i] = 0;
    34be:	fc 01       	movw	r30, r24
    34c0:	e7 58       	subi	r30, 0x87	; 135
    34c2:	f8 4b       	sbci	r31, 0xB8	; 184
    34c4:	10 82       	st	Z, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:379
    currentValueRight[i] = 0;
    34c6:	fc 01       	movw	r30, r24
    34c8:	ef 57       	subi	r30, 0x7F	; 127
    34ca:	f8 4b       	sbci	r31, 0xB8	; 184
    34cc:	10 82       	st	Z, r1
    34ce:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:377
void clearMode() {
  for (byte i = 0x0F; i < 0x20; i++) {
    EEPROM.write(i, 255);
  }
  currentMode = 0;
  for (byte i = 0; i < 8; i++) {
    34d0:	88 30       	cpi	r24, 0x08	; 8
    34d2:	91 05       	cpc	r25, r1
    34d4:	a1 f7       	brne	.-24     	; 0x34be <main+0x636>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:381
    currentValueLeft[i] = 0;
    currentValueRight[i] = 0;
  }
  currentSettingLeft = 0;
    34d6:	10 92 8b 41 	sts	0x418B, r1	; 0x80418b <currentSettingLeft>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:382
  currentSettingRight = 0;
    34da:	10 92 8a 41 	sts	0x418A, r1	; 0x80418a <currentSettingRight>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:419
        if (((btnRead & MODE_BTN_bm)) && !(lastBtnState & MODE_BTN_bm)) {
          if (lastPressAt && millis() - lastPressAt > 10000) {

            lcd.clear();
            clearMode();
            lcd.setCursor(3, 0);
    34de:	40 e0       	ldi	r20, 0x00	; 0
    34e0:	63 e0       	ldi	r22, 0x03	; 3
    34e2:	85 e1       	ldi	r24, 0x15	; 21
    34e4:	9e e4       	ldi	r25, 0x4E	; 78
    34e6:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:420
            lcd.print(F("Saved mode"));
    34ea:	67 ed       	ldi	r22, 0xD7	; 215
    34ec:	76 e0       	ldi	r23, 0x06	; 6
    34ee:	85 e1       	ldi	r24, 0x15	; 21
    34f0:	9e e4       	ldi	r25, 0x4E	; 78
    34f2:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:421
            lcd.setCursor(5, 1);
    34f6:	41 e0       	ldi	r20, 0x01	; 1
    34f8:	65 e0       	ldi	r22, 0x05	; 5
    34fa:	85 e1       	ldi	r24, 0x15	; 21
    34fc:	9e e4       	ldi	r25, 0x4E	; 78
    34fe:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:422
            lcd.print(F("cleared"));
    3502:	6f ec       	ldi	r22, 0xCF	; 207
    3504:	76 e0       	ldi	r23, 0x06	; 6
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:429
            UIChanged = 7;
          } else if (lastPressAt && millis() - lastPressAt > 3000) {
            saveMode();
            lcd.clear();
            lcd.setCursor(3, 0);
            lcd.print(F("Mode Saved"));
    3506:	85 e1       	ldi	r24, 0x15	; 21
    3508:	9e e4       	ldi	r25, 0x4E	; 78
    350a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:430
            delay(1000);
    350e:	68 ee       	ldi	r22, 0xE8	; 232
    3510:	73 e0       	ldi	r23, 0x03	; 3
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	0e 94 ce 07 	call	0xf9c	; 0xf9c <delay>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:431
            UIChanged = 7;
    351a:	87 e0       	ldi	r24, 0x07	; 7
    351c:	0a c0       	rjmp	.+20     	; 0x3532 <main+0x6aa>
advanceMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:308
  }
}


void advanceMode() {
  if (currentMode >= maxMode) {
    351e:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    3522:	8a 30       	cpi	r24, 0x0A	; 10
    3524:	08 f4       	brcc	.+2      	; 0x3528 <main+0x6a0>
    3526:	42 c0       	rjmp	.+132    	; 0x35ac <main+0x724>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:312
    setMode(0);
  } else {
    if (currentMode == 1) currentMode++;
    setMode(currentMode + 1);
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	26 d9       	rcall	.-3508   	; 0x2778 <setMode(unsigned char)>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:434
            lcd.print(F("Mode Saved"));
            delay(1000);
            UIChanged = 7;
          } else {
            advanceMode();
            UIChanged |= 4;
    352c:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    3530:	84 60       	ori	r24, 0x04	; 4
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:431
            saveMode();
            lcd.clear();
            lcd.setCursor(3, 0);
            lcd.print(F("Mode Saved"));
            delay(1000);
            UIChanged = 7;
    3532:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:436
          } else {
            advanceMode();
            UIChanged |= 4;
          }
          lastPressAt = 0;
    3536:	10 92 82 41 	sts	0x4182, r1	; 0x804182 <handleUI()::lastPressAt>
    353a:	10 92 83 41 	sts	0x4183, r1	; 0x804183 <handleUI()::lastPressAt+0x1>
    353e:	10 92 84 41 	sts	0x4184, r1	; 0x804184 <handleUI()::lastPressAt+0x2>
    3542:	10 92 85 41 	sts	0x4185, r1	; 0x804185 <handleUI()::lastPressAt+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:438
        }
        if (((btnRead & ENC1_BTN_bm)) && !(lastBtnState & ENC1_BTN_bm)) {
    3546:	01 ff       	sbrs	r16, 1
    3548:	17 c0       	rjmp	.+46     	; 0x3578 <main+0x6f0>
    354a:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <handleUI()::lastBtnState>
    354e:	81 fd       	sbrc	r24, 1
    3550:	13 c0       	rjmp	.+38     	; 0x3578 <main+0x6f0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:439
          if (currentSettingLeft >= pgm_read_byte_near(&maxSetting[currentMode][0])) {
    3552:	e0 91 89 47 	lds	r30, 0x4789	; 0x804789 <currentMode>
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	ee 0f       	add	r30, r30
    355a:	ff 1f       	adc	r31, r31
    355c:	e8 58       	subi	r30, 0x88	; 136
    355e:	f8 4f       	sbci	r31, 0xF8	; 248
    3560:	e4 91       	lpm	r30, Z
    3562:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <currentSettingLeft>
    3566:	8e 17       	cp	r24, r30
    3568:	50 f1       	brcs	.+84     	; 0x35be <main+0x736>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:440
            currentSettingLeft = 0;
    356a:	10 92 8b 41 	sts	0x418B, r1	; 0x80418b <currentSettingLeft>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:444
          } else {
            currentSettingLeft++;
          }
          UIChanged |= 2;
    356e:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    3572:	82 60       	ori	r24, 0x02	; 2
    3574:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:446
        }
        if (((btnRead & ENC2_BTN_bm)) && !(lastBtnState & ENC2_BTN_bm)) {
    3578:	00 ff       	sbrs	r16, 0
    357a:	6e cf       	rjmp	.-292    	; 0x3458 <main+0x5d0>
    357c:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <handleUI()::lastBtnState>
    3580:	80 fd       	sbrc	r24, 0
    3582:	6a cf       	rjmp	.-300    	; 0x3458 <main+0x5d0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:447
          if (currentSettingRight >= pgm_read_byte_near(&maxSetting[currentMode][1])) {
    3584:	e0 91 89 47 	lds	r30, 0x4789	; 0x804789 <currentMode>
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	ee 0f       	add	r30, r30
    358c:	ff 1f       	adc	r31, r31
    358e:	e7 58       	subi	r30, 0x87	; 135
    3590:	f8 4f       	sbci	r31, 0xF8	; 248
    3592:	e4 91       	lpm	r30, Z
    3594:	80 91 8a 41 	lds	r24, 0x418A	; 0x80418a <currentSettingRight>
    3598:	8e 17       	cp	r24, r30
    359a:	b8 f0       	brcs	.+46     	; 0x35ca <main+0x742>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:448
            currentSettingRight = 0;
    359c:	10 92 8a 41 	sts	0x418A, r1	; 0x80418a <currentSettingRight>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:452
          } else {
            currentSettingRight++;
          }
          UIChanged |= 2;
    35a0:	80 91 06 40 	lds	r24, 0x4006	; 0x804006 <UIChanged>
    35a4:	82 60       	ori	r24, 0x02	; 2
    35a6:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <UIChanged>
    35aa:	56 cf       	rjmp	.-340    	; 0x3458 <main+0x5d0>
advanceMode():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:311

void advanceMode() {
  if (currentMode >= maxMode) {
    setMode(0);
  } else {
    if (currentMode == 1) currentMode++;
    35ac:	81 30       	cpi	r24, 0x01	; 1
    35ae:	19 f4       	brne	.+6      	; 0x35b6 <main+0x72e>
    35b0:	82 e0       	ldi	r24, 0x02	; 2
    35b2:	80 93 89 47 	sts	0x4789, r24	; 0x804789 <currentMode>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:312
    setMode(currentMode + 1);
    35b6:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    35ba:	8f 5f       	subi	r24, 0xFF	; 255
    35bc:	b6 cf       	rjmp	.-148    	; 0x352a <main+0x6a2>
handleUI():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:442
        }
        if (((btnRead & ENC1_BTN_bm)) && !(lastBtnState & ENC1_BTN_bm)) {
          if (currentSettingLeft >= pgm_read_byte_near(&maxSetting[currentMode][0])) {
            currentSettingLeft = 0;
          } else {
            currentSettingLeft++;
    35be:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <currentSettingLeft>
    35c2:	8f 5f       	subi	r24, 0xFF	; 255
    35c4:	80 93 8b 41 	sts	0x418B, r24	; 0x80418b <currentSettingLeft>
    35c8:	d2 cf       	rjmp	.-92     	; 0x356e <main+0x6e6>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:450
        }
        if (((btnRead & ENC2_BTN_bm)) && !(lastBtnState & ENC2_BTN_bm)) {
          if (currentSettingRight >= pgm_read_byte_near(&maxSetting[currentMode][1])) {
            currentSettingRight = 0;
          } else {
            currentSettingRight++;
    35ca:	80 91 8a 41 	lds	r24, 0x418A	; 0x80418a <currentSettingRight>
    35ce:	8f 5f       	subi	r24, 0xFF	; 255
    35d0:	80 93 8a 41 	sts	0x418A, r24	; 0x80418a <currentSettingRight>
    35d4:	e5 cf       	rjmp	.-54     	; 0x35a0 <main+0x718>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:482
  uichg = UIChanged;
  UIChanged = 0;
  sei();
  if (uichg == 0) {
    if (millis() - lastInputAt > 60000) {
      if (!attractmode || (millis() - lastInputAt > 120000)) {
    35d6:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
    35da:	6c 19       	sub	r22, r12
    35dc:	7d 09       	sbc	r23, r13
    35de:	8e 09       	sbc	r24, r14
    35e0:	9f 09       	sbc	r25, r15
    35e2:	61 3c       	cpi	r22, 0xC1	; 193
    35e4:	74 4d       	sbci	r23, 0xD4	; 212
    35e6:	81 40       	sbci	r24, 0x01	; 1
    35e8:	91 05       	cpc	r25, r1
    35ea:	08 f0       	brcs	.+2      	; 0x35ee <main+0x766>
    35ec:	cd ce       	rjmp	.-614    	; 0x3388 <main+0x500>
loop():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:253
  }
  */
  //digitalWriteFast(INDICATE2, CHANGE);
  handleUI();
  handleLCD();
  if (!updated) {
    35ee:	10 91 8e 47 	lds	r17, 0x478E	; 0x80478e <loop::updated>
    35f2:	00 91 89 47 	lds	r16, 0x4789	; 0x804789 <currentMode>
    35f6:	11 11       	cpse	r17, r1
    35f8:	87 c5       	rjmp	.+2830   	; 0x4108 <__DATA_REGION_LENGTH__+0x108>
digitalWriteFast():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:444
  if (val == LOW)
    vport->OUT &= ~mask;
  else if (val == CHANGE)
    vport->IN |= mask;
  else // HIGH
    vport->OUT |= mask;
    35fa:	a9 9a       	sbi	0x15, 1	; 21
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:584
    }
  }
}

void updatePattern() {
  if (currentMode == 0) {
    35fc:	01 11       	cpse	r16, r1
    35fe:	b9 c1       	rjmp	.+882    	; 0x3972 <main+0xaea>
    3600:	06 e2       	ldi	r16, 0x26	; 38
    3602:	18 e4       	ldi	r17, 0x48	; 72
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:585
    for (unsigned int i = 0; i < LENGTH * 3; i++) {
    3604:	d1 2c       	mov	r13, r1
    3606:	c1 2c       	mov	r12, r1
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:586
      pixels[i] = getLeftVal(currentValueLeft[i % 3]);
    3608:	53 e0       	ldi	r21, 0x03	; 3
    360a:	e5 2e       	mov	r14, r21
    360c:	f1 2c       	mov	r15, r1
    360e:	c6 01       	movw	r24, r12
    3610:	b7 01       	movw	r22, r14
    3612:	0e 94 9b 24 	call	0x4936	; 0x4936 <__udivmodhi4>
    3616:	fc 01       	movw	r30, r24
    3618:	e7 58       	subi	r30, 0x87	; 135
    361a:	f8 4b       	sbci	r31, 0xB8	; 184
    361c:	80 81       	ld	r24, Z
    361e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3622:	f8 01       	movw	r30, r16
    3624:	81 93       	st	Z+, r24
    3626:	8f 01       	movw	r16, r30
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:585
  }
}

void updatePattern() {
  if (currentMode == 0) {
    for (unsigned int i = 0; i < LENGTH * 3; i++) {
    3628:	ff ef       	ldi	r31, 0xFF	; 255
    362a:	cf 1a       	sub	r12, r31
    362c:	df 0a       	sbc	r13, r31
    362e:	2c ed       	ldi	r18, 0xDC	; 220
    3630:	c2 16       	cp	r12, r18
    3632:	25 e0       	ldi	r18, 0x05	; 5
    3634:	d2 06       	cpc	r13, r18
    3636:	59 f7       	brne	.-42     	; 0x360e <main+0x786>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:612
  } else if (currentMode == 10) {
    updatePatternDrift2();
  } else {
    setMode(0);
  }
  frameNumber++;
    3638:	80 91 75 47 	lds	r24, 0x4775	; 0x804775 <frameNumber>
    363c:	90 91 76 47 	lds	r25, 0x4776	; 0x804776 <frameNumber+0x1>
    3640:	a0 91 77 47 	lds	r26, 0x4777	; 0x804777 <frameNumber+0x2>
    3644:	b0 91 78 47 	lds	r27, 0x4778	; 0x804778 <frameNumber+0x3>
    3648:	01 96       	adiw	r24, 0x01	; 1
    364a:	a1 1d       	adc	r26, r1
    364c:	b1 1d       	adc	r27, r1
    364e:	80 93 75 47 	sts	0x4775, r24	; 0x804775 <frameNumber>
    3652:	90 93 76 47 	sts	0x4776, r25	; 0x804776 <frameNumber+0x1>
    3656:	a0 93 77 47 	sts	0x4777, r26	; 0x804777 <frameNumber+0x2>
    365a:	b0 93 78 47 	sts	0x4778, r27	; 0x804778 <frameNumber+0x3>
digitalWriteFast():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:440
    vport->OUT &= ~mask;
  else // CHANGE
    vport->IN = mask;
*/
  if (val == LOW)
    vport->OUT &= ~mask;
    365e:	a9 98       	cbi	0x15, 1	; 21
loop():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:257
  handleLCD();
  if (!updated) {
    digitalWriteFast(INDICATE1,HIGH);
    updatePattern();
    digitalWriteFast(INDICATE1,LOW);
    updated = 1;
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	80 93 8e 47 	sts	0x478E, r24	; 0x80478e <loop::updated>
    3666:	35 ce       	rjmp	.-918    	; 0x32d2 <main+0x44a>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:563
    lcd.setCursor(0, 0);
    lcd.print(F("Light Test v2.1"));
    lcd.setCursor(0, 1);
    lcd.print(F("AVR128DB48"));
  } else if (s == 1) {
    lcd.setCursor(0, 0);
    3668:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:562
  if (!s) {
    lcd.setCursor(0, 0);
    lcd.print(F("Light Test v2.1"));
    lcd.setCursor(0, 1);
    lcd.print(F("AVR128DB48"));
  } else if (s == 1) {
    366a:	61 30       	cpi	r22, 0x01	; 1
    366c:	e9 f4       	brne	.+58     	; 0x36a8 <main+0x820>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:563
    lcd.setCursor(0, 0);
    366e:	60 e0       	ldi	r22, 0x00	; 0
    3670:	85 e1       	ldi	r24, 0x15	; 21
    3672:	9e e4       	ldi	r25, 0x4E	; 78
    3674:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:564
    lcd.print(F("This is not a"));
    3678:	6c e2       	ldi	r22, 0x2C	; 44
    367a:	77 e0       	ldi	r23, 0x07	; 7
    367c:	85 e1       	ldi	r24, 0x15	; 21
    367e:	9e e4       	ldi	r25, 0x4E	; 78
    3680:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:565
    lcd.setCursor(0, 1);
    3684:	41 e0       	ldi	r20, 0x01	; 1
    3686:	60 e0       	ldi	r22, 0x00	; 0
    3688:	85 e1       	ldi	r24, 0x15	; 21
    368a:	9e e4       	ldi	r25, 0x4E	; 78
    368c:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:566
    lcd.print(F("real party"));
    3690:	61 e2       	ldi	r22, 0x21	; 33
    3692:	77 e0       	ldi	r23, 0x07	; 7
    3694:	85 e1       	ldi	r24, 0x15	; 21
    3696:	9e e4       	ldi	r25, 0x4E	; 78
    3698:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
write():
C:\Users\Spence\Documents\Arduino\libraries\hd44780/hd44780.h:199
	size_t write(uint8_t value);	// does char & line processing
	size_t _write(uint8_t value);	// does not do char & line processing
// write() overloads for 0 or null which is an int
// This is only because Print class doesn't do it.
	inline size_t write(unsigned int value) { return(write((uint8_t)value)); }
	inline size_t write(int value) { return(write((uint8_t)value)); }
    369c:	6f e7       	ldi	r22, 0x7F	; 127
    369e:	85 e1       	ldi	r24, 0x15	; 21
    36a0:	9e e4       	ldi	r25, 0x4E	; 78
    36a2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <hd44780::write(unsigned char)>
    36a6:	a3 cf       	rjmp	.-186    	; 0x35ee <main+0x766>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:569
    lcd.write(0x7F);
  } else {
    lcd.setCursor(2, 0);
    36a8:	62 e0       	ldi	r22, 0x02	; 2
    36aa:	85 e1       	ldi	r24, 0x15	; 21
    36ac:	9e e4       	ldi	r25, 0x4E	; 78
    36ae:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:570
    lcd.print(F("PLAY WITH ME"));
    36b2:	64 e1       	ldi	r22, 0x14	; 20
    36b4:	77 e0       	ldi	r23, 0x07	; 7
    36b6:	85 e1       	ldi	r24, 0x15	; 21
    36b8:	9e e4       	ldi	r25, 0x4E	; 78
    36ba:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:571
    lcd.setCursor(0, 1);
    36be:	41 e0       	ldi	r20, 0x01	; 1
    36c0:	60 e0       	ldi	r22, 0x00	; 0
    36c2:	85 e1       	ldi	r24, 0x15	; 21
    36c4:	9e e4       	ldi	r25, 0x4E	; 78
    36c6:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
random():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
    36ca:	5a d6       	rcall	.+3252   	; 0x4380 <random>
    36cc:	22 e0       	ldi	r18, 0x02	; 2
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	40 e0       	ldi	r20, 0x00	; 0
    36d2:	50 e0       	ldi	r21, 0x00	; 0
    36d4:	aa d6       	rcall	.+3412   	; 0x442a <__divmodsi4>
doAttractLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:573
    byte r = random(0, 2);
    if (r == 0) {
    36d6:	61 11       	cpse	r22, r1
    36d8:	03 c0       	rjmp	.+6      	; 0x36e0 <main+0x858>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:574
      lcd.print(F("USE KNOBS&BUTTON"));
    36da:	63 e0       	ldi	r22, 0x03	; 3
    36dc:	77 e0       	ldi	r23, 0x07	; 7
    36de:	84 ce       	rjmp	.-760    	; 0x33e8 <main+0x560>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:575
    } else if (r == 1) {
    36e0:	61 30       	cpi	r22, 0x01	; 1
    36e2:	19 f4       	brne	.+6      	; 0x36ea <main+0x862>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:576
      lcd.print(F("TURN MY KNOBS ;)"));
    36e4:	62 ef       	ldi	r22, 0xF2	; 242
    36e6:	76 e0       	ldi	r23, 0x06	; 6
    36e8:	7f ce       	rjmp	.-770    	; 0x33e8 <main+0x560>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:578
    } else {
      lcd.print(F("ADJUST LIGHTING"));
    36ea:	62 ee       	ldi	r22, 0xE2	; 226
    36ec:	76 e0       	ldi	r23, 0x06	; 6
    36ee:	7c ce       	rjmp	.-776    	; 0x33e8 <main+0x560>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:490
        doAttractLCD();
      }
    }
    return;
  }
  if (attractmode) {
    36f0:	80 91 8c 41 	lds	r24, 0x418C	; 0x80418c <handleLCD()::attractmode>
    36f4:	81 11       	cpse	r24, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:491
    lcd.clear();
    36f6:	0e 94 41 08 	call	0x1082	; 0x1082 <hd44780::clear() [clone .constprop.24]>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:493
  }
  if (uichg & 1 && currentMode == 10) {
    36fa:	10 ff       	sbrs	r17, 0
    36fc:	0d c0       	rjmp	.+26     	; 0x3718 <main+0x890>
    36fe:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    3702:	8a 30       	cpi	r24, 0x0A	; 10
    3704:	49 f4       	brne	.+18     	; 0x3718 <main+0x890>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:494
    if (getPalleteNumber() != drift2_colors) {
    3706:	0e 94 bd 08 	call	0x117a	; 0x117a <getPalleteNumber()>
    370a:	90 91 05 40 	lds	r25, 0x4005	; 0x804005 <handleLCD()::drift2_colors>
    370e:	89 13       	cpse	r24, r25
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:495
      initColorsDrift2();
    3710:	0e 94 0a 10 	call	0x2014	; 0x2014 <initColorsDrift2()>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:497
    }
    initLookupDrift2();
    3714:	0e 94 56 13 	call	0x26ac	; 0x26ac <initLookupDrift2()>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:499
  }
  if (currentMode == 10) {
    3718:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    371c:	8a 30       	cpi	r24, 0x0A	; 10
    371e:	51 f4       	brne	.+20     	; 0x3734 <main+0x8ac>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:500
    if (getPalleteNumber() != drift2_colors) {
    3720:	0e 94 bd 08 	call	0x117a	; 0x117a <getPalleteNumber()>
    3724:	90 91 05 40 	lds	r25, 0x4005	; 0x804005 <handleLCD()::drift2_colors>
    3728:	89 17       	cp	r24, r25
    372a:	21 f0       	breq	.+8      	; 0x3734 <main+0x8ac>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:501
      drift2_colors = getPalleteNumber();
    372c:	0e 94 bd 08 	call	0x117a	; 0x117a <getPalleteNumber()>
    3730:	80 93 05 40 	sts	0x4005, r24	; 0x804005 <handleLCD()::drift2_colors>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:504
    }
  }
  lastInputAt = millis();
    3734:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
    3738:	60 93 8d 41 	sts	0x418D, r22	; 0x80418d <handleLCD()::lastInputAt>
    373c:	70 93 8e 41 	sts	0x418E, r23	; 0x80418e <handleLCD()::lastInputAt+0x1>
    3740:	80 93 8f 41 	sts	0x418F, r24	; 0x80418f <handleLCD()::lastInputAt+0x2>
    3744:	90 93 90 41 	sts	0x4190, r25	; 0x804190 <handleLCD()::lastInputAt+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:505
  if ((uichg & 6) || attractmode ) { //if setting or mode has changed, redraw settings
    3748:	81 2f       	mov	r24, r17
    374a:	86 70       	andi	r24, 0x06	; 6
    374c:	29 f4       	brne	.+10     	; 0x3758 <main+0x8d0>
    374e:	80 91 8c 41 	lds	r24, 0x418C	; 0x80418c <handleLCD()::attractmode>
    3752:	88 23       	and	r24, r24
    3754:	09 f4       	brne	.+2      	; 0x3758 <main+0x8d0>
    3756:	38 c0       	rjmp	.+112    	; 0x37c8 <main+0x940>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:506
    lcd.setCursor(0, 0);
    3758:	40 e0       	ldi	r20, 0x00	; 0
    375a:	60 e0       	ldi	r22, 0x00	; 0
    375c:	85 e1       	ldi	r24, 0x15	; 21
    375e:	9e e4       	ldi	r25, 0x4E	; 78
    3760:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:507
    if (currentMode < 7 ) {
    3764:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    3768:	87 30       	cpi	r24, 0x07	; 7
    376a:	08 f0       	brcs	.+2      	; 0x376e <main+0x8e6>
    376c:	58 c0       	rjmp	.+176    	; 0x381e <main+0x996>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:508
      lcd.print(FLASH(modesL[currentMode][currentSettingLeft]));
    376e:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    3772:	38 e0       	ldi	r19, 0x08	; 8
    3774:	83 9f       	mul	r24, r19
    3776:	c0 01       	movw	r24, r0
    3778:	11 24       	eor	r1, r1
    377a:	e8 0f       	add	r30, r24
    377c:	f9 2f       	mov	r31, r25
    377e:	f1 1d       	adc	r31, r1
    3780:	ee 0f       	add	r30, r30
    3782:	ff 1f       	adc	r31, r31
    3784:	e7 5a       	subi	r30, 0xA7	; 167
    3786:	f7 4f       	sbci	r31, 0xF7	; 247
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:510
    } else {
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
    3788:	65 91       	lpm	r22, Z+
    378a:	74 91       	lpm	r23, Z
    378c:	85 e1       	ldi	r24, 0x15	; 21
    378e:	9e e4       	ldi	r25, 0x4E	; 78
    3790:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:512
    }
    lcd.print(' ');
    3794:	60 e2       	ldi	r22, 0x20	; 32
    3796:	85 e1       	ldi	r24, 0x15	; 21
    3798:	9e e4       	ldi	r25, 0x4E	; 78
    379a:	0e 94 07 05 	call	0xa0e	; 0xa0e <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:513
    lcd.print(FLASH(modesR[currentMode][currentSettingRight]));
    379e:	e0 91 8a 41 	lds	r30, 0x418A	; 0x80418a <currentSettingRight>
    37a2:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    37a6:	48 e0       	ldi	r20, 0x08	; 8
    37a8:	84 9f       	mul	r24, r20
    37aa:	c0 01       	movw	r24, r0
    37ac:	11 24       	eor	r1, r1
    37ae:	e8 0f       	add	r30, r24
    37b0:	f9 2f       	mov	r31, r25
    37b2:	f1 1d       	adc	r31, r1
    37b4:	ee 0f       	add	r30, r30
    37b6:	ff 1f       	adc	r31, r31
    37b8:	ed 56       	subi	r30, 0x6D	; 109
    37ba:	f8 4f       	sbci	r31, 0xF8	; 248
    37bc:	65 91       	lpm	r22, Z+
    37be:	74 91       	lpm	r23, Z
    37c0:	85 e1       	ldi	r24, 0x15	; 21
    37c2:	9e e4       	ldi	r25, 0x4E	; 78
    37c4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:515
  }
  if ((uichg & 7) || attractmode) { //if mode, setting, or value has changed, redraw second line
    37c8:	17 70       	andi	r17, 0x07	; 7
    37ca:	29 f4       	brne	.+10     	; 0x37d6 <main+0x94e>
    37cc:	80 91 8c 41 	lds	r24, 0x418C	; 0x80418c <handleLCD()::attractmode>
    37d0:	88 23       	and	r24, r24
    37d2:	09 f4       	brne	.+2      	; 0x37d6 <main+0x94e>
    37d4:	92 c0       	rjmp	.+292    	; 0x38fa <main+0xa72>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:517
    byte tval;
    if (currentMode > 6) {
    37d6:	e0 91 89 47 	lds	r30, 0x4789	; 0x804789 <currentMode>
    37da:	e7 30       	cpi	r30, 0x07	; 7
    37dc:	40 f1       	brcs	.+80     	; 0x382e <main+0x9a6>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:518
      lcd.setCursor(0, 0);
    37de:	40 e0       	ldi	r20, 0x00	; 0
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	85 e1       	ldi	r24, 0x15	; 21
    37e4:	9e e4       	ldi	r25, 0x4E	; 78
    37e6:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:519
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
    37ea:	e0 91 79 47 	lds	r30, 0x4779	; 0x804779 <currentValueLeft>
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	ee 0f       	add	r30, r30
    37f2:	ff 1f       	adc	r31, r31
    37f4:	ed 5b       	subi	r30, 0xBD	; 189
    37f6:	f7 4f       	sbci	r31, 0xF7	; 247
    37f8:	65 91       	lpm	r22, Z+
    37fa:	74 91       	lpm	r23, Z
    37fc:	85 e1       	ldi	r24, 0x15	; 21
    37fe:	9e e4       	ldi	r25, 0x4E	; 78
    3800:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:520
      lcd.setCursor(0, 1);
    3804:	41 e0       	ldi	r20, 0x01	; 1
    3806:	60 e0       	ldi	r22, 0x00	; 0
    3808:	85 e1       	ldi	r24, 0x15	; 21
    380a:	9e e4       	ldi	r25, 0x4E	; 78
    380c:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:521
      lcd.print(F("    "));
    3810:	6e e8       	ldi	r22, 0x8E	; 142
    3812:	77 e0       	ldi	r23, 0x07	; 7
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:530
      lcd.print(tval);
      lcd.print(' ');
      if (tval < 10) lcd.print(' ');
    } else {
      lcd.setCursor(0, 1);
      lcd.print(F("    "));
    3814:	85 e1       	ldi	r24, 0x15	; 21
    3816:	9e e4       	ldi	r25, 0x4E	; 78
    3818:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
    381c:	35 c0       	rjmp	.+106    	; 0x3888 <main+0xa00>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:510
  if ((uichg & 6) || attractmode ) { //if setting or mode has changed, redraw settings
    lcd.setCursor(0, 0);
    if (currentMode < 7 ) {
      lcd.print(FLASH(modesL[currentMode][currentSettingLeft]));
    } else {
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
    381e:	e0 91 79 47 	lds	r30, 0x4779	; 0x804779 <currentValueLeft>
    3822:	f0 e0       	ldi	r31, 0x00	; 0
    3824:	ee 0f       	add	r30, r30
    3826:	ff 1f       	adc	r31, r31
    3828:	ed 5b       	subi	r30, 0xBD	; 189
    382a:	f7 4f       	sbci	r31, 0xF7	; 247
    382c:	ad cf       	rjmp	.-166    	; 0x3788 <main+0x900>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:522
    if (currentMode > 6) {
      lcd.setCursor(0, 0);
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
      lcd.setCursor(0, 1);
      lcd.print(F("    "));
    } else if (pgm_read_byte_near(&maxSetting[currentMode][0]) != 255) {
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	ee 0f       	add	r30, r30
    3832:	ff 1f       	adc	r31, r31
    3834:	e8 58       	subi	r30, 0x88	; 136
    3836:	f8 4f       	sbci	r31, 0xF8	; 248
    3838:	e4 91       	lpm	r30, Z
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:523
      lcd.setCursor(0, 1);
    383a:	41 e0       	ldi	r20, 0x01	; 1
    383c:	60 e0       	ldi	r22, 0x00	; 0
    383e:	85 e1       	ldi	r24, 0x15	; 21
    3840:	9e e4       	ldi	r25, 0x4E	; 78
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:522
    if (currentMode > 6) {
      lcd.setCursor(0, 0);
      lcd.print(FLASH(palleteNames[currentValueLeft[0]]));
      lcd.setCursor(0, 1);
      lcd.print(F("    "));
    } else if (pgm_read_byte_near(&maxSetting[currentMode][0]) != 255) {
    3842:	ef 3f       	cpi	r30, 0xFF	; 255
    3844:	09 f4       	brne	.+2      	; 0x3848 <main+0x9c0>
    3846:	5c c0       	rjmp	.+184    	; 0x3900 <main+0xa78>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:523
      lcd.setCursor(0, 1);
    3848:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:524
      tval = getLeftVal(currentValueLeft[currentSettingLeft]);
    384c:	e0 91 8b 41 	lds	r30, 0x418B	; 0x80418b <currentSettingLeft>
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	e7 58       	subi	r30, 0x87	; 135
    3854:	f8 4b       	sbci	r31, 0xB8	; 184
    3856:	80 81       	ld	r24, Z
    3858:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    385c:	18 2f       	mov	r17, r24
print():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:73
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    385e:	48 2f       	mov	r20, r24
    3860:	50 e0       	ldi	r21, 0x00	; 0
    3862:	70 e0       	ldi	r23, 0x00	; 0
    3864:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    3866:	2a e0       	ldi	r18, 0x0A	; 10
    3868:	85 e1       	ldi	r24, 0x15	; 21
    386a:	9e e4       	ldi	r25, 0x4E	; 78
    386c:	0e 94 6d 10 	call	0x20da	; 0x20da <Print::printNumber(unsigned long, unsigned char)>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:526
      lcd.print(tval);
      lcd.print(' ');
    3870:	60 e2       	ldi	r22, 0x20	; 32
    3872:	85 e1       	ldi	r24, 0x15	; 21
    3874:	9e e4       	ldi	r25, 0x4E	; 78
    3876:	0e 94 07 05 	call	0xa0e	; 0xa0e <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:527
      if (tval < 10) lcd.print(' ');
    387a:	1a 30       	cpi	r17, 0x0A	; 10
    387c:	28 f4       	brcc	.+10     	; 0x3888 <main+0xa00>
    387e:	60 e2       	ldi	r22, 0x20	; 32
    3880:	85 e1       	ldi	r24, 0x15	; 21
    3882:	9e e4       	ldi	r25, 0x4E	; 78
    3884:	0e 94 07 05 	call	0xa0e	; 0xa0e <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:532
    } else {
      lcd.setCursor(0, 1);
      lcd.print(F("    "));
    }
    lcd.setCursor(4, 1);
    3888:	41 e0       	ldi	r20, 0x01	; 1
    388a:	64 e0       	ldi	r22, 0x04	; 4
    388c:	85 e1       	ldi	r24, 0x15	; 21
    388e:	9e e4       	ldi	r25, 0x4E	; 78
    3890:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:533
    lcd.print(FLASH(modeNames[currentMode]));
    3894:	e0 91 89 47 	lds	r30, 0x4789	; 0x804789 <currentMode>
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	ee 0f       	add	r30, r30
    389c:	ff 1f       	adc	r31, r31
    389e:	e3 5a       	subi	r30, 0xA3	; 163
    38a0:	f8 4f       	sbci	r31, 0xF8	; 248
    38a2:	65 91       	lpm	r22, Z+
    38a4:	74 91       	lpm	r23, Z
    38a6:	85 e1       	ldi	r24, 0x15	; 21
    38a8:	9e e4       	ldi	r25, 0x4E	; 78
    38aa:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:534
    lcd.setCursor(13, 1);
    38ae:	41 e0       	ldi	r20, 0x01	; 1
    38b0:	6d e0       	ldi	r22, 0x0D	; 13
    38b2:	85 e1       	ldi	r24, 0x15	; 21
    38b4:	9e e4       	ldi	r25, 0x4E	; 78
    38b6:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:535
    if (pgm_read_byte_near(&maxValueRight[currentMode][currentSettingRight]) == 1) { //if max is 1, that means it's forward/reverse
    38ba:	e0 91 8a 41 	lds	r30, 0x418A	; 0x80418a <currentSettingRight>
    38be:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    38c2:	58 e0       	ldi	r21, 0x08	; 8
    38c4:	85 9f       	mul	r24, r21
    38c6:	c0 01       	movw	r24, r0
    38c8:	11 24       	eor	r1, r1
    38ca:	e8 0f       	add	r30, r24
    38cc:	f9 2f       	mov	r31, r25
    38ce:	f1 1d       	adc	r31, r1
    38d0:	ec 5a       	subi	r30, 0xAC	; 172
    38d2:	f6 4f       	sbci	r31, 0xF6	; 246
    38d4:	e4 91       	lpm	r30, Z
    38d6:	e1 30       	cpi	r30, 0x01	; 1
    38d8:	c1 f4       	brne	.+48     	; 0x390a <main+0xa82>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:536
      if (currentValueRight[currentSettingRight]) {
    38da:	e0 91 8a 41 	lds	r30, 0x418A	; 0x80418a <currentSettingRight>
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	ef 57       	subi	r30, 0x7F	; 127
    38e2:	f8 4b       	sbci	r31, 0xB8	; 184
    38e4:	80 81       	ld	r24, Z
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:537
        lcd.print(F("REV"));
    38e6:	69 e5       	ldi	r22, 0x59	; 89
    38e8:	77 e0       	ldi	r23, 0x07	; 7
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:536
    }
    lcd.setCursor(4, 1);
    lcd.print(FLASH(modeNames[currentMode]));
    lcd.setCursor(13, 1);
    if (pgm_read_byte_near(&maxValueRight[currentMode][currentSettingRight]) == 1) { //if max is 1, that means it's forward/reverse
      if (currentValueRight[currentSettingRight]) {
    38ea:	81 11       	cpse	r24, r1
    38ec:	02 c0       	rjmp	.+4      	; 0x38f2 <main+0xa6a>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:539
        lcd.print(F("REV"));
      } else {
        lcd.print(F("FWD"));
    38ee:	65 e5       	ldi	r22, 0x55	; 85
    38f0:	77 e0       	ldi	r23, 0x07	; 7
    38f2:	85 e1       	ldi	r24, 0x15	; 21
    38f4:	9e e4       	ldi	r25, 0x4E	; 78
    38f6:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Print::print(__FlashStringHelper const*)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:552
      } else {
        lcd.print(' ');
      }
    }
  }
  attractmode = 0;
    38fa:	10 92 8c 41 	sts	0x418C, r1	; 0x80418c <handleLCD()::attractmode>
    38fe:	77 ce       	rjmp	.-786    	; 0x35ee <main+0x766>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:529
      tval = getLeftVal(currentValueLeft[currentSettingLeft]);
      lcd.print(tval);
      lcd.print(' ');
      if (tval < 10) lcd.print(' ');
    } else {
      lcd.setCursor(0, 1);
    3900:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:530
      lcd.print(F("    "));
    3904:	63 e7       	ldi	r22, 0x73	; 115
    3906:	77 e0       	ldi	r23, 0x07	; 7
    3908:	85 cf       	rjmp	.-246    	; 0x3814 <main+0x98c>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:542
        lcd.print(F("REV"));
      } else {
        lcd.print(F("FWD"));
      }
    } else {
      tval = currentValueRight[currentSettingRight];
    390a:	e0 91 8a 41 	lds	r30, 0x418A	; 0x80418a <currentSettingRight>
    390e:	f0 e0       	ldi	r31, 0x00	; 0
    3910:	ef 57       	subi	r30, 0x7F	; 127
    3912:	f8 4b       	sbci	r31, 0xB8	; 184
    3914:	10 81       	ld	r17, Z
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:543
      if (tval < 100) lcd.print(' ');
    3916:	14 36       	cpi	r17, 0x64	; 100
    3918:	60 f4       	brcc	.+24     	; 0x3932 <main+0xaaa>
    391a:	60 e2       	ldi	r22, 0x20	; 32
    391c:	85 e1       	ldi	r24, 0x15	; 21
    391e:	9e e4       	ldi	r25, 0x4E	; 78
    3920:	0e 94 07 05 	call	0xa0e	; 0xa0e <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:544
      if (tval < 10) lcd.print(' ');
    3924:	1a 30       	cpi	r17, 0x0A	; 10
    3926:	28 f4       	brcc	.+10     	; 0x3932 <main+0xaaa>
    3928:	60 e2       	ldi	r22, 0x20	; 32
    392a:	85 e1       	ldi	r24, 0x15	; 21
    392c:	9e e4       	ldi	r25, 0x4E	; 78
    392e:	0e 94 07 05 	call	0xa0e	; 0xa0e <Print::print(char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:545
      if (pgm_read_byte_near(&maxValueRight[currentMode][currentSettingRight])) { //if max is 0, then this is blank
    3932:	e0 91 8a 41 	lds	r30, 0x418A	; 0x80418a <currentSettingRight>
    3936:	80 91 89 47 	lds	r24, 0x4789	; 0x804789 <currentMode>
    393a:	68 e0       	ldi	r22, 0x08	; 8
    393c:	86 9f       	mul	r24, r22
    393e:	c0 01       	movw	r24, r0
    3940:	11 24       	eor	r1, r1
    3942:	e8 0f       	add	r30, r24
    3944:	f9 2f       	mov	r31, r25
    3946:	f1 1d       	adc	r31, r1
    3948:	ec 5a       	subi	r30, 0xAC	; 172
    394a:	f6 4f       	sbci	r31, 0xF6	; 246
    394c:	e4 91       	lpm	r30, Z
    394e:	ee 23       	and	r30, r30
    3950:	51 f0       	breq	.+20     	; 0x3966 <main+0xade>
print():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:73
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    3952:	41 2f       	mov	r20, r17
    3954:	50 e0       	ldi	r21, 0x00	; 0
    3956:	70 e0       	ldi	r23, 0x00	; 0
    3958:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Print.cpp:105
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    395a:	2a e0       	ldi	r18, 0x0A	; 10
    395c:	85 e1       	ldi	r24, 0x15	; 21
    395e:	9e e4       	ldi	r25, 0x4E	; 78
    3960:	0e 94 6d 10 	call	0x20da	; 0x20da <Print::printNumber(unsigned long, unsigned char)>
    3964:	ca cf       	rjmp	.-108    	; 0x38fa <main+0xa72>
handleLCD():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:548
        lcd.print(tval);
      } else {
        lcd.print(' ');
    3966:	60 e2       	ldi	r22, 0x20	; 32
    3968:	85 e1       	ldi	r24, 0x15	; 21
    396a:	9e e4       	ldi	r25, 0x4E	; 78
    396c:	0e 94 07 05 	call	0xa0e	; 0xa0e <Print::print(char)>
    3970:	c4 cf       	rjmp	.-120    	; 0x38fa <main+0xa72>
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:588
void updatePattern() {
  if (currentMode == 0) {
    for (unsigned int i = 0; i < LENGTH * 3; i++) {
      pixels[i] = getLeftVal(currentValueLeft[i % 3]);
    }
  } else if (currentMode == 1) {
    3972:	01 30       	cpi	r16, 0x01	; 1
    3974:	09 f0       	breq	.+2      	; 0x3978 <main+0xaf0>
    3976:	75 c0       	rjmp	.+234    	; 0x3a62 <main+0xbda>
updatePatternDrift():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:855

/*
   Below this are pattern handlers that have not been updated since getModeColors()
*/
void updatePatternDrift() {
  byte driftchance = 16 + currentValueRight[0] * 10;
    3978:	00 91 81 47 	lds	r16, 0x4781	; 0x804781 <currentValueRight>
    397c:	8a e0       	ldi	r24, 0x0A	; 10
    397e:	08 9f       	mul	r16, r24
    3980:	00 2d       	mov	r16, r0
    3982:	11 24       	eor	r1, r1
    3984:	00 5f       	subi	r16, 0xF0	; 240
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:856
  byte randinc = 255 - driftchance;
    3986:	80 2e       	mov	r8, r16
    3988:	80 94       	com	r8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:862
  byte randdec = driftchance;
  for (unsigned int i = 0; i < (LENGTH * 3); i++) {
    byte tem = i % 3;
    tem *= 2;
    byte rand = random(255);
    if (rand > (pixels[i] > 32 ? randinc : (randinc + driftchance / 2)) && (pixels[i] < getLeftVal(currentValueLeft[tem + 1]))) {
    398a:	91 2c       	mov	r9, r1
    398c:	80 2f       	mov	r24, r16
    398e:	86 95       	lsr	r24
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	a4 01       	movw	r20, r8
    3994:	48 0f       	add	r20, r24
    3996:	59 1f       	adc	r21, r25
    3998:	4d 87       	std	Y+13, r20	; 0x0d
    399a:	5e 87       	std	Y+14, r21	; 0x0e
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:868
      if (pixels[i] > 128 && pixels[i] < 254) {
        pixels[i] += 2;
      } else {
        pixels[i]++;
      }
    } else if (rand < (pixels[i] > 32 ? randdec : (randdec - driftchance / 2)) && (pixels[i] > getLeftVal(currentValueLeft[tem]))) {
    399c:	10 e0       	ldi	r17, 0x00	; 0
    399e:	f8 01       	movw	r30, r16
    39a0:	e8 1b       	sub	r30, r24
    39a2:	f9 0b       	sbc	r31, r25
    39a4:	ef 87       	std	Y+15, r30	; 0x0f
    39a6:	f8 8b       	std	Y+16, r31	; 0x10
    39a8:	46 e2       	ldi	r20, 0x26	; 38
    39aa:	e4 2e       	mov	r14, r20
    39ac:	48 e4       	ldi	r20, 0x48	; 72
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:858
*/
void updatePatternDrift() {
  byte driftchance = 16 + currentValueRight[0] * 10;
  byte randinc = 255 - driftchance;
  byte randdec = driftchance;
  for (unsigned int i = 0; i < (LENGTH * 3); i++) {
    39ae:	f4 2e       	mov	r15, r20
main():
    39b0:	b1 2c       	mov	r11, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:859
    byte tem = i % 3;
    39b2:	a1 2c       	mov	r10, r1
updatePatternDrift():
    39b4:	c5 01       	movw	r24, r10
    39b6:	63 e0       	ldi	r22, 0x03	; 3
    39b8:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:860
    tem *= 2;
    39ba:	bd d7       	rcall	.+3962   	; 0x4936 <__udivmodhi4>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
    39bc:	78 2e       	mov	r7, r24
    39be:	77 0c       	add	r7, r7
random():
    39c0:	df d4       	rcall	.+2494   	; 0x4380 <random>
    39c2:	a2 01       	movw	r20, r4
    39c4:	91 01       	movw	r18, r2
    39c6:	31 d5       	rcall	.+2658   	; 0x442a <__divmodsi4>
updatePatternDrift():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:862
    byte rand = random(255);
    if (rand > (pixels[i] > 32 ? randinc : (randinc + driftchance / 2)) && (pixels[i] < getLeftVal(currentValueLeft[tem + 1]))) {
    39c8:	c6 2e       	mov	r12, r22
    39ca:	d1 2c       	mov	r13, r1
    39cc:	f7 01       	movw	r30, r14
    39ce:	60 80       	ld	r6, Z
    39d0:	f0 e2       	ldi	r31, 0x20	; 32
    39d2:	f6 15       	cp	r31, r6
    39d4:	a0 f4       	brcc	.+40     	; 0x39fe <main+0xb76>
    39d6:	8c 14       	cp	r8, r12
    39d8:	9d 04       	cpc	r9, r13
    39da:	ec f4       	brge	.+58     	; 0x3a16 <main+0xb8e>
    39dc:	e7 2d       	mov	r30, r7
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	e6 58       	subi	r30, 0x86	; 134
    39e2:	f8 4b       	sbci	r31, 0xB8	; 184
    39e4:	80 81       	ld	r24, Z
    39e6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    39ea:	f7 01       	movw	r30, r14
    39ec:	90 81       	ld	r25, Z
    39ee:	68 16       	cp	r6, r24
    39f0:	70 f4       	brcc	.+28     	; 0x3a0e <main+0xb86>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:863
      if (pixels[i] > 128 && pixels[i] < 254) {
    39f2:	8f e7       	ldi	r24, 0x7F	; 127
    39f4:	89 0f       	add	r24, r25
    39f6:	8d 37       	cpi	r24, 0x7D	; 125
    39f8:	10 f1       	brcs	.+68     	; 0x3a3e <main+0xbb6>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:866
        pixels[i] += 2;
      } else {
        pixels[i]++;
    39fa:	9f 5f       	subi	r25, 0xFF	; 255
    39fc:	21 c0       	rjmp	.+66     	; 0x3a40 <main+0xbb8>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:862
  byte randdec = driftchance;
  for (unsigned int i = 0; i < (LENGTH * 3); i++) {
    byte tem = i % 3;
    tem *= 2;
    byte rand = random(255);
    if (rand > (pixels[i] > 32 ? randinc : (randinc + driftchance / 2)) && (pixels[i] < getLeftVal(currentValueLeft[tem + 1]))) {
    39fe:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a00:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a02:	2c 15       	cp	r18, r12
    3a04:	3d 05       	cpc	r19, r13
    3a06:	54 f3       	brlt	.-44     	; 0x39dc <main+0xb54>
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:868
      if (pixels[i] > 128 && pixels[i] < 254) {
        pixels[i] += 2;
      } else {
        pixels[i]++;
      }
    } else if (rand < (pixels[i] > 32 ? randdec : (randdec - driftchance / 2)) && (pixels[i] > getLeftVal(currentValueLeft[tem]))) {
    3a08:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a0a:	98 89       	ldd	r25, Y+16	; 0x10
    3a0c:	05 c0       	rjmp	.+10     	; 0x3a18 <main+0xb90>
updatePatternDrift():
    3a0e:	69 2e       	mov	r6, r25
    3a10:	f0 e2       	ldi	r31, 0x20	; 32
    3a12:	f9 17       	cp	r31, r25
    3a14:	c8 f7       	brcc	.-14     	; 0x3a08 <main+0xb80>
main():
    3a16:	c8 01       	movw	r24, r16
updatePatternDrift():
    3a18:	c8 16       	cp	r12, r24
    3a1a:	d9 06       	cpc	r13, r25
    3a1c:	9c f4       	brge	.+38     	; 0x3a44 <main+0xbbc>
    3a1e:	e7 2d       	mov	r30, r7
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	e7 58       	subi	r30, 0x87	; 135
    3a24:	f8 4b       	sbci	r31, 0xB8	; 184
    3a26:	80 81       	ld	r24, Z
    3a28:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3a2c:	86 15       	cp	r24, r6
    3a2e:	50 f4       	brcc	.+20     	; 0x3a44 <main+0xbbc>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:869
      if (pixels[i] > 128) {
    3a30:	f7 01       	movw	r30, r14
    3a32:	80 81       	ld	r24, Z
    3a34:	81 38       	cpi	r24, 0x81	; 129
    3a36:	98 f0       	brcs	.+38     	; 0x3a5e <main+0xbd6>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:870
        pixels[i] -= 2;
    3a38:	82 50       	subi	r24, 0x02	; 2
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:872
      } else {
        pixels[i]--;
    3a3a:	80 83       	st	Z, r24
    3a3c:	03 c0       	rjmp	.+6      	; 0x3a44 <main+0xbbc>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:864
    byte tem = i % 3;
    tem *= 2;
    byte rand = random(255);
    if (rand > (pixels[i] > 32 ? randinc : (randinc + driftchance / 2)) && (pixels[i] < getLeftVal(currentValueLeft[tem + 1]))) {
      if (pixels[i] > 128 && pixels[i] < 254) {
        pixels[i] += 2;
    3a3e:	9e 5f       	subi	r25, 0xFE	; 254
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:866
      } else {
        pixels[i]++;
    3a40:	f7 01       	movw	r30, r14
    3a42:	90 83       	st	Z, r25
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:858
*/
void updatePatternDrift() {
  byte driftchance = 16 + currentValueRight[0] * 10;
  byte randinc = 255 - driftchance;
  byte randdec = driftchance;
  for (unsigned int i = 0; i < (LENGTH * 3); i++) {
    3a44:	ff ef       	ldi	r31, 0xFF	; 255
    3a46:	af 1a       	sub	r10, r31
    3a48:	bf 0a       	sbc	r11, r31
    3a4a:	2f ef       	ldi	r18, 0xFF	; 255
    3a4c:	e2 1a       	sub	r14, r18
    3a4e:	f2 0a       	sbc	r15, r18
    3a50:	3c ed       	ldi	r19, 0xDC	; 220
    3a52:	a3 16       	cp	r10, r19
    3a54:	35 e0       	ldi	r19, 0x05	; 5
    3a56:	b3 06       	cpc	r11, r19
    3a58:	09 f0       	breq	.+2      	; 0x3a5c <main+0xbd4>
    3a5a:	ac cf       	rjmp	.-168    	; 0x39b4 <main+0xb2c>
    3a5c:	ed cd       	rjmp	.-1062   	; 0x3638 <main+0x7b0>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:872
      }
    } else if (rand < (pixels[i] > 32 ? randdec : (randdec - driftchance / 2)) && (pixels[i] > getLeftVal(currentValueLeft[tem]))) {
      if (pixels[i] > 128) {
        pixels[i] -= 2;
      } else {
        pixels[i]--;
    3a5e:	81 50       	subi	r24, 0x01	; 1
    3a60:	ec cf       	rjmp	.-40     	; 0x3a3a <main+0xbb2>
updatePattern():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:592
    }
  } else if (currentMode == 1) {
    updatePatternDrift();
    //} else if (currentMode == 2) {
    //updatePatternComets();
  } else if (currentMode == 3) {
    3a62:	03 30       	cpi	r16, 0x03	; 3
    3a64:	09 f0       	breq	.+2      	; 0x3a68 <main+0xbe0>
    3a66:	21 c1       	rjmp	.+578    	; 0x3caa <main+0xe22>
    3a68:	39 e9       	ldi	r19, 0x99	; 153
    3a6a:	e3 2e       	mov	r14, r19
    3a6c:	31 e4       	ldi	r19, 0x41	; 65
    3a6e:	f3 2e       	mov	r15, r19
    3a70:	06 e2       	ldi	r16, 0x26	; 38
    3a72:	18 e4       	ldi	r17, 0x48	; 72
updatePatternPulse():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:880
  }
}

void updatePatternPulse() {
  for (int  i = 0; i < (LENGTH * 3) - 2; i += 3) {
    byte max_r = (scratch[i] & 0x7C) >> 2;
    3a74:	f7 01       	movw	r30, r14
    3a76:	80 81       	ld	r24, Z
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	9c 01       	movw	r18, r24
    3a7c:	35 95       	asr	r19
    3a7e:	27 95       	ror	r18
    3a80:	35 95       	asr	r19
    3a82:	27 95       	ror	r18
    3a84:	f2 2f       	mov	r31, r18
    3a86:	ff 71       	andi	r31, 0x1F	; 31
    3a88:	6f 2e       	mov	r6, r31
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:881
    byte max_g = (((scratch[i] & 0x02) << 3) | ((scratch[i + 1] >> 5))); //dont need to mask the low 5 bits here because we're just pushing them off the edge
    3a8a:	f7 01       	movw	r30, r14
    3a8c:	41 81       	ldd	r20, Z+1	; 0x01
    3a8e:	9c 01       	movw	r18, r24
    3a90:	73 e0       	ldi	r23, 0x03	; 3
    3a92:	22 0f       	add	r18, r18
    3a94:	33 1f       	adc	r19, r19
    3a96:	7a 95       	dec	r23
    3a98:	e1 f7       	brne	.-8      	; 0x3a92 <main+0xc0a>
    3a9a:	20 71       	andi	r18, 0x10	; 16
    3a9c:	94 2e       	mov	r9, r20
    3a9e:	92 94       	swap	r9
    3aa0:	96 94       	lsr	r9
    3aa2:	a7 e0       	ldi	r26, 0x07	; 7
    3aa4:	9a 22       	and	r9, r26
    3aa6:	92 2a       	or	r9, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:882
    byte max_b = (scratch[i + 1]) & 0x1F;
    3aa8:	4f 71       	andi	r20, 0x1F	; 31
    3aaa:	74 2e       	mov	r7, r20
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:883
    byte speed = 1 + (scratch[i + 2] >> 6);
    3aac:	22 81       	ldd	r18, Z+2	; 0x02
    3aae:	82 2e       	mov	r8, r18
    3ab0:	82 94       	swap	r8
    3ab2:	86 94       	lsr	r8
    3ab4:	86 94       	lsr	r8
    3ab6:	b3 e0       	ldi	r27, 0x03	; 3
    3ab8:	8b 22       	and	r8, r27
    3aba:	83 94       	inc	r8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:884
    byte bright = scratch[i + 2] & 0x3F;
    3abc:	2f 73       	andi	r18, 0x3F	; 63
    3abe:	a2 2e       	mov	r10, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:885
    byte dir = (scratch[i] >> 7);
    3ac0:	88 0f       	add	r24, r24
    3ac2:	89 2f       	mov	r24, r25
    3ac4:	88 1f       	adc	r24, r24
    3ac6:	99 0b       	sbc	r25, r25
    3ac8:	b8 2e       	mov	r11, r24
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:886
    if (!(max_r + max_b + max_g)) { // need to consider generating new target
    3aca:	26 2d       	mov	r18, r6
    3acc:	24 0f       	add	r18, r20
    3ace:	33 27       	eor	r19, r19
    3ad0:	33 1f       	adc	r19, r19
    3ad2:	c9 01       	movw	r24, r18
    3ad4:	89 0d       	add	r24, r9
    3ad6:	91 1d       	adc	r25, r1
    3ad8:	89 2b       	or	r24, r25
    3ada:	09 f0       	breq	.+2      	; 0x3ade <main+0xc56>
    3adc:	8f c0       	rjmp	.+286    	; 0x3bfc <main+0xd74>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:887
      if (random(0, (currentValueRight[0] + 2) * 4 * pgm_read_byte_near(&maxValueRight[currentMode][1])) < currentValueRight[1]) {
    3ade:	80 91 81 47 	lds	r24, 0x4781	; 0x804781 <currentValueRight>
    3ae2:	e0 91 89 47 	lds	r30, 0x4789	; 0x804789 <currentMode>
    3ae6:	38 e0       	ldi	r19, 0x08	; 8
    3ae8:	e3 9f       	mul	r30, r19
    3aea:	f0 01       	movw	r30, r0
    3aec:	11 24       	eor	r1, r1
    3aee:	eb 5a       	subi	r30, 0xAB	; 171
    3af0:	f6 4f       	sbci	r31, 0xF6	; 246
    3af2:	e4 91       	lpm	r30, Z
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	02 96       	adiw	r24, 0x02	; 2
    3af8:	88 0f       	add	r24, r24
    3afa:	99 1f       	adc	r25, r25
    3afc:	88 0f       	add	r24, r24
    3afe:	99 1f       	adc	r25, r25
    3b00:	e8 9f       	mul	r30, r24
    3b02:	90 01       	movw	r18, r0
    3b04:	e9 9f       	mul	r30, r25
    3b06:	30 0d       	add	r19, r0
    3b08:	11 24       	eor	r1, r1
    3b0a:	03 2e       	mov	r0, r19
    3b0c:	00 0c       	add	r0, r0
    3b0e:	44 0b       	sbc	r20, r20
    3b10:	55 0b       	sbc	r21, r21
    3b12:	60 e0       	ldi	r22, 0x00	; 0
    3b14:	70 e0       	ldi	r23, 0x00	; 0
    3b16:	cb 01       	movw	r24, r22
    3b18:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <random(long, long)>
    3b1c:	20 91 82 47 	lds	r18, 0x4782	; 0x804782 <currentValueRight+0x1>
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	50 e0       	ldi	r21, 0x00	; 0
    3b24:	40 e0       	ldi	r20, 0x00	; 0
    3b26:	62 17       	cp	r22, r18
    3b28:	73 07       	cpc	r23, r19
    3b2a:	84 07       	cpc	r24, r20
    3b2c:	95 07       	cpc	r25, r21
    3b2e:	84 f5       	brge	.+96     	; 0x3b90 <main+0xd08>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:888
        max_r = random(currentValueLeft[0], currentValueLeft[1]);
    3b30:	20 91 7a 47 	lds	r18, 0x477A	; 0x80477a <currentValueLeft+0x1>
    3b34:	60 91 79 47 	lds	r22, 0x4779	; 0x804779 <currentValueLeft>
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	50 e0       	ldi	r21, 0x00	; 0
    3b3c:	40 e0       	ldi	r20, 0x00	; 0
    3b3e:	70 e0       	ldi	r23, 0x00	; 0
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	80 e0       	ldi	r24, 0x00	; 0
    3b44:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <random(long, long)>
    3b48:	66 2e       	mov	r6, r22
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:889
        max_g = random(currentValueLeft[2], currentValueLeft[3]);
    3b4a:	20 91 7c 47 	lds	r18, 0x477C	; 0x80477c <currentValueLeft+0x3>
    3b4e:	60 91 7b 47 	lds	r22, 0x477B	; 0x80477b <currentValueLeft+0x2>
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	50 e0       	ldi	r21, 0x00	; 0
    3b56:	40 e0       	ldi	r20, 0x00	; 0
    3b58:	70 e0       	ldi	r23, 0x00	; 0
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <random(long, long)>
    3b62:	96 2e       	mov	r9, r22
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:890
        max_b = random(currentValueLeft[4], currentValueLeft[5]);
    3b64:	20 91 7e 47 	lds	r18, 0x477E	; 0x80477e <currentValueLeft+0x5>
    3b68:	60 91 7d 47 	lds	r22, 0x477D	; 0x80477d <currentValueLeft+0x4>
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	50 e0       	ldi	r21, 0x00	; 0
    3b70:	40 e0       	ldi	r20, 0x00	; 0
    3b72:	70 e0       	ldi	r23, 0x00	; 0
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <random(long, long)>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
    3b7c:	76 2e       	mov	r7, r22
random():
    3b7e:	00 d4       	rcall	.+2048   	; 0x4380 <random>
    3b80:	23 e0       	ldi	r18, 0x03	; 3
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	40 e0       	ldi	r20, 0x00	; 0
    3b86:	50 e0       	ldi	r21, 0x00	; 0
    3b88:	50 d4       	rcall	.+2208   	; 0x442a <__divmodsi4>
updatePatternPulse():
    3b8a:	86 2e       	mov	r8, r22
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:891
        speed = random(0, 3);
    3b8c:	b1 2c       	mov	r11, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:893
        bright = 0;
        dir = 0;
    3b8e:	a1 2c       	mov	r10, r1
updatePatternPulse():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:892
      if (random(0, (currentValueRight[0] + 2) * 4 * pgm_read_byte_near(&maxValueRight[currentMode][1])) < currentValueRight[1]) {
        max_r = random(currentValueLeft[0], currentValueLeft[1]);
        max_g = random(currentValueLeft[2], currentValueLeft[3]);
        max_b = random(currentValueLeft[4], currentValueLeft[5]);
        speed = random(0, 3);
        bright = 0;
    3b90:	f8 01       	movw	r30, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:895
        dir = 0;
      }
      pixels[i] = 0;
    3b92:	10 82       	st	Z, r1
    3b94:	11 82       	std	Z+1, r1	; 0x01
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:896
      pixels[i + 1] = 0;
    3b96:	12 82       	std	Z+2, r1	; 0x02
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:897
      pixels[i + 2] = 0;
    3b98:	49 2d       	mov	r20, r9
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:928
            }
          }
        }
      }
    }
    scratch[i] = (dir << 7) | (max_r << 2) | (max_g >> 3);
    3b9a:	50 e0       	ldi	r21, 0x00	; 0
    3b9c:	20 e8       	ldi	r18, 0x80	; 128
    3b9e:	b2 9e       	mul	r11, r18
    3ba0:	c0 01       	movw	r24, r0
    3ba2:	11 24       	eor	r1, r1
    3ba4:	64 e0       	ldi	r22, 0x04	; 4
    3ba6:	66 9e       	mul	r6, r22
    3ba8:	90 01       	movw	r18, r0
    3baa:	11 24       	eor	r1, r1
    3bac:	82 2b       	or	r24, r18
    3bae:	9a 01       	movw	r18, r20
    3bb0:	93 e0       	ldi	r25, 0x03	; 3
    3bb2:	35 95       	asr	r19
    3bb4:	27 95       	ror	r18
    3bb6:	9a 95       	dec	r25
    3bb8:	e1 f7       	brne	.-8      	; 0x3bb2 <main+0xd2a>
    3bba:	82 2b       	or	r24, r18
    3bbc:	f7 01       	movw	r30, r14
    3bbe:	80 83       	st	Z, r24
    3bc0:	25 e0       	ldi	r18, 0x05	; 5
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:929
    scratch[i + 1] = (max_g << 5) | max_b;
    3bc2:	44 0f       	add	r20, r20
    3bc4:	55 1f       	adc	r21, r21
    3bc6:	2a 95       	dec	r18
    3bc8:	e1 f7       	brne	.-8      	; 0x3bc2 <main+0xd3a>
    3bca:	74 2a       	or	r7, r20
    3bcc:	71 82       	std	Z+1, r7	; 0x01
    3bce:	28 2d       	mov	r18, r8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:930
    scratch[i + 2] = ((speed - 1) << 6) | bright;
    3bd0:	21 50       	subi	r18, 0x01	; 1
    3bd2:	33 0b       	sbc	r19, r19
    3bd4:	49 01       	movw	r8, r18
    3bd6:	36 e0       	ldi	r19, 0x06	; 6
    3bd8:	88 0c       	add	r8, r8
    3bda:	99 1c       	adc	r9, r9
    3bdc:	3a 95       	dec	r19
    3bde:	e1 f7       	brne	.-8      	; 0x3bd8 <main+0xd50>
    3be0:	a8 28       	or	r10, r8
    3be2:	a2 82       	std	Z+2, r10	; 0x02
    3be4:	33 e0       	ldi	r19, 0x03	; 3
    3be6:	e3 0e       	add	r14, r19
    3be8:	f1 1c       	adc	r15, r1
    3bea:	0d 5f       	subi	r16, 0xFD	; 253
    3bec:	1f 4f       	sbci	r17, 0xFF	; 255
    3bee:	45 e7       	ldi	r20, 0x75	; 117
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:879
    }
  }
}

void updatePatternPulse() {
  for (int  i = 0; i < (LENGTH * 3) - 2; i += 3) {
    3bf0:	57 e4       	ldi	r21, 0x47	; 71
    3bf2:	4e 15       	cp	r20, r14
    3bf4:	5f 05       	cpc	r21, r15
    3bf6:	09 f0       	breq	.+2      	; 0x3bfa <main+0xd72>
    3bf8:	3d cf       	rjmp	.-390    	; 0x3a74 <main+0xbec>
    3bfa:	1e cd       	rjmp	.-1476   	; 0x3638 <main+0x7b0>
    3bfc:	28 2d       	mov	r18, r8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:899
      }
      pixels[i] = 0;
      pixels[i + 1] = 0;
      pixels[i + 2] = 0;
    } else {
      if (!(frameNumber % (speed))) {
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	50 e0       	ldi	r21, 0x00	; 0
    3c02:	40 e0       	ldi	r20, 0x00	; 0
    3c04:	60 91 75 47 	lds	r22, 0x4775	; 0x804775 <frameNumber>
    3c08:	70 91 76 47 	lds	r23, 0x4776	; 0x804776 <frameNumber+0x1>
    3c0c:	80 91 77 47 	lds	r24, 0x4777	; 0x804777 <frameNumber+0x2>
    3c10:	90 91 78 47 	lds	r25, 0x4778	; 0x804778 <frameNumber+0x3>
    3c14:	36 d4       	rcall	.+2156   	; 0x4482 <__udivmodsi4>
    3c16:	67 2b       	or	r22, r23
    3c18:	68 2b       	or	r22, r24
    3c1a:	69 2b       	or	r22, r25
    3c1c:	09 f0       	breq	.+2      	; 0x3c20 <main+0xd98>
    3c1e:	bc cf       	rjmp	.-136    	; 0x3b98 <main+0xd10>
    3c20:	bb 20       	and	r11, r11
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:901

        if (dir && !bright) {
    3c22:	59 f0       	breq	.+22     	; 0x3c3a <main+0xdb2>
    3c24:	a1 10       	cpse	r10, r1
    3c26:	09 c0       	rjmp	.+18     	; 0x3c3a <main+0xdb2>
    3c28:	f8 01       	movw	r30, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:903
          dir = 0;
          pixels[i] = 0;
    3c2a:	10 82       	st	Z, r1
    3c2c:	11 82       	std	Z+1, r1	; 0x01
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:904
          pixels[i + 1] = 0;
    3c2e:	12 82       	std	Z+2, r1	; 0x02
main():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:905
          pixels[i + 2] = 0;
    3c30:	b1 2c       	mov	r11, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:902
      pixels[i + 2] = 0;
    } else {
      if (!(frameNumber % (speed))) {

        if (dir && !bright) {
          dir = 0;
    3c32:	71 2c       	mov	r7, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:908
          pixels[i] = 0;
          pixels[i + 1] = 0;
          pixels[i + 2] = 0;
          max_r = 0;
          max_g = 0;
          max_b = 0;
    3c34:	91 2c       	mov	r9, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:907
          dir = 0;
          pixels[i] = 0;
          pixels[i + 1] = 0;
          pixels[i + 2] = 0;
          max_r = 0;
          max_g = 0;
    3c36:	61 2c       	mov	r6, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:906
        if (dir && !bright) {
          dir = 0;
          pixels[i] = 0;
          pixels[i + 1] = 0;
          pixels[i + 2] = 0;
          max_r = 0;
    3c38:	af cf       	rjmp	.-162    	; 0x3b98 <main+0xd10>
updatePatternPulse():
    3c3a:	ea 2d       	mov	r30, r10
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:910
          max_g = 0;
          max_b = 0;
        } else {
          byte nbright = pgm_read_byte_near(&pulseBrightnessTable[bright]);
    3c3c:	f0 e0       	ldi	r31, 0x00	; 0
    3c3e:	e7 5f       	subi	r30, 0xF7	; 247
    3c40:	f6 4f       	sbci	r31, 0xF6	; 246
    3c42:	c4 90       	lpm	r12, Z
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:912
          //byte nbright = bright << 2;
          pixels[i] = map(nbright, 0, 255, 0, getLeftVal(max_r));
    3c44:	86 2d       	mov	r24, r6
    3c46:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
map():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3c4a:	d1 2c       	mov	r13, r1
    3c4c:	28 2f       	mov	r18, r24
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	d6 01       	movw	r26, r12
    3c52:	39 d4       	rcall	.+2162   	; 0x44c6 <__umulhisi3>
    3c54:	a2 01       	movw	r20, r4
    3c56:	91 01       	movw	r18, r2
    3c58:	e8 d3       	rcall	.+2000   	; 0x442a <__divmodsi4>
updatePatternPulse():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:912
    3c5a:	f8 01       	movw	r30, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:913
          pixels[i + 1] = map(nbright, 0, 255, 0, getLeftVal(max_g));
    3c5c:	20 83       	st	Z, r18
    3c5e:	89 2d       	mov	r24, r9
    3c60:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
map():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3c64:	96 01       	movw	r18, r12
    3c66:	a8 2f       	mov	r26, r24
    3c68:	b0 e0       	ldi	r27, 0x00	; 0
    3c6a:	2d d4       	rcall	.+2138   	; 0x44c6 <__umulhisi3>
    3c6c:	a2 01       	movw	r20, r4
    3c6e:	91 01       	movw	r18, r2
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:913
    3c70:	dc d3       	rcall	.+1976   	; 0x442a <__divmodsi4>
updatePatternPulse():
    3c72:	f8 01       	movw	r30, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:914
          pixels[i + 2] = map(nbright, 0, 255, 0, getLeftVal(max_b));
    3c74:	21 83       	std	Z+1, r18	; 0x01
    3c76:	87 2d       	mov	r24, r7
    3c78:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
map():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3c7c:	96 01       	movw	r18, r12
    3c7e:	a8 2f       	mov	r26, r24
    3c80:	b0 e0       	ldi	r27, 0x00	; 0
    3c82:	21 d4       	rcall	.+2114   	; 0x44c6 <__umulhisi3>
    3c84:	a2 01       	movw	r20, r4
    3c86:	91 01       	movw	r18, r2
    3c88:	d0 d3       	rcall	.+1952   	; 0x442a <__divmodsi4>
updatePatternPulse():
    3c8a:	f8 01       	movw	r30, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:914
    3c8c:	22 83       	std	Z+2, r18	; 0x02
    3c8e:	bb 20       	and	r11, r11
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:915
          if (dir) {
    3c90:	11 f0       	breq	.+4      	; 0x3c96 <main+0xe0e>
    3c92:	aa 94       	dec	r10
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:916
            bright--;
    3c94:	81 cf       	rjmp	.-254    	; 0x3b98 <main+0xd10>
    3c96:	ff e3       	ldi	r31, 0x3F	; 63
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:918
          } else {
            if (bright == 63) {
    3c98:	af 16       	cp	r10, r31
    3c9a:	11 f0       	breq	.+4      	; 0x3ca0 <main+0xe18>
    3c9c:	a3 94       	inc	r10
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:922
              bright--;
              dir = 1;
            } else {
              bright++;
    3c9e:	7c cf       	rjmp	.-264    	; 0x3b98 <main+0xd10>
main():
    3ca0:	bb 24       	eor	r11, r11
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:920
          if (dir) {
            bright--;
          } else {
            if (bright == 63) {
              bright--;
              dir = 1;
    3ca2:	b3 94       	inc	r11
    3ca4:	4e e3       	ldi	r20, 0x3E	; 62
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:919
          pixels[i + 2] = map(nbright, 0, 255, 0, getLeftVal(max_b));
          if (dir) {
            bright--;
          } else {
            if (bright == 63) {
              bright--;
    3ca6:	a4 2e       	mov	r10, r20
    3ca8:	77 cf       	rjmp	.-274    	; 0x3b98 <main+0xd10>
updatePattern():
    3caa:	04 30       	cpi	r16, 0x04	; 4
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:594
    updatePatternDrift();
    //} else if (currentMode == 2) {
    //updatePatternComets();
  } else if (currentMode == 3) {
    updatePatternPulse();
  } else if (currentMode == 4) {
    3cac:	19 f4       	brne	.+6      	; 0x3cb4 <main+0xe2c>
    3cae:	0e 94 23 13 	call	0x2646	; 0x2646 <updatePatternWave()>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:595
    updatePatternWave(); //rainbow is just a subset of wave
    3cb2:	c2 cc       	rjmp	.-1660   	; 0x3638 <main+0x7b0>
    3cb4:	05 30       	cpi	r16, 0x05	; 5
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:596
  } else if (currentMode == 5) {
    3cb6:	09 f0       	breq	.+2      	; 0x3cba <main+0xe32>
    3cb8:	5c c0       	rjmp	.+184    	; 0x3d72 <main+0xeea>
updatePatternDots():
    3cba:	80 91 82 47 	lds	r24, 0x4782	; 0x804782 <currentValueRight+0x1>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:617
  frameNumber++;
}

void updatePatternDots() {
  byte r, g, b;
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    3cbe:	2d e0       	ldi	r18, 0x0D	; 13
    3cc0:	30 e0       	ldi	r19, 0x00	; 0
    3cc2:	28 1b       	sub	r18, r24
    3cc4:	31 09       	sbc	r19, r1
    3cc6:	03 2e       	mov	r0, r19
    3cc8:	00 0c       	add	r0, r0
    3cca:	44 0b       	sbc	r20, r20
    3ccc:	55 0b       	sbc	r21, r21
    3cce:	60 91 75 47 	lds	r22, 0x4775	; 0x804775 <frameNumber>
    3cd2:	70 91 76 47 	lds	r23, 0x4776	; 0x804776 <frameNumber+0x1>
    3cd6:	80 91 77 47 	lds	r24, 0x4777	; 0x804777 <frameNumber+0x2>
    3cda:	90 91 78 47 	lds	r25, 0x4778	; 0x804778 <frameNumber+0x3>
    3cde:	d1 d3       	rcall	.+1954   	; 0x4482 <__udivmodsi4>
main():
    3ce0:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:622
    r = random(getLeftVal(currentValueLeft[0]), getLeftVal(currentValueLeft[1]));
    g = random(getLeftVal(currentValueLeft[2]), getLeftVal(currentValueLeft[3]));
    b = random(getLeftVal(currentValueLeft[4]), getLeftVal(currentValueLeft[5]));
  } else {
    r = 0; g = 0; b = 0;
    3ce2:	f1 2c       	mov	r15, r1
updatePatternDots():
    3ce4:	67 2b       	or	r22, r23
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:617
  frameNumber++;
}

void updatePatternDots() {
  byte r, g, b;
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    3ce6:	68 2b       	or	r22, r24
    3ce8:	69 2b       	or	r22, r25
    3cea:	e1 f5       	brne	.+120    	; 0x3d64 <main+0xedc>
    3cec:	80 91 7a 47 	lds	r24, 0x477A	; 0x80477a <currentValueLeft+0x1>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:618
    r = random(getLeftVal(currentValueLeft[0]), getLeftVal(currentValueLeft[1]));
    3cf0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3cf4:	18 2f       	mov	r17, r24
    3cf6:	80 91 79 47 	lds	r24, 0x4779	; 0x804779 <currentValueLeft>
    3cfa:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3cfe:	21 2f       	mov	r18, r17
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	50 e0       	ldi	r21, 0x00	; 0
    3d04:	40 e0       	ldi	r20, 0x00	; 0
    3d06:	68 2f       	mov	r22, r24
    3d08:	70 e0       	ldi	r23, 0x00	; 0
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <random(long, long)>
    3d12:	16 2f       	mov	r17, r22
    3d14:	80 91 7c 47 	lds	r24, 0x477C	; 0x80477c <currentValueLeft+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:619
    g = random(getLeftVal(currentValueLeft[2]), getLeftVal(currentValueLeft[3]));
    3d18:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3d1c:	08 2f       	mov	r16, r24
    3d1e:	80 91 7b 47 	lds	r24, 0x477B	; 0x80477b <currentValueLeft+0x2>
    3d22:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3d26:	20 2f       	mov	r18, r16
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	50 e0       	ldi	r21, 0x00	; 0
    3d2c:	40 e0       	ldi	r20, 0x00	; 0
    3d2e:	68 2f       	mov	r22, r24
    3d30:	70 e0       	ldi	r23, 0x00	; 0
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <random(long, long)>
    3d3a:	f6 2e       	mov	r15, r22
    3d3c:	80 91 7e 47 	lds	r24, 0x477E	; 0x80477e <currentValueLeft+0x5>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:620
    b = random(getLeftVal(currentValueLeft[4]), getLeftVal(currentValueLeft[5]));
    3d40:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3d44:	08 2f       	mov	r16, r24
    3d46:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <currentValueLeft+0x4>
    3d4a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3d4e:	20 2f       	mov	r18, r16
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	50 e0       	ldi	r21, 0x00	; 0
    3d54:	40 e0       	ldi	r20, 0x00	; 0
    3d56:	68 2f       	mov	r22, r24
    3d58:	70 e0       	ldi	r23, 0x00	; 0
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <random(long, long)>
    3d62:	46 2f       	mov	r20, r22
    3d64:	20 91 83 47 	lds	r18, 0x4783	; 0x804783 <currentValueRight+0x2>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:624
  } else {
    r = 0; g = 0; b = 0;
  }
  pushPixel(r, g, b, currentValueRight[2]);
    3d68:	6f 2d       	mov	r22, r15
    3d6a:	81 2f       	mov	r24, r17
updatePatternDots2():
    3d6c:	0e 94 bc 09 	call	0x1378	; 0x1378 <pushPixel(unsigned char, unsigned char, unsigned char, unsigned char)>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:634
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    getModeColors(&r, &g, &b, random(0, pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getTransitionFrames() + getDwellFrames())));
  } else {
    r = 0; g = 0; b = 0;
  }
  pushPixel(r, g, b, currentValueRight[2]);
    3d70:	63 cc       	rjmp	.-1850   	; 0x3638 <main+0x7b0>
updatePattern():
    3d72:	06 30       	cpi	r16, 0x06	; 6
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:598
    updatePatternPulse();
  } else if (currentMode == 4) {
    updatePatternWave(); //rainbow is just a subset of wave
  } else if (currentMode == 5) {
    updatePatternDots();
  } else if (currentMode == 6) {
    3d74:	09 f0       	breq	.+2      	; 0x3d78 <main+0xef0>
    3d76:	7f c0       	rjmp	.+254    	; 0x3e76 <main+0xfee>
updatePatternFade():
    3d78:	80 91 95 41 	lds	r24, 0x4195	; 0x804195 <updatePatternFade()::bright>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:650
}


void updatePatternFade() {
  static byte bright = 0;
  if (bright & 128) {
    3d7c:	87 ff       	sbrs	r24, 7
    3d7e:	73 c0       	rjmp	.+230    	; 0x3e66 <main+0xfde>
    3d80:	98 2f       	mov	r25, r24
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:651
    if (bright & 63) {
    3d82:	9f 73       	andi	r25, 0x3F	; 63
    3d84:	81 50       	subi	r24, 0x01	; 1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:652
      bright--;
    3d86:	91 11       	cpse	r25, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:651


void updatePatternFade() {
  static byte bright = 0;
  if (bright & 128) {
    if (bright & 63) {
    3d88:	71 c0       	rjmp	.+226    	; 0x3e6c <main+0xfe4>
    3d8a:	10 92 95 41 	sts	0x4195, r1	; 0x804195 <updatePatternFade()::bright>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:654
      bright--;
    } else {
      bright = 0;
    3d8e:	e0 91 95 41 	lds	r30, 0x4195	; 0x804195 <updatePatternFade()::bright>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:663
      bright = 0xBF;
    } else {
      bright++;
    }
  }
  byte nbright = pgm_read_byte_near(&pulseBrightnessTable[63 & bright]);
    3d92:	ef 73       	andi	r30, 0x3F	; 63
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
    3d96:	e7 5f       	subi	r30, 0xF7	; 247
    3d98:	f6 4f       	sbci	r31, 0xF6	; 246
    3d9a:	c4 90       	lpm	r12, Z
    3d9c:	80 91 7c 47 	lds	r24, 0x477C	; 0x80477c <currentValueLeft+0x3>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:664
  byte r = map(nbright, 0, 255, getLeftVal(currentValueLeft[0]), getLeftVal(currentValueLeft[3]));
    3da0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3da4:	18 2f       	mov	r17, r24
    3da6:	80 91 79 47 	lds	r24, 0x4779	; 0x804779 <currentValueLeft>
    3daa:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3dae:	88 2e       	mov	r8, r24
    3db0:	91 2c       	mov	r9, r1
    3db2:	b1 2c       	mov	r11, r1
    3db4:	a1 2c       	mov	r10, r1
    3db6:	d1 2c       	mov	r13, r1
    3db8:	f1 2c       	mov	r15, r1
    3dba:	e1 2c       	mov	r14, r1
    3dbc:	21 2f       	mov	r18, r17
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3dc2:	40 e0       	ldi	r20, 0x00	; 0
map():
    3dc4:	28 19       	sub	r18, r8
    3dc6:	39 09       	sbc	r19, r9
    3dc8:	4a 09       	sbc	r20, r10
    3dca:	5b 09       	sbc	r21, r11
    3dcc:	c7 01       	movw	r24, r14
    3dce:	b6 01       	movw	r22, r12
    3dd0:	a3 d5       	rcall	.+2886   	; 0x4918 <__mulsi3>
    3dd2:	a2 01       	movw	r20, r4
    3dd4:	91 01       	movw	r18, r2
    3dd6:	29 d3       	rcall	.+1618   	; 0x442a <__divmodsi4>
updatePatternFade():
    3dd8:	02 2f       	mov	r16, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:664
    3dda:	08 0d       	add	r16, r8
    3ddc:	80 91 7d 47 	lds	r24, 0x477D	; 0x80477d <currentValueLeft+0x4>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:665
  byte g = map(nbright, 0, 255, getLeftVal(currentValueLeft[1]), getLeftVal(currentValueLeft[4]));
    3de0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3de4:	18 2f       	mov	r17, r24
    3de6:	80 91 7a 47 	lds	r24, 0x477A	; 0x80477a <currentValueLeft+0x1>
    3dea:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3dee:	88 2e       	mov	r8, r24
    3df0:	91 2c       	mov	r9, r1
    3df2:	b1 2c       	mov	r11, r1
    3df4:	a1 2c       	mov	r10, r1
    3df6:	21 2f       	mov	r18, r17
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3dfc:	40 e0       	ldi	r20, 0x00	; 0
map():
    3dfe:	28 19       	sub	r18, r8
    3e00:	39 09       	sbc	r19, r9
    3e02:	4a 09       	sbc	r20, r10
    3e04:	5b 09       	sbc	r21, r11
    3e06:	c7 01       	movw	r24, r14
    3e08:	b6 01       	movw	r22, r12
    3e0a:	86 d5       	rcall	.+2828   	; 0x4918 <__mulsi3>
    3e0c:	a2 01       	movw	r20, r4
    3e0e:	91 01       	movw	r18, r2
    3e10:	0c d3       	rcall	.+1560   	; 0x442a <__divmodsi4>
updatePatternFade():
    3e12:	72 2e       	mov	r7, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:665
    3e14:	78 0c       	add	r7, r8
    3e16:	80 91 7e 47 	lds	r24, 0x477E	; 0x80477e <currentValueLeft+0x5>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:666
  byte b = map(nbright, 0, 255, getLeftVal(currentValueLeft[2]), getLeftVal(currentValueLeft[5]));
    3e1a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3e1e:	18 2f       	mov	r17, r24
    3e20:	80 91 7b 47 	lds	r24, 0x477B	; 0x80477b <currentValueLeft+0x2>
    3e24:	0e 94 dd 09 	call	0x13ba	; 0x13ba <getLeftVal(unsigned char)>
    3e28:	88 2e       	mov	r8, r24
    3e2a:	91 2c       	mov	r9, r1
    3e2c:	b1 2c       	mov	r11, r1
    3e2e:	a1 2c       	mov	r10, r1
    3e30:	21 2f       	mov	r18, r17
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore\api/Common.cpp:6
    3e36:	40 e0       	ldi	r20, 0x00	; 0
map():
    3e38:	28 19       	sub	r18, r8
    3e3a:	39 09       	sbc	r19, r9
    3e3c:	4a 09       	sbc	r20, r10
    3e3e:	5b 09       	sbc	r21, r11
    3e40:	c7 01       	movw	r24, r14
    3e42:	b6 01       	movw	r22, r12
    3e44:	69 d5       	rcall	.+2770   	; 0x4918 <__mulsi3>
    3e46:	a2 01       	movw	r20, r4
    3e48:	91 01       	movw	r18, r2
    3e4a:	ef d2       	rcall	.+1502   	; 0x442a <__divmodsi4>
updatePatternFade():
    3e4c:	82 0e       	add	r8, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:666
    3e4e:	e6 e2       	ldi	r30, 0x26	; 38
    3e50:	f8 e4       	ldi	r31, 0x48	; 72
setAll():
    3e52:	00 83       	st	Z, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:686
}


void setAll(byte r, byte g, byte b) {
  for (unsigned int i = 0; i < ((LENGTH) * 3); i += 3) {
    pixels[i] = r;
    3e54:	71 82       	std	Z+1, r7	; 0x01
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:687
    pixels[i + 1] = g;
    3e56:	82 82       	std	Z+2, r8	; 0x02
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:688
    pixels[i + 2] = b;
    3e58:	33 96       	adiw	r30, 0x03	; 3
    3e5a:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:685
  pushPixel(r, g, b, currentValueRight[currentMode == 4 ? 2 : 3]);
}


void setAll(byte r, byte g, byte b) {
  for (unsigned int i = 0; i < ((LENGTH) * 3); i += 3) {
    3e5c:	9e e4       	ldi	r25, 0x4E	; 78
    3e5e:	8e 17       	cp	r24, r30
    3e60:	9f 07       	cpc	r25, r31
    3e62:	b9 f7       	brne	.-18     	; 0x3e52 <main+0xfca>
    3e64:	e9 cb       	rjmp	.-2094   	; 0x3638 <main+0x7b0>
updatePatternFade():
    3e66:	8f 33       	cpi	r24, 0x3F	; 63
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:657
      bright--;
    } else {
      bright = 0;
    }
  } else {
    if (bright >= 63) {
    3e68:	20 f0       	brcs	.+8      	; 0x3e72 <main+0xfea>
    3e6a:	8f eb       	ldi	r24, 0xBF	; 191
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:658
      bright = 0xBF;
    3e6c:	80 93 95 41 	sts	0x4195, r24	; 0x804195 <updatePatternFade()::bright>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:660
    } else {
      bright++;
    3e70:	8e cf       	rjmp	.-228    	; 0x3d8e <main+0xf06>
    3e72:	8f 5f       	subi	r24, 0xFF	; 255
    3e74:	fb cf       	rjmp	.-10     	; 0x3e6c <main+0xfe4>
updatePattern():
    3e76:	07 30       	cpi	r16, 0x07	; 7
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:601
  } else if (currentMode == 5) {
    updatePatternDots();
  } else if (currentMode == 6) {
    updatePatternFade();

  } else if (currentMode == 7) {
    3e78:	09 f4       	brne	.+2      	; 0x3e7c <main+0xff4>
    3e7a:	19 cf       	rjmp	.-462    	; 0x3cae <main+0xe26>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:603
    updatePatternWave();
  } else if (currentMode == 8) {
    3e7c:	08 30       	cpi	r16, 0x08	; 8
    3e7e:	09 f0       	breq	.+2      	; 0x3e82 <main+0xffa>
    3e80:	4b c0       	rjmp	.+150    	; 0x3f18 <main+0x1090>
updatePatternDots2():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:629
  pushPixel(r, g, b, currentValueRight[2]);
}

void updatePatternDots2() {
  static byte r, g, b;
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    3e82:	80 91 82 47 	lds	r24, 0x4782	; 0x804782 <currentValueRight+0x1>
    3e86:	2d e0       	ldi	r18, 0x0D	; 13
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	28 1b       	sub	r18, r24
    3e8c:	31 09       	sbc	r19, r1
    3e8e:	03 2e       	mov	r0, r19
    3e90:	00 0c       	add	r0, r0
    3e92:	44 0b       	sbc	r20, r20
    3e94:	55 0b       	sbc	r21, r21
    3e96:	60 91 75 47 	lds	r22, 0x4775	; 0x804775 <frameNumber>
    3e9a:	70 91 76 47 	lds	r23, 0x4776	; 0x804776 <frameNumber+0x1>
    3e9e:	80 91 77 47 	lds	r24, 0x4777	; 0x804777 <frameNumber+0x2>
    3ea2:	90 91 78 47 	lds	r25, 0x4778	; 0x804778 <frameNumber+0x3>
    3ea6:	ed d2       	rcall	.+1498   	; 0x4482 <__udivmodsi4>
    3ea8:	67 2b       	or	r22, r23
    3eaa:	68 2b       	or	r22, r24
    3eac:	69 2b       	or	r22, r25
    3eae:	69 f5       	brne	.+90     	; 0x3f0a <main+0x1082>
    3eb0:	0e 94 bd 08 	call	0x117a	; 0x117a <getPalleteNumber()>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:630
    getModeColors(&r, &g, &b, random(0, pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getTransitionFrames() + getDwellFrames())));
    3eb4:	e8 2f       	mov	r30, r24
    3eb6:	f0 e0       	ldi	r31, 0x00	; 0
    3eb8:	e7 5b       	subi	r30, 0xB7	; 183
    3eba:	f6 4f       	sbci	r31, 0xF6	; 246
    3ebc:	f4 90       	lpm	r15, Z
    3ebe:	0e 94 c6 08 	call	0x118c	; 0x118c <getTransitionFrames()>
    3ec2:	8c 01       	movw	r16, r24
    3ec4:	0e 94 de 08 	call	0x11bc	; 0x11bc <getDwellFrames()>
    3ec8:	80 0f       	add	r24, r16
    3eca:	91 1f       	adc	r25, r17
    3ecc:	f8 9e       	mul	r15, r24
    3ece:	90 01       	movw	r18, r0
    3ed0:	f9 9e       	mul	r15, r25
    3ed2:	30 0d       	add	r19, r0
    3ed4:	11 24       	eor	r1, r1
    3ed6:	50 e0       	ldi	r21, 0x00	; 0
    3ed8:	40 e0       	ldi	r20, 0x00	; 0
    3eda:	60 e0       	ldi	r22, 0x00	; 0
    3edc:	70 e0       	ldi	r23, 0x00	; 0
    3ede:	cb 01       	movw	r24, r22
    3ee0:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <random(long, long)>
    3ee4:	8b 01       	movw	r16, r22
    3ee6:	9c 01       	movw	r18, r24
    3ee8:	46 e9       	ldi	r20, 0x96	; 150
    3eea:	51 e4       	ldi	r21, 0x41	; 65
    3eec:	67 e9       	ldi	r22, 0x97	; 151
    3eee:	71 e4       	ldi	r23, 0x41	; 65
    3ef0:	88 e9       	ldi	r24, 0x98	; 152
    3ef2:	91 e4       	ldi	r25, 0x41	; 65
    3ef4:	0e 94 a2 11 	call	0x2344	; 0x2344 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
    3ef8:	20 91 83 47 	lds	r18, 0x4783	; 0x804783 <currentValueRight+0x2>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:634
  } else {
    r = 0; g = 0; b = 0;
  }
  pushPixel(r, g, b, currentValueRight[2]);
    3efc:	40 91 96 41 	lds	r20, 0x4196	; 0x804196 <updatePatternDots2()::b>
    3f00:	60 91 97 41 	lds	r22, 0x4197	; 0x804197 <updatePatternDots2()::g>
    3f04:	80 91 98 41 	lds	r24, 0x4198	; 0x804198 <updatePatternDots2()::r>
    3f08:	31 cf       	rjmp	.-414    	; 0x3d6c <main+0xee4>
    3f0a:	10 92 98 41 	sts	0x4198, r1	; 0x804198 <updatePatternDots2()::r>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:632
void updatePatternDots2() {
  static byte r, g, b;
  if (!(frameNumber % (13 - currentValueRight[1]))) {
    getModeColors(&r, &g, &b, random(0, pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getTransitionFrames() + getDwellFrames())));
  } else {
    r = 0; g = 0; b = 0;
    3f0e:	10 92 97 41 	sts	0x4197, r1	; 0x804197 <updatePatternDots2()::g>
    3f12:	10 92 96 41 	sts	0x4196, r1	; 0x804196 <updatePatternDots2()::b>
    3f16:	f0 cf       	rjmp	.-32     	; 0x3ef8 <main+0x1070>
updatePattern():
    3f18:	09 30       	cpi	r16, 0x09	; 9
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:605

  } else if (currentMode == 7) {
    updatePatternWave();
  } else if (currentMode == 8) {
    updatePatternDots2();
  } else if (currentMode == 9) {
    3f1a:	09 f5       	brne	.+66     	; 0x3f5e <main+0x10d6>
updatePatternFade2():
    3f1c:	00 91 75 47 	lds	r16, 0x4775	; 0x804775 <frameNumber>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:672
  setAll(r, g, b);
}

void updatePatternFade2() {
  byte r, g, b;
  getModeColors(&r, &g, &b, frameNumber);
    3f20:	10 91 76 47 	lds	r17, 0x4776	; 0x804776 <frameNumber+0x1>
    3f24:	20 91 77 47 	lds	r18, 0x4777	; 0x804777 <frameNumber+0x2>
    3f28:	30 91 78 47 	lds	r19, 0x4778	; 0x804778 <frameNumber+0x3>
    3f2c:	ae 01       	movw	r20, r28
    3f2e:	48 5f       	subi	r20, 0xF8	; 248
    3f30:	5f 4f       	sbci	r21, 0xFF	; 255
    3f32:	be 01       	movw	r22, r28
    3f34:	67 5f       	subi	r22, 0xF7	; 247
    3f36:	7f 4f       	sbci	r23, 0xFF	; 255
    3f38:	ce 01       	movw	r24, r28
    3f3a:	0a 96       	adiw	r24, 0x0a	; 10
    3f3c:	0e 94 a2 11 	call	0x2344	; 0x2344 <getModeColors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
    3f40:	88 85       	ldd	r24, Y+8	; 0x08
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:673
  setAll(r, g, b);
    3f42:	99 85       	ldd	r25, Y+9	; 0x09
    3f44:	2a 85       	ldd	r18, Y+10	; 0x0a
    3f46:	e6 e2       	ldi	r30, 0x26	; 38
    3f48:	f8 e4       	ldi	r31, 0x48	; 72
setAll():
    3f4a:	20 83       	st	Z, r18
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:686
}


void setAll(byte r, byte g, byte b) {
  for (unsigned int i = 0; i < ((LENGTH) * 3); i += 3) {
    pixels[i] = r;
    3f4c:	91 83       	std	Z+1, r25	; 0x01
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:687
    pixels[i + 1] = g;
    3f4e:	82 83       	std	Z+2, r24	; 0x02
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:688
    pixels[i + 2] = b;
    3f50:	33 96       	adiw	r30, 0x03	; 3
    3f52:	42 e0       	ldi	r20, 0x02	; 2
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:685
  pushPixel(r, g, b, currentValueRight[currentMode == 4 ? 2 : 3]);
}


void setAll(byte r, byte g, byte b) {
  for (unsigned int i = 0; i < ((LENGTH) * 3); i += 3) {
    3f54:	5e e4       	ldi	r21, 0x4E	; 78
    3f56:	4e 17       	cp	r20, r30
    3f58:	5f 07       	cpc	r21, r31
    3f5a:	b9 f7       	brne	.-18     	; 0x3f4a <main+0x10c2>
    3f5c:	6d cb       	rjmp	.-2342   	; 0x3638 <main+0x7b0>
updatePattern():
    3f5e:	0a 30       	cpi	r16, 0x0A	; 10
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:607
    updatePatternWave();
  } else if (currentMode == 8) {
    updatePatternDots2();
  } else if (currentMode == 9) {
    updatePatternFade2();
  } else if (currentMode == 10) {
    3f60:	09 f0       	breq	.+2      	; 0x3f64 <main+0x10dc>
    3f62:	ce c0       	rjmp	.+412    	; 0x4100 <__DATA_REGION_LENGTH__+0x100>
updatePatternDrift2():
    3f64:	90 90 81 47 	lds	r9, 0x4781	; 0x804781 <currentValueRight>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:750
  }
  }

*/
void updatePatternDrift2() {
  byte driftchance = 16 + currentValueRight[0] * 10;
    3f68:	90 9e       	mul	r9, r16
    3f6a:	00 2d       	mov	r16, r0
    3f6c:	11 24       	eor	r1, r1
    3f6e:	a0 e1       	ldi	r26, 0x10	; 16
    3f70:	9a 2e       	mov	r9, r26
    3f72:	90 0e       	add	r9, r16
    3f74:	89 2c       	mov	r8, r9
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:751
  byte randinc = 255 - driftchance;
    3f76:	80 94       	com	r8
    3f78:	0e 94 bd 08 	call	0x117a	; 0x117a <getPalleteNumber()>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:753
  byte randdec = driftchance;
  uint16_t len = (pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getDwellFrames() + getTransitionFrames()));
    3f7c:	e8 2f       	mov	r30, r24
    3f7e:	f0 e0       	ldi	r31, 0x00	; 0
    3f80:	e7 5b       	subi	r30, 0xB7	; 183
    3f82:	f6 4f       	sbci	r31, 0xF6	; 246
    3f84:	f4 90       	lpm	r15, Z
    3f86:	0e 94 de 08 	call	0x11bc	; 0x11bc <getDwellFrames()>
    3f8a:	8c 01       	movw	r16, r24
    3f8c:	0e 94 c6 08 	call	0x118c	; 0x118c <getTransitionFrames()>
    3f90:	80 0f       	add	r24, r16
    3f92:	91 1f       	adc	r25, r17
    3f94:	f8 9e       	mul	r15, r24
    3f96:	50 01       	movw	r10, r0
    3f98:	f9 9e       	mul	r15, r25
    3f9a:	b0 0c       	add	r11, r0
    3f9c:	11 24       	eor	r1, r1
    3f9e:	b6 e2       	ldi	r27, 0x26	; 38
    3fa0:	cb 2e       	mov	r12, r27
    3fa2:	b8 e4       	ldi	r27, 0x48	; 72
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:754
  for (uint16_t i = 0; i < LENGTH; i += 2) {
    3fa4:	db 2e       	mov	r13, r27
main():
    3fa6:	71 2c       	mov	r7, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:770
      if (f1 > len) {
        f1 = len;
      }
    }
    rand = rand >> 8;
    if (rand > randinc) {
    3fa8:	61 2c       	mov	r6, r1
updatePatternDrift2():
    3faa:	88 2d       	mov	r24, r8
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	8d 87       	std	Y+13, r24	; 0x0d
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:775
      f2++;
      if (f2 > len) {
        f2 = 0;
      }
    } else if (rand < randdec) {
    3fb0:	9e 87       	std	Y+14, r25	; 0x0e
    3fb2:	e9 2d       	mov	r30, r9
    3fb4:	f0 e0       	ldi	r31, 0x00	; 0
    3fb6:	ef 87       	std	Y+15, r30	; 0x0f
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/WMath.cpp:40
    3fb8:	f8 8b       	std	Y+16, r31	; 0x10
random():
    3fba:	e2 d1       	rcall	.+964    	; 0x4380 <random>
    3fbc:	2f ef       	ldi	r18, 0xFF	; 255
    3fbe:	3f ef       	ldi	r19, 0xFF	; 255
    3fc0:	40 e0       	ldi	r20, 0x00	; 0
    3fc2:	50 e0       	ldi	r21, 0x00	; 0
    3fc4:	32 d2       	rcall	.+1124   	; 0x442a <__divmodsi4>
updatePatternDrift2():
    3fc6:	c6 01       	movw	r24, r12
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:756
  byte randinc = 255 - driftchance;
  byte randdec = driftchance;
  uint16_t len = (pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getDwellFrames() + getTransitionFrames()));
  for (uint16_t i = 0; i < LENGTH; i += 2) {
    uint16_t rand = random(65535);
    uint16_t f1 = scratch[(i * 3) >> 1] + ((scratch[(i >> 1) * 3 + 2] & 0x0F) << 8);
    3fc8:	86 52       	subi	r24, 0x26	; 38
    3fca:	98 44       	sbci	r25, 0x48	; 72
    3fcc:	96 95       	lsr	r25
    3fce:	87 95       	ror	r24
    3fd0:	93 01       	movw	r18, r6
    3fd2:	36 95       	lsr	r19
    3fd4:	27 95       	ror	r18
    3fd6:	f9 01       	movw	r30, r18
    3fd8:	ee 0f       	add	r30, r30
    3fda:	ff 1f       	adc	r31, r31
    3fdc:	e2 0f       	add	r30, r18
    3fde:	f3 1f       	adc	r31, r19
    3fe0:	9f 01       	movw	r18, r30
    3fe2:	25 56       	subi	r18, 0x65	; 101
    3fe4:	3e 4b       	sbci	r19, 0xBE	; 190
    3fe6:	29 8b       	std	Y+17, r18	; 0x11
    3fe8:	3a 8b       	std	Y+18, r19	; 0x12
    3fea:	f9 01       	movw	r30, r18
    3fec:	e0 80       	ld	r14, Z
    3fee:	f1 2c       	mov	r15, r1
    3ff0:	1e 2d       	mov	r17, r14
    3ff2:	00 27       	eor	r16, r16
    3ff4:	00 27       	eor	r16, r16
    3ff6:	1f 70       	andi	r17, 0x0F	; 15
    3ff8:	dc 01       	movw	r26, r24
    3ffa:	a7 56       	subi	r26, 0x67	; 103
    3ffc:	be 4b       	sbci	r27, 0xBE	; 190
    3ffe:	2c 91       	ld	r18, X
    4000:	02 0f       	add	r16, r18
    4002:	11 1d       	adc	r17, r1
    4004:	f4 e0       	ldi	r31, 0x04	; 4
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:757
    uint16_t f2 = scratch[1 + ((i * 3) >> 1)] + ((scratch[(i >> 1) * 3 + 2] & 0xF0) << 4);
    4006:	ee 0c       	add	r14, r14
    4008:	ff 1c       	adc	r15, r15
    400a:	fa 95       	dec	r31
    400c:	e1 f7       	brne	.-8      	; 0x4006 <__DATA_REGION_LENGTH__+0x6>
    400e:	ee 24       	eor	r14, r14
    4010:	ff e0       	ldi	r31, 0x0F	; 15
    4012:	ff 22       	and	r15, r31
    4014:	86 56       	subi	r24, 0x66	; 102
    4016:	9e 4b       	sbci	r25, 0xBE	; 190
    4018:	fc 01       	movw	r30, r24
    401a:	20 81       	ld	r18, Z
    401c:	e2 0e       	add	r14, r18
    401e:	f1 1c       	adc	r15, r1
    4020:	86 16       	cp	r8, r22
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:758
    if ((byte)rand > randinc) {
    4022:	08 f0       	brcs	.+2      	; 0x4026 <__DATA_REGION_LENGTH__+0x26>
    4024:	4b c0       	rjmp	.+150    	; 0x40bc <__DATA_REGION_LENGTH__+0xbc>
    4026:	0f 5f       	subi	r16, 0xFF	; 255
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:759
      f1++;
    4028:	1f 4f       	sbci	r17, 0xFF	; 255
    402a:	a0 16       	cp	r10, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:760
      if (f1 > len) {
    402c:	b1 06       	cpc	r11, r17
    402e:	08 f4       	brcc	.+2      	; 0x4032 <__DATA_REGION_LENGTH__+0x32>
    4030:	50 c0       	rjmp	.+160    	; 0x40d2 <__DATA_REGION_LENGTH__+0xd2>
    4032:	7b 87       	std	Y+11, r23	; 0x0b
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:769
      f1--;
      if (f1 > len) {
        f1 = len;
      }
    }
    rand = rand >> 8;
    4034:	1c 86       	std	Y+12, r1	; 0x0c
    4036:	2b 85       	ldd	r18, Y+11	; 0x0b
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:770
    if (rand > randinc) {
    4038:	3c 85       	ldd	r19, Y+12	; 0x0c
    403a:	4d 85       	ldd	r20, Y+13	; 0x0d
    403c:	5e 85       	ldd	r21, Y+14	; 0x0e
    403e:	42 17       	cp	r20, r18
    4040:	53 07       	cpc	r21, r19
    4042:	08 f0       	brcs	.+2      	; 0x4046 <__DATA_REGION_LENGTH__+0x46>
    4044:	49 c0       	rjmp	.+146    	; 0x40d8 <__DATA_REGION_LENGTH__+0xd8>
    4046:	5f ef       	ldi	r21, 0xFF	; 255
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:771
      f2++;
    4048:	e5 1a       	sub	r14, r21
    404a:	f5 0a       	sbc	r15, r21
    404c:	ae 14       	cp	r10, r14
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:772
      if (f2 > len) {
    404e:	bf 04       	cpc	r11, r15
    4050:	08 f4       	brcc	.+2      	; 0x4054 <__DATA_REGION_LENGTH__+0x54>
    4052:	53 c0       	rjmp	.+166    	; 0x40fa <__DATA_REGION_LENGTH__+0xfa>
    4054:	0c 93       	st	X, r16
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:781
      f2--;
      if (f2 > len) {
        f2 = len;
      }
    }
    scratch[(i * 3) >> 1] = f1 & 0xFF;
    4056:	fc 01       	movw	r30, r24
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:782
    scratch[1 + ((i * 3) >> 1)] = f2 & 0xFF;
    4058:	e0 82       	st	Z, r14
    405a:	81 2f       	mov	r24, r17
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:783
    scratch[(i >> 1) * 3 + 2] = (f1 >> 8) & ((f2 >> 4) & 0xF0);
    405c:	80 7f       	andi	r24, 0xF0	; 240
    405e:	97 01       	movw	r18, r14
    4060:	94 e0       	ldi	r25, 0x04	; 4
    4062:	36 95       	lsr	r19
    4064:	27 95       	ror	r18
    4066:	9a 95       	dec	r25
    4068:	e1 f7       	brne	.-8      	; 0x4062 <__DATA_REGION_LENGTH__+0x62>
    406a:	82 23       	and	r24, r18
    406c:	e9 89       	ldd	r30, Y+17	; 0x11
    406e:	fa 89       	ldd	r31, Y+18	; 0x12
    4070:	80 83       	st	Z, r24
    4072:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:784
    getDrift2Colors(&pixels[i * 3], &pixels[i * 3] + 1, &pixels[i * 3] + 2, f1);
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	a6 01       	movw	r20, r12
    4078:	4e 5f       	subi	r20, 0xFE	; 254
    407a:	5f 4f       	sbci	r21, 0xFF	; 255
    407c:	b6 01       	movw	r22, r12
    407e:	6f 5f       	subi	r22, 0xFF	; 255
    4080:	7f 4f       	sbci	r23, 0xFF	; 255
    4082:	c6 01       	movw	r24, r12
    4084:	0e 94 ef 08 	call	0x11de	; 0x11de <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
    4088:	87 01       	movw	r16, r14
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:785
    getDrift2Colors(&pixels[i * 3] + 3, &pixels[i * 3] + 4, &pixels[i * 3] + 5, f2);
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	20 e0       	ldi	r18, 0x00	; 0
    408e:	a6 01       	movw	r20, r12
    4090:	4b 5f       	subi	r20, 0xFB	; 251
    4092:	5f 4f       	sbci	r21, 0xFF	; 255
    4094:	b6 01       	movw	r22, r12
    4096:	6c 5f       	subi	r22, 0xFC	; 252
    4098:	7f 4f       	sbci	r23, 0xFF	; 255
    409a:	c6 01       	movw	r24, r12
    409c:	03 96       	adiw	r24, 0x03	; 3
    409e:	0e 94 ef 08 	call	0x11de	; 0x11de <getDrift2Colors(unsigned char*, unsigned char*, unsigned char*, unsigned long)>
    40a2:	f2 e0       	ldi	r31, 0x02	; 2
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:754
void updatePatternDrift2() {
  byte driftchance = 16 + currentValueRight[0] * 10;
  byte randinc = 255 - driftchance;
  byte randdec = driftchance;
  uint16_t len = (pgm_read_byte_near(&colorCount[getPalleteNumber()]) * (getDwellFrames() + getTransitionFrames()));
  for (uint16_t i = 0; i < LENGTH; i += 2) {
    40a4:	6f 0e       	add	r6, r31
    40a6:	71 1c       	adc	r7, r1
    40a8:	26 e0       	ldi	r18, 0x06	; 6
    40aa:	c2 0e       	add	r12, r18
    40ac:	d1 1c       	adc	r13, r1
    40ae:	34 ef       	ldi	r19, 0xF4	; 244
    40b0:	63 16       	cp	r6, r19
    40b2:	31 e0       	ldi	r19, 0x01	; 1
    40b4:	73 06       	cpc	r7, r19
    40b6:	09 f0       	breq	.+2      	; 0x40ba <__DATA_REGION_LENGTH__+0xba>
    40b8:	80 cf       	rjmp	.-256    	; 0x3fba <main+0x1132>
    40ba:	be ca       	rjmp	.-2692   	; 0x3638 <main+0x7b0>
    40bc:	69 15       	cp	r22, r9
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:763
    if ((byte)rand > randinc) {
      f1++;
      if (f1 > len) {
        f1 = 0;
      }
    } else if ((byte)rand < randdec) {
    40be:	08 f0       	brcs	.+2      	; 0x40c2 <__DATA_REGION_LENGTH__+0xc2>
    40c0:	b8 cf       	rjmp	.-144    	; 0x4032 <__DATA_REGION_LENGTH__+0x32>
    40c2:	01 50       	subi	r16, 0x01	; 1
    40c4:	11 09       	sbc	r17, r1
    40c6:	a0 16       	cp	r10, r16
    40c8:	b1 06       	cpc	r11, r17
    40ca:	08 f0       	brcs	.+2      	; 0x40ce <__DATA_REGION_LENGTH__+0xce>
    40cc:	b2 cf       	rjmp	.-156    	; 0x4032 <__DATA_REGION_LENGTH__+0x32>
    40ce:	85 01       	movw	r16, r10
    40d0:	b0 cf       	rjmp	.-160    	; 0x4032 <__DATA_REGION_LENGTH__+0x32>
main():
    40d2:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:761
    uint16_t f1 = scratch[(i * 3) >> 1] + ((scratch[(i >> 1) * 3 + 2] & 0x0F) << 8);
    uint16_t f2 = scratch[1 + ((i * 3) >> 1)] + ((scratch[(i >> 1) * 3 + 2] & 0xF0) << 4);
    if ((byte)rand > randinc) {
      f1++;
      if (f1 > len) {
        f1 = 0;
    40d4:	00 e0       	ldi	r16, 0x00	; 0
    40d6:	ad cf       	rjmp	.-166    	; 0x4032 <__DATA_REGION_LENGTH__+0x32>
updatePatternDrift2():
    40d8:	eb 85       	ldd	r30, Y+11	; 0x0b
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:775
    if (rand > randinc) {
      f2++;
      if (f2 > len) {
        f2 = 0;
      }
    } else if (rand < randdec) {
    40da:	fc 85       	ldd	r31, Y+12	; 0x0c
    40dc:	2f 85       	ldd	r18, Y+15	; 0x0f
    40de:	38 89       	ldd	r19, Y+16	; 0x10
    40e0:	e2 17       	cp	r30, r18
    40e2:	f3 07       	cpc	r31, r19
    40e4:	08 f0       	brcs	.+2      	; 0x40e8 <__DATA_REGION_LENGTH__+0xe8>
    40e6:	b6 cf       	rjmp	.-148    	; 0x4054 <__DATA_REGION_LENGTH__+0x54>
    40e8:	31 e0       	ldi	r19, 0x01	; 1
    40ea:	e3 1a       	sub	r14, r19
    40ec:	f1 08       	sbc	r15, r1
    40ee:	ae 14       	cp	r10, r14
    40f0:	bf 04       	cpc	r11, r15
    40f2:	08 f0       	brcs	.+2      	; 0x40f6 <__DATA_REGION_LENGTH__+0xf6>
    40f4:	af cf       	rjmp	.-162    	; 0x4054 <__DATA_REGION_LENGTH__+0x54>
    40f6:	75 01       	movw	r14, r10
    40f8:	ad cf       	rjmp	.-166    	; 0x4054 <__DATA_REGION_LENGTH__+0x54>
main():
    40fa:	f1 2c       	mov	r15, r1
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:773
    }
    rand = rand >> 8;
    if (rand > randinc) {
      f2++;
      if (f2 > len) {
        f2 = 0;
    40fc:	e1 2c       	mov	r14, r1
    40fe:	aa cf       	rjmp	.-172    	; 0x4054 <__DATA_REGION_LENGTH__+0x54>
updatePattern():
    4100:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:610
  } else if (currentMode == 9) {
    updatePatternFade2();
  } else if (currentMode == 10) {
    updatePatternDrift2();
  } else {
    setMode(0);
    4102:	0e 94 bc 13 	call	0x2778	; 0x2778 <setMode(unsigned char)>
    4106:	98 ca       	rjmp	.-2768   	; 0x3638 <main+0x7b0>
loop():
    4108:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:258
  if (!updated) {
    digitalWriteFast(INDICATE1,HIGH);
    updatePattern();
    digitalWriteFast(INDICATE1,LOW);
    updated = 1;
  } else if (millis() - lastFrameAt > getFrameDelay()) {
    410c:	c0 90 8a 47 	lds	r12, 0x478A	; 0x80478a <lastFrameAt>
    4110:	d0 90 8b 47 	lds	r13, 0x478B	; 0x80478b <lastFrameAt+0x1>
    4114:	e0 90 8c 47 	lds	r14, 0x478C	; 0x80478c <lastFrameAt+0x2>
    4118:	f0 90 8d 47 	lds	r15, 0x478D	; 0x80478d <lastFrameAt+0x3>
    411c:	ab 01       	movw	r20, r22
    411e:	bc 01       	movw	r22, r24
    4120:	4c 19       	sub	r20, r12
    4122:	5d 09       	sbc	r21, r13
    4124:	6e 09       	sbc	r22, r14
    4126:	7f 09       	sbc	r23, r15
main():
    4128:	80 e5       	ldi	r24, 0x50	; 80
getFrameDelay():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:269
  }
}

byte getFrameDelay() {
  if (currentMode == 1 || currentMode == 0) {
    return 80;
    412a:	02 30       	cpi	r16, 0x02	; 2
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:268
    digitalWriteFast(INDICATE0,LOW);
  }
}

byte getFrameDelay() {
  if (currentMode == 1 || currentMode == 0) {
    412c:	70 f0       	brcs	.+28     	; 0x414a <__DATA_REGION_LENGTH__+0x14a>
    412e:	03 30       	cpi	r16, 0x03	; 3
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:270
    return 80;
  } else if (currentMode == 3) {
    4130:	09 f0       	breq	.+2      	; 0x4134 <__DATA_REGION_LENGTH__+0x134>
    4132:	8f c0       	rjmp	.+286    	; 0x4252 <nextbyte24+0x2e>
    4134:	ec e6       	ldi	r30, 0x6C	; 108
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:271
    return 30 + 10 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
    4136:	f9 e0       	ldi	r31, 0x09	; 9
    4138:	84 91       	lpm	r24, Z
    413a:	90 91 81 47 	lds	r25, 0x4781	; 0x804781 <currentValueRight>
    413e:	89 1b       	sub	r24, r25
    4140:	9a e0       	ldi	r25, 0x0A	; 10
    4142:	89 9f       	mul	r24, r25
    4144:	80 2d       	mov	r24, r0
    4146:	11 24       	eor	r1, r1
    4148:	82 5e       	subi	r24, 0xE2	; 226
loop():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:273
  }
  return 30 + 20 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
    414a:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:258
  if (!updated) {
    digitalWriteFast(INDICATE1,HIGH);
    updatePattern();
    digitalWriteFast(INDICATE1,LOW);
    updated = 1;
  } else if (millis() - lastFrameAt > getFrameDelay()) {
    414c:	b0 e0       	ldi	r27, 0x00	; 0
    414e:	a0 e0       	ldi	r26, 0x00	; 0
    4150:	84 17       	cp	r24, r20
    4152:	95 07       	cpc	r25, r21
    4154:	a6 07       	cpc	r26, r22
    4156:	b7 07       	cpc	r27, r23
    4158:	08 f0       	brcs	.+2      	; 0x415c <__DATA_REGION_LENGTH__+0x15c>
    415a:	bb c8       	rjmp	.-3722   	; 0x32d2 <main+0x44a>
    415c:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:259
    lastFrameAt = millis();
    4160:	60 93 8a 47 	sts	0x478A, r22	; 0x80478a <lastFrameAt>
    4164:	70 93 8b 47 	sts	0x478B, r23	; 0x80478b <lastFrameAt+0x1>
    4168:	80 93 8c 47 	sts	0x478C, r24	; 0x80478c <lastFrameAt+0x2>
    416c:	90 93 8d 47 	sts	0x478D, r25	; 0x80478d <lastFrameAt+0x3>
digitalWriteFast():
    4170:	a8 9a       	sbi	0x15, 0	; 21
loop():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:444
  else if (val == CHANGE)
    vport->IN |= mask;
  else // HIGH
    vport->OUT |= mask;
    4172:	10 92 8e 47 	sts	0x478E, r1	; 0x80478e <loop::updated>
show():
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:261
    digitalWriteFast(INDICATE0,HIGH);
    updated = 0;
    4176:	80 91 08 4e 	lds	r24, 0x4E08	; 0x804e08 <leds+0x6>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:76
}

// *INDENT-OFF*   astyle don't like assembly
void tinyNeoPixel::show(void) {

  if ((!pixels) || pin >= NUM_DIGITAL_PINS)  {
    417a:	90 91 09 4e 	lds	r25, 0x4E09	; 0x804e09 <leds+0x7>
    417e:	89 2b       	or	r24, r25
    4180:	09 f4       	brne	.+2      	; 0x4184 <__DATA_REGION_LENGTH__+0x184>
    4182:	65 c0       	rjmp	.+202    	; 0x424e <nextbyte24+0x2a>
    4184:	80 91 06 4e 	lds	r24, 0x4E06	; 0x804e06 <leds+0x4>
    4188:	89 32       	cpi	r24, 0x29	; 41
    418a:	0c f0       	brlt	.+2      	; 0x418e <__DATA_REGION_LENGTH__+0x18e>
    418c:	60 c0       	rjmp	.+192    	; 0x424e <nextbyte24+0x2a>
_ZN12tinyNeoPixel7canShowEv.isra.0():
    418e:	0e 94 89 07 	call	0xf12	; 0xf12 <micros>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.h:298
             function instead.
  */
  static uint32_t gamma32(uint32_t x);

  #if (!defined(MILLIS_USE_TIMERNONE) && !defined(MILLIS_USE_TIMERRTC) && !defined(MILLIS_USE_TIMERRTC_XTAL) && !defined(MILLIS_USE_TIMERRTC_XOSC))
    inline bool canShow(void) { return (micros() - endTime) >= 50L; }
    4192:	00 91 0e 4e 	lds	r16, 0x4E0E	; 0x804e0e <leds+0xc>
    4196:	10 91 0f 4e 	lds	r17, 0x4E0F	; 0x804e0f <leds+0xd>
    419a:	20 91 10 4e 	lds	r18, 0x4E10	; 0x804e10 <leds+0xe>
    419e:	30 91 11 4e 	lds	r19, 0x4E11	; 0x804e11 <leds+0xf>
    41a2:	60 1b       	sub	r22, r16
    41a4:	71 0b       	sbc	r23, r17
    41a6:	82 0b       	sbc	r24, r18
    41a8:	93 0b       	sbc	r25, r19
show():
    41aa:	62 33       	cpi	r22, 0x32	; 50
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:86
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while (!canShow());
    41ac:	71 05       	cpc	r23, r1
    41ae:	81 05       	cpc	r24, r1
    41b0:	91 05       	cpc	r25, r1
    41b2:	68 f3       	brcs	.-38     	; 0x418e <__DATA_REGION_LENGTH__+0x18e>
    41b4:	f8 94       	cli
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:101
  // while data is being issued to the LEDs, so no other code will be
  // accessing the PORT.  The code takes an initial 'snapshot' of the PORT
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  noInterrupts(); // Need 100% focus on instruction timing
    41b6:	80 91 04 4e 	lds	r24, 0x4E04	; 0x804e04 <leds+0x2>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:111
  // Dx-series parts. This is by no means intended to imply that they will
  // run at those speeds, only that - if they do - you can control WS2812s
  // with them.

  volatile uint16_t
    i   = numBytes; // Loop counter
    41ba:	90 91 05 4e 	lds	r25, 0x4E05	; 0x804e05 <leds+0x3>
    41be:	89 83       	std	Y+1, r24	; 0x01
    41c0:	9a 83       	std	Y+2, r25	; 0x02
    41c2:	a0 91 08 4e 	lds	r26, 0x4E08	; 0x804e08 <leds+0x6>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:113
  volatile uint8_t
   *ptr = pixels,   // Pointer to next byte
    41c6:	b0 91 09 4e 	lds	r27, 0x4E09	; 0x804e09 <leds+0x7>
    41ca:	fd 01       	movw	r30, r26
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:114
    b   = *ptr++,   // Current byte value
    41cc:	31 96       	adiw	r30, 0x01	; 1
    41ce:	8c 91       	ld	r24, X
    41d0:	8f 83       	std	Y+7, r24	; 0x07
    41d2:	a0 91 12 4e 	lds	r26, 0x4E12	; 0x804e12 <leds+0x10>
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:485
    // 30 inst. clocks per bit: HHHHHHHxxxxxxxxLLLLLLLLLL
    // ST instructions:         ^      ^       ^       (T=0,9,18)

    volatile uint8_t next, bit;

    hi   = *port |  pinMask;
    41d6:	b0 91 13 4e 	lds	r27, 0x4E13	; 0x804e13 <leds+0x11>
    41da:	9c 91       	ld	r25, X
    41dc:	80 91 14 4e 	lds	r24, 0x4E14	; 0x804e14 <leds+0x12>
    41e0:	98 2b       	or	r25, r24
    41e2:	9e 83       	std	Y+6, r25	; 0x06
    41e4:	9c 91       	ld	r25, X
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:486
    lo   = *port & ~pinMask;
    41e6:	80 95       	com	r24
    41e8:	89 23       	and	r24, r25
    41ea:	8d 83       	std	Y+5, r24	; 0x05
    41ec:	8d 81       	ldd	r24, Y+5	; 0x05
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:487
    next = lo;
    41ee:	8c 83       	std	Y+4, r24	; 0x04
    41f0:	88 e0       	ldi	r24, 0x08	; 8
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:488
    bit  = 8;
    41f2:	8b 83       	std	Y+3, r24	; 0x03
    41f4:	5e 81       	ldd	r21, Y+6	; 0x06
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:525
      [bit]   "+d" (bit),   /* euhm, no this can't be "any register" if you're gonna LDI to it. */
      [next]  "+r" (next),
      [count] "+w" (i)
    : [port]   "e" (port),  /* We're overwriting the SFR it's pointed at, not to the address of that register. */
      [hi]     "r" (hi),
      [lo]     "r" (lo));
    41f6:	6d 81       	ldd	r22, Y+5	; 0x05
    41f8:	4f 81       	ldd	r20, Y+7	; 0x07
    41fa:	3b 81       	ldd	r19, Y+3	; 0x03
    41fc:	2c 81       	ldd	r18, Y+4	; 0x04
    41fe:	89 81       	ldd	r24, Y+1	; 0x01
    4200:	9a 81       	ldd	r25, Y+2	; 0x02

00004202 <head24>:
    4202:	00 c0       	rjmp	.+0      	; 0x4204 <head24+0x2>
    4204:	5c 93       	st	X, r21
    4206:	47 fd       	sbrc	r20, 7
    4208:	25 2f       	mov	r18, r21
    420a:	44 1f       	adc	r20, r20
    420c:	3a 95       	dec	r19
    420e:	00 c0       	rjmp	.+0      	; 0x4210 <head24+0xe>
    4210:	2c 93       	st	X, r18
    4212:	00 c0       	rjmp	.+0      	; 0x4214 <head24+0x12>
    4214:	26 2f       	mov	r18, r22
    4216:	05 d0       	rcall	.+10     	; 0x4222 <smallerdelay24>
    4218:	6c 93       	st	X, r22
    421a:	21 f0       	breq	.+8      	; 0x4224 <nextbyte24>
    421c:	01 d0       	rcall	.+2      	; 0x4220 <seconddelay24>
    421e:	f1 cf       	rjmp	.-30     	; 0x4202 <head24>

00004220 <seconddelay24>:
    4220:	00 c0       	rjmp	.+0      	; 0x4222 <smallerdelay24>

00004222 <smallerdelay24>:
    4222:	08 95       	ret

00004224 <nextbyte24>:
    4224:	38 e0       	ldi	r19, 0x08	; 8
    4226:	41 91       	ld	r20, Z+
    4228:	00 c0       	rjmp	.+0      	; 0x422a <nextbyte24+0x6>
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	51 f7       	brne	.-44     	; 0x4202 <head24>
    422e:	4f 83       	std	Y+7, r20	; 0x07
    4230:	3b 83       	std	Y+3, r19	; 0x03
    4232:	2c 83       	std	Y+4, r18	; 0x04
    4234:	89 83       	std	Y+1, r24	; 0x01
    4236:	9a 83       	std	Y+2, r25	; 0x02
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:815
#endif

  // END AVR ----------------------------------------------------------------


  interrupts();
    4238:	78 94       	sei
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\tinyNeoPixel_Static/tinyNeoPixel_Static.cpp:817
  #if (!defined(MILLIS_USE_TIMERNONE) && !defined(MILLIS_USE_TIMERRTC) && !defined(MILLIS_USE_TIMERRTC_XTAL) && !defined(MILLIS_USE_TIMERRTC_XOSC))
    endTime = micros();
    423a:	0e 94 89 07 	call	0xf12	; 0xf12 <micros>
    423e:	60 93 0e 4e 	sts	0x4E0E, r22	; 0x804e0e <leds+0xc>
    4242:	70 93 0f 4e 	sts	0x4E0F, r23	; 0x804e0f <leds+0xd>
    4246:	80 93 10 4e 	sts	0x4E10, r24	; 0x804e10 <leds+0xe>
    424a:	90 93 11 4e 	sts	0x4E11, r25	; 0x804e11 <leds+0xf>
digitalWriteFast():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\cores\dxcore/wiring_digital.c:440
    vport->OUT &= ~mask;
  else // CHANGE
    vport->IN = mask;
*/
  if (val == LOW)
    vport->OUT &= ~mask;
    424e:	a8 98       	cbi	0x15, 0	; 21
    4250:	40 c8       	rjmp	.-3968   	; 0x32d2 <main+0x44a>
getFrameDelay():
    4252:	28 e0       	ldi	r18, 0x08	; 8
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:273
  if (currentMode == 1 || currentMode == 0) {
    return 80;
  } else if (currentMode == 3) {
    return 30 + 10 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
  }
  return 30 + 20 * (pgm_read_byte_near(&maxValueRight[currentMode][0]) - currentValueRight[0]);
    4254:	02 9f       	mul	r16, r18
    4256:	f0 01       	movw	r30, r0
    4258:	11 24       	eor	r1, r1
    425a:	ec 5a       	subi	r30, 0xAC	; 172
    425c:	f6 4f       	sbci	r31, 0xF6	; 246
    425e:	84 91       	lpm	r24, Z
    4260:	90 91 81 47 	lds	r25, 0x4781	; 0x804781 <currentValueRight>
    4264:	e8 2f       	mov	r30, r24
    4266:	e9 1b       	sub	r30, r25
    4268:	84 e1       	ldi	r24, 0x14	; 20
    426a:	e8 9f       	mul	r30, r24
    426c:	80 2d       	mov	r24, r0
    426e:	11 24       	eor	r1, r1
    4270:	6b cf       	rjmp	.-298    	; 0x4148 <__DATA_REGION_LENGTH__+0x148>
handleUI():
    4272:	0e 94 fe 07 	call	0xffc	; 0xffc <millis>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:425
            lcd.print(F("Saved mode"));
            lcd.setCursor(5, 1);
            lcd.print(F("cleared"));
            delay(1000);
            UIChanged = 7;
          } else if (lastPressAt && millis() - lastPressAt > 3000) {
    4276:	68 19       	sub	r22, r8
    4278:	79 09       	sbc	r23, r9
    427a:	8a 09       	sbc	r24, r10
    427c:	9b 09       	sbc	r25, r11
    427e:	69 3b       	cpi	r22, 0xB9	; 185
    4280:	7b 40       	sbci	r23, 0x0B	; 11
    4282:	81 05       	cpc	r24, r1
    4284:	91 05       	cpc	r25, r1
    4286:	08 f4       	brcc	.+2      	; 0x428a <nextbyte24+0x66>
    4288:	4a c9       	rjmp	.-3436   	; 0x351e <main+0x696>
    428a:	60 91 89 47 	lds	r22, 0x4789	; 0x804789 <currentMode>
_ZN5EERefC2Eh():
    428e:	8f e0       	ldi	r24, 0x0F	; 15
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:43
 */

struct EERef {

  EERef(const uint8_t index)
    : index(index)                 {}
    4290:	88 87       	std	Y+8, r24	; 0x08
_ZN11EEPROMClass5writeEhh.isra.5():
    4292:	ce 01       	movw	r24, r28
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:221
  }
  uint8_t read(uint8_t idx)              {
    return EERef(idx);
  }
  void write(uint8_t idx, uint8_t val)   {
    (EERef(idx)) = val;
    4294:	08 96       	adiw	r24, 0x08	; 8
    4296:	0e 94 f6 09 	call	0x13ec	; 0x13ec <EERef::operator=(unsigned char)>
    429a:	30 e1       	ldi	r19, 0x10	; 16
    429c:	e3 2e       	mov	r14, r19
    429e:	d1 2c       	mov	r13, r1
    42a0:	c1 2c       	mov	r12, r1
saveMode():
    42a2:	f6 01       	movw	r30, r12
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:366


void saveMode() {
  EEPROM.write(0x0F, currentMode);
  for (byte i = 0; i < 8; i++) {
    EEPROM.write(0x10 + i, currentValueLeft[i]);
    42a4:	e7 58       	subi	r30, 0x87	; 135
    42a6:	f8 4b       	sbci	r31, 0xB8	; 184
    42a8:	60 81       	ld	r22, Z
_ZN5EERefC2Eh():
    42aa:	e8 86       	std	Y+8, r14	; 0x08
_ZN11EEPROMClass5writeEhh.isra.5():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:43
 */

struct EERef {

  EERef(const uint8_t index)
    : index(index)                 {}
    42ac:	ce 01       	movw	r24, r28
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:221
  }
  uint8_t read(uint8_t idx)              {
    return EERef(idx);
  }
  void write(uint8_t idx, uint8_t val)   {
    (EERef(idx)) = val;
    42ae:	08 96       	adiw	r24, 0x08	; 8
    42b0:	0e 94 f6 09 	call	0x13ec	; 0x13ec <EERef::operator=(unsigned char)>
saveMode():
    42b4:	f6 01       	movw	r30, r12
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:367
    EEPROM.write(0x18 + i, currentValueRight[i]);
    42b6:	ef 57       	subi	r30, 0x7F	; 127
    42b8:	f8 4b       	sbci	r31, 0xB8	; 184
    42ba:	60 81       	ld	r22, Z
    42bc:	88 e0       	ldi	r24, 0x08	; 8
    42be:	8e 0d       	add	r24, r14
_ZN5EERefC2Eh():
    42c0:	88 87       	std	Y+8, r24	; 0x08
_ZN11EEPROMClass5writeEhh.isra.5():
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:43
 */

struct EERef {

  EERef(const uint8_t index)
    : index(index)                 {}
    42c2:	ce 01       	movw	r24, r28
C:\Users\Spence\Documents\Arduino\hardware\DxCore\megaavr\libraries\EEPROM\src/EEPROM.h:221
  }
  uint8_t read(uint8_t idx)              {
    return EERef(idx);
  }
  void write(uint8_t idx, uint8_t val)   {
    (EERef(idx)) = val;
    42c4:	08 96       	adiw	r24, 0x08	; 8
    42c6:	0e 94 f6 09 	call	0x13ec	; 0x13ec <EERef::operator=(unsigned char)>
    42ca:	4f ef       	ldi	r20, 0xFF	; 255
    42cc:	c4 1a       	sub	r12, r20
    42ce:	d4 0a       	sbc	r13, r20
    42d0:	e3 94       	inc	r14
saveMode():
    42d2:	58 e1       	ldi	r21, 0x18	; 24
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:365
}


void saveMode() {
  EEPROM.write(0x0F, currentMode);
  for (byte i = 0; i < 8; i++) {
    42d4:	e5 12       	cpse	r14, r21
    42d6:	e5 cf       	rjmp	.-54     	; 0x42a2 <nextbyte24+0x7e>
handleUI():
    42d8:	0e 94 41 08 	call	0x1082	; 0x1082 <hd44780::clear() [clone .constprop.24]>
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:427
            lcd.print(F("cleared"));
            delay(1000);
            UIChanged = 7;
          } else if (lastPressAt && millis() - lastPressAt > 3000) {
            saveMode();
            lcd.clear();
    42dc:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:428
            lcd.setCursor(3, 0);
    42de:	63 e0       	ldi	r22, 0x03	; 3
    42e0:	85 e1       	ldi	r24, 0x15	; 21
    42e2:	9e e4       	ldi	r25, 0x4E	; 78
    42e4:	0e 94 45 08 	call	0x108a	; 0x108a <hd44780::setCursor(unsigned char, unsigned char)>
    42e8:	64 ec       	ldi	r22, 0xC4	; 196
C:\Users\Spence\Documents\Electronics\DriftAnimate\DriftAnimate_V2/DriftAnimate_V2.ino:429
            lcd.print(F("Mode Saved"));
    42ea:	76 e0       	ldi	r23, 0x06	; 6
    42ec:	0c c9       	rjmp	.-3560   	; 0x3506 <main+0x67e>

000042ee <random_r>:
random_r():
    42ee:	8f 92       	push	r8
    42f0:	9f 92       	push	r9
    42f2:	af 92       	push	r10
    42f4:	bf 92       	push	r11
    42f6:	cf 92       	push	r12
    42f8:	df 92       	push	r13
    42fa:	ef 92       	push	r14
    42fc:	ff 92       	push	r15
    42fe:	cf 93       	push	r28
    4300:	df 93       	push	r29
    4302:	ec 01       	movw	r28, r24
    4304:	68 81       	ld	r22, Y
    4306:	79 81       	ldd	r23, Y+1	; 0x01
    4308:	8a 81       	ldd	r24, Y+2	; 0x02
    430a:	9b 81       	ldd	r25, Y+3	; 0x03
    430c:	61 15       	cp	r22, r1
    430e:	71 05       	cpc	r23, r1
    4310:	81 05       	cpc	r24, r1
    4312:	91 05       	cpc	r25, r1
    4314:	21 f4       	brne	.+8      	; 0x431e <random_r+0x30>
    4316:	64 e2       	ldi	r22, 0x24	; 36
    4318:	79 ed       	ldi	r23, 0xD9	; 217
    431a:	8b e5       	ldi	r24, 0x5B	; 91
    431c:	97 e0       	ldi	r25, 0x07	; 7
    431e:	2d e1       	ldi	r18, 0x1D	; 29
    4320:	33 ef       	ldi	r19, 0xF3	; 243
    4322:	41 e0       	ldi	r20, 0x01	; 1
    4324:	50 e0       	ldi	r21, 0x00	; 0
    4326:	81 d0       	rcall	.+258    	; 0x442a <__divmodsi4>
    4328:	49 01       	movw	r8, r18
    432a:	5a 01       	movw	r10, r20
    432c:	9b 01       	movw	r18, r22
    432e:	ac 01       	movw	r20, r24
    4330:	a7 ea       	ldi	r26, 0xA7	; 167
    4332:	b1 e4       	ldi	r27, 0x41	; 65
    4334:	96 d0       	rcall	.+300    	; 0x4462 <__muluhisi3>
    4336:	6b 01       	movw	r12, r22
    4338:	7c 01       	movw	r14, r24
    433a:	ac ee       	ldi	r26, 0xEC	; 236
    433c:	b4 ef       	ldi	r27, 0xF4	; 244
    433e:	a5 01       	movw	r20, r10
    4340:	94 01       	movw	r18, r8
    4342:	9b d0       	rcall	.+310    	; 0x447a <__mulohisi3>
    4344:	c6 0e       	add	r12, r22
    4346:	d7 1e       	adc	r13, r23
    4348:	e8 1e       	adc	r14, r24
    434a:	f9 1e       	adc	r15, r25
    434c:	f7 fe       	sbrs	r15, 7
    434e:	06 c0       	rjmp	.+12     	; 0x435c <random_r+0x6e>
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	c8 1a       	sub	r12, r24
    4354:	d1 08       	sbc	r13, r1
    4356:	e1 08       	sbc	r14, r1
    4358:	80 e8       	ldi	r24, 0x80	; 128
    435a:	f8 0a       	sbc	r15, r24
    435c:	c8 82       	st	Y, r12
    435e:	d9 82       	std	Y+1, r13	; 0x01
    4360:	ea 82       	std	Y+2, r14	; 0x02
    4362:	fb 82       	std	Y+3, r15	; 0x03
    4364:	c7 01       	movw	r24, r14
    4366:	b6 01       	movw	r22, r12
    4368:	9f 77       	andi	r25, 0x7F	; 127
    436a:	df 91       	pop	r29
    436c:	cf 91       	pop	r28
    436e:	ff 90       	pop	r15
    4370:	ef 90       	pop	r14
    4372:	df 90       	pop	r13
    4374:	cf 90       	pop	r12
    4376:	bf 90       	pop	r11
    4378:	af 90       	pop	r10
    437a:	9f 90       	pop	r9
    437c:	8f 90       	pop	r8
    437e:	08 95       	ret

00004380 <random>:
random():
    4380:	8f 92       	push	r8
    4382:	9f 92       	push	r9
    4384:	af 92       	push	r10
    4386:	bf 92       	push	r11
    4388:	cf 92       	push	r12
    438a:	df 92       	push	r13
    438c:	ef 92       	push	r14
    438e:	ff 92       	push	r15
    4390:	60 91 07 40 	lds	r22, 0x4007	; 0x804007 <next>
    4394:	70 91 08 40 	lds	r23, 0x4008	; 0x804008 <next+0x1>
    4398:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <next+0x2>
    439c:	90 91 0a 40 	lds	r25, 0x400A	; 0x80400a <next+0x3>
    43a0:	61 15       	cp	r22, r1
    43a2:	71 05       	cpc	r23, r1
    43a4:	81 05       	cpc	r24, r1
    43a6:	91 05       	cpc	r25, r1
    43a8:	21 f4       	brne	.+8      	; 0x43b2 <random+0x32>
    43aa:	64 e2       	ldi	r22, 0x24	; 36
    43ac:	79 ed       	ldi	r23, 0xD9	; 217
    43ae:	8b e5       	ldi	r24, 0x5B	; 91
    43b0:	97 e0       	ldi	r25, 0x07	; 7
    43b2:	2d e1       	ldi	r18, 0x1D	; 29
    43b4:	33 ef       	ldi	r19, 0xF3	; 243
    43b6:	41 e0       	ldi	r20, 0x01	; 1
    43b8:	50 e0       	ldi	r21, 0x00	; 0
    43ba:	37 d0       	rcall	.+110    	; 0x442a <__divmodsi4>
    43bc:	49 01       	movw	r8, r18
    43be:	5a 01       	movw	r10, r20
    43c0:	9b 01       	movw	r18, r22
    43c2:	ac 01       	movw	r20, r24
    43c4:	a7 ea       	ldi	r26, 0xA7	; 167
    43c6:	b1 e4       	ldi	r27, 0x41	; 65
    43c8:	4c d0       	rcall	.+152    	; 0x4462 <__muluhisi3>
    43ca:	6b 01       	movw	r12, r22
    43cc:	7c 01       	movw	r14, r24
    43ce:	ac ee       	ldi	r26, 0xEC	; 236
    43d0:	b4 ef       	ldi	r27, 0xF4	; 244
    43d2:	a5 01       	movw	r20, r10
    43d4:	94 01       	movw	r18, r8
    43d6:	51 d0       	rcall	.+162    	; 0x447a <__mulohisi3>
    43d8:	c6 0e       	add	r12, r22
    43da:	d7 1e       	adc	r13, r23
    43dc:	e8 1e       	adc	r14, r24
    43de:	f9 1e       	adc	r15, r25
    43e0:	f7 fe       	sbrs	r15, 7
    43e2:	06 c0       	rjmp	.+12     	; 0x43f0 <random+0x70>
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	c8 1a       	sub	r12, r24
    43e8:	d1 08       	sbc	r13, r1
    43ea:	e1 08       	sbc	r14, r1
    43ec:	80 e8       	ldi	r24, 0x80	; 128
    43ee:	f8 0a       	sbc	r15, r24
    43f0:	c0 92 07 40 	sts	0x4007, r12	; 0x804007 <next>
    43f4:	d0 92 08 40 	sts	0x4008, r13	; 0x804008 <next+0x1>
    43f8:	e0 92 09 40 	sts	0x4009, r14	; 0x804009 <next+0x2>
    43fc:	f0 92 0a 40 	sts	0x400A, r15	; 0x80400a <next+0x3>
    4400:	c7 01       	movw	r24, r14
    4402:	b6 01       	movw	r22, r12
    4404:	9f 77       	andi	r25, 0x7F	; 127
    4406:	ff 90       	pop	r15
    4408:	ef 90       	pop	r14
    440a:	df 90       	pop	r13
    440c:	cf 90       	pop	r12
    440e:	bf 90       	pop	r11
    4410:	af 90       	pop	r10
    4412:	9f 90       	pop	r9
    4414:	8f 90       	pop	r8
    4416:	08 95       	ret

00004418 <srandom>:
srandom():
    4418:	60 93 07 40 	sts	0x4007, r22	; 0x804007 <next>
    441c:	70 93 08 40 	sts	0x4008, r23	; 0x804008 <next+0x1>
    4420:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <next+0x2>
    4424:	90 93 0a 40 	sts	0x400A, r25	; 0x80400a <next+0x3>
    4428:	08 95       	ret

0000442a <__divmodsi4>:
__divmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    442a:	05 2e       	mov	r0, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    442c:	97 fb       	bst	r25, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    442e:	16 f4       	brtc	.+4      	; 0x4434 <__divmodsi4+0xa>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    4430:	00 94       	com	r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    4432:	0f d0       	rcall	.+30     	; 0x4452 <__negsi2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    4434:	57 fd       	sbrc	r21, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    4436:	05 d0       	rcall	.+10     	; 0x4442 <__divmodsi4_neg2>
    4438:	24 d0       	rcall	.+72     	; 0x4482 <__udivmodsi4>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    443a:	07 fc       	sbrc	r0, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    443c:	02 d0       	rcall	.+4      	; 0x4442 <__divmodsi4_neg2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    443e:	46 f4       	brtc	.+16     	; 0x4450 <__divmodsi4_exit>
    4440:	08 c0       	rjmp	.+16     	; 0x4452 <__negsi2>

00004442 <__divmodsi4_neg2>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    4442:	50 95       	com	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    4444:	40 95       	com	r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    4446:	30 95       	com	r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    4448:	21 95       	neg	r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    444a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    444c:	4f 4f       	sbci	r20, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    444e:	5f 4f       	sbci	r21, 0xFF	; 255

00004450 <__divmodsi4_exit>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    4450:	08 95       	ret

00004452 <__negsi2>:
__negsi2():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    4452:	90 95       	com	r25
    4454:	80 95       	com	r24
    4456:	70 95       	com	r23
    4458:	61 95       	neg	r22
    445a:	7f 4f       	sbci	r23, 0xFF	; 255
    445c:	8f 4f       	sbci	r24, 0xFF	; 255
    445e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    4460:	08 95       	ret

00004462 <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    4462:	31 d0       	rcall	.+98     	; 0x44c6 <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    4464:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    4466:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    4468:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    446a:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    446c:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    446e:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    4470:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    4472:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    4474:	08 95       	ret

00004476 <__mulshisi3>:
__mulshisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    4476:	b7 ff       	sbrs	r27, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    4478:	f4 cf       	rjmp	.-24     	; 0x4462 <__muluhisi3>

0000447a <__mulohisi3>:
__mulohisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    447a:	f3 df       	rcall	.-26     	; 0x4462 <__muluhisi3>
    447c:	82 1b       	sub	r24, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    447e:	93 0b       	sbc	r25, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    4480:	08 95       	ret

00004482 <__udivmodsi4>:
__udivmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    4482:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    4484:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    4486:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    4488:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    448a:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    448c:	0d c0       	rjmp	.+26     	; 0x44a8 <__udivmodsi4_ep>

0000448e <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    448e:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    4490:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    4492:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    4494:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    4496:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    4498:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    449a:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    449c:	f5 07       	cpc	r31, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    449e:	20 f0       	brcs	.+8      	; 0x44a8 <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    44a0:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    44a2:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    44a4:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    44a6:	f5 0b       	sbc	r31, r21

000044a8 <__udivmodsi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    44a8:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    44aa:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    44ac:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    44ae:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    44b0:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    44b2:	69 f7       	brne	.-38     	; 0x448e <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    44b4:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    44b6:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    44b8:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    44ba:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    44bc:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    44be:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    44c0:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    44c2:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    44c4:	08 95       	ret

000044c6 <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    44c6:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    44c8:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    44ca:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    44cc:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    44ce:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    44d0:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    44d2:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    44d4:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    44d6:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    44d8:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    44da:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    44dc:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    44de:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    44e0:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    44e2:	08 95       	ret

000044e4 <__subsf3>:
__subsf3():
    44e4:	50 58       	subi	r21, 0x80	; 128

000044e6 <__addsf3>:
    44e6:	bb 27       	eor	r27, r27
    44e8:	aa 27       	eor	r26, r26
    44ea:	0e d0       	rcall	.+28     	; 0x4508 <__addsf3x>
    44ec:	70 c1       	rjmp	.+736    	; 0x47ce <__fp_round>
__addsf3():
    44ee:	61 d1       	rcall	.+706    	; 0x47b2 <__fp_pscA>
    44f0:	30 f0       	brcs	.+12     	; 0x44fe <__addsf3+0x18>
    44f2:	66 d1       	rcall	.+716    	; 0x47c0 <__fp_pscB>
    44f4:	20 f0       	brcs	.+8      	; 0x44fe <__addsf3+0x18>
    44f6:	31 f4       	brne	.+12     	; 0x4504 <__addsf3+0x1e>
    44f8:	9f 3f       	cpi	r25, 0xFF	; 255
    44fa:	11 f4       	brne	.+4      	; 0x4500 <__addsf3+0x1a>
    44fc:	1e f4       	brtc	.+6      	; 0x4504 <__addsf3+0x1e>
    44fe:	56 c1       	rjmp	.+684    	; 0x47ac <__fp_nan>
    4500:	0e f4       	brtc	.+2      	; 0x4504 <__addsf3+0x1e>
    4502:	e0 95       	com	r30
    4504:	e7 fb       	bst	r30, 7
    4506:	4c c1       	rjmp	.+664    	; 0x47a0 <__fp_inf>

00004508 <__addsf3x>:
__addsf3x():
    4508:	e9 2f       	mov	r30, r25
    450a:	72 d1       	rcall	.+740    	; 0x47f0 <__fp_split3>
    450c:	80 f3       	brcs	.-32     	; 0x44ee <__addsf3+0x8>
    450e:	ba 17       	cp	r27, r26
    4510:	62 07       	cpc	r22, r18
    4512:	73 07       	cpc	r23, r19
    4514:	84 07       	cpc	r24, r20
    4516:	95 07       	cpc	r25, r21
    4518:	18 f0       	brcs	.+6      	; 0x4520 <__addsf3x+0x18>
    451a:	71 f4       	brne	.+28     	; 0x4538 <__addsf3x+0x30>
    451c:	9e f5       	brtc	.+102    	; 0x4584 <__addsf3x+0x7c>
    451e:	8a c1       	rjmp	.+788    	; 0x4834 <__fp_zero>
    4520:	0e f4       	brtc	.+2      	; 0x4524 <__addsf3x+0x1c>
    4522:	e0 95       	com	r30
    4524:	0b 2e       	mov	r0, r27
    4526:	ba 2f       	mov	r27, r26
    4528:	a0 2d       	mov	r26, r0
    452a:	0b 01       	movw	r0, r22
    452c:	b9 01       	movw	r22, r18
    452e:	90 01       	movw	r18, r0
    4530:	0c 01       	movw	r0, r24
    4532:	ca 01       	movw	r24, r20
    4534:	a0 01       	movw	r20, r0
    4536:	11 24       	eor	r1, r1
    4538:	ff 27       	eor	r31, r31
    453a:	59 1b       	sub	r21, r25
    453c:	99 f0       	breq	.+38     	; 0x4564 <__addsf3x+0x5c>
    453e:	59 3f       	cpi	r21, 0xF9	; 249
    4540:	50 f4       	brcc	.+20     	; 0x4556 <__addsf3x+0x4e>
    4542:	50 3e       	cpi	r21, 0xE0	; 224
    4544:	68 f1       	brcs	.+90     	; 0x45a0 <__addsf3x+0x98>
    4546:	1a 16       	cp	r1, r26
    4548:	f0 40       	sbci	r31, 0x00	; 0
    454a:	a2 2f       	mov	r26, r18
    454c:	23 2f       	mov	r18, r19
    454e:	34 2f       	mov	r19, r20
    4550:	44 27       	eor	r20, r20
    4552:	58 5f       	subi	r21, 0xF8	; 248
    4554:	f3 cf       	rjmp	.-26     	; 0x453c <__addsf3x+0x34>
    4556:	46 95       	lsr	r20
    4558:	37 95       	ror	r19
    455a:	27 95       	ror	r18
    455c:	a7 95       	ror	r26
    455e:	f0 40       	sbci	r31, 0x00	; 0
    4560:	53 95       	inc	r21
    4562:	c9 f7       	brne	.-14     	; 0x4556 <__addsf3x+0x4e>
    4564:	7e f4       	brtc	.+30     	; 0x4584 <__addsf3x+0x7c>
    4566:	1f 16       	cp	r1, r31
    4568:	ba 0b       	sbc	r27, r26
    456a:	62 0b       	sbc	r22, r18
    456c:	73 0b       	sbc	r23, r19
    456e:	84 0b       	sbc	r24, r20
    4570:	ba f0       	brmi	.+46     	; 0x45a0 <__addsf3x+0x98>
    4572:	91 50       	subi	r25, 0x01	; 1
    4574:	a1 f0       	breq	.+40     	; 0x459e <__addsf3x+0x96>
    4576:	ff 0f       	add	r31, r31
    4578:	bb 1f       	adc	r27, r27
    457a:	66 1f       	adc	r22, r22
    457c:	77 1f       	adc	r23, r23
    457e:	88 1f       	adc	r24, r24
    4580:	c2 f7       	brpl	.-16     	; 0x4572 <__addsf3x+0x6a>
    4582:	0e c0       	rjmp	.+28     	; 0x45a0 <__addsf3x+0x98>
    4584:	ba 0f       	add	r27, r26
    4586:	62 1f       	adc	r22, r18
    4588:	73 1f       	adc	r23, r19
    458a:	84 1f       	adc	r24, r20
    458c:	48 f4       	brcc	.+18     	; 0x45a0 <__addsf3x+0x98>
    458e:	87 95       	ror	r24
    4590:	77 95       	ror	r23
    4592:	67 95       	ror	r22
    4594:	b7 95       	ror	r27
    4596:	f7 95       	ror	r31
    4598:	9e 3f       	cpi	r25, 0xFE	; 254
    459a:	08 f0       	brcs	.+2      	; 0x459e <__addsf3x+0x96>
    459c:	b3 cf       	rjmp	.-154    	; 0x4504 <__addsf3+0x1e>
    459e:	93 95       	inc	r25
    45a0:	88 0f       	add	r24, r24
    45a2:	08 f0       	brcs	.+2      	; 0x45a6 <__addsf3x+0x9e>
    45a4:	99 27       	eor	r25, r25
    45a6:	ee 0f       	add	r30, r30
    45a8:	97 95       	ror	r25
    45aa:	87 95       	ror	r24
    45ac:	08 95       	ret

000045ae <__cmpsf2>:
    45ae:	d4 d0       	rcall	.+424    	; 0x4758 <__fp_cmp>
    45b0:	08 f4       	brcc	.+2      	; 0x45b4 <__cmpsf2+0x6>
    45b2:	81 e0       	ldi	r24, 0x01	; 1
    45b4:	08 95       	ret

000045b6 <__divsf3>:
    45b6:	0c d0       	rcall	.+24     	; 0x45d0 <__divsf3x>
    45b8:	0a c1       	rjmp	.+532    	; 0x47ce <__fp_round>
    45ba:	02 d1       	rcall	.+516    	; 0x47c0 <__fp_pscB>
    45bc:	40 f0       	brcs	.+16     	; 0x45ce <__divsf3+0x18>
    45be:	f9 d0       	rcall	.+498    	; 0x47b2 <__fp_pscA>
    45c0:	30 f0       	brcs	.+12     	; 0x45ce <__divsf3+0x18>
    45c2:	21 f4       	brne	.+8      	; 0x45cc <__divsf3+0x16>
    45c4:	5f 3f       	cpi	r21, 0xFF	; 255
    45c6:	19 f0       	breq	.+6      	; 0x45ce <__divsf3+0x18>
    45c8:	eb c0       	rjmp	.+470    	; 0x47a0 <__fp_inf>
    45ca:	51 11       	cpse	r21, r1
    45cc:	34 c1       	rjmp	.+616    	; 0x4836 <__fp_szero>
    45ce:	ee c0       	rjmp	.+476    	; 0x47ac <__fp_nan>

000045d0 <__divsf3x>:
    45d0:	0f d1       	rcall	.+542    	; 0x47f0 <__fp_split3>
    45d2:	98 f3       	brcs	.-26     	; 0x45ba <__divsf3+0x4>

000045d4 <__divsf3_pse>:
__divsf3_pse():
    45d4:	99 23       	and	r25, r25
    45d6:	c9 f3       	breq	.-14     	; 0x45ca <__divsf3+0x14>
    45d8:	55 23       	and	r21, r21
    45da:	b1 f3       	breq	.-20     	; 0x45c8 <__divsf3+0x12>
    45dc:	95 1b       	sub	r25, r21
    45de:	55 0b       	sbc	r21, r21
    45e0:	bb 27       	eor	r27, r27
    45e2:	aa 27       	eor	r26, r26
    45e4:	62 17       	cp	r22, r18
    45e6:	73 07       	cpc	r23, r19
    45e8:	84 07       	cpc	r24, r20
    45ea:	38 f0       	brcs	.+14     	; 0x45fa <__divsf3_pse+0x26>
    45ec:	9f 5f       	subi	r25, 0xFF	; 255
    45ee:	5f 4f       	sbci	r21, 0xFF	; 255
    45f0:	22 0f       	add	r18, r18
    45f2:	33 1f       	adc	r19, r19
    45f4:	44 1f       	adc	r20, r20
    45f6:	aa 1f       	adc	r26, r26
    45f8:	a9 f3       	breq	.-22     	; 0x45e4 <__divsf3_pse+0x10>
    45fa:	33 d0       	rcall	.+102    	; 0x4662 <__divsf3_pse+0x8e>
    45fc:	0e 2e       	mov	r0, r30
    45fe:	3a f0       	brmi	.+14     	; 0x460e <__divsf3_pse+0x3a>
    4600:	e0 e8       	ldi	r30, 0x80	; 128
    4602:	30 d0       	rcall	.+96     	; 0x4664 <__divsf3_pse+0x90>
    4604:	91 50       	subi	r25, 0x01	; 1
    4606:	50 40       	sbci	r21, 0x00	; 0
    4608:	e6 95       	lsr	r30
    460a:	00 1c       	adc	r0, r0
    460c:	ca f7       	brpl	.-14     	; 0x4600 <__divsf3_pse+0x2c>
    460e:	29 d0       	rcall	.+82     	; 0x4662 <__divsf3_pse+0x8e>
    4610:	fe 2f       	mov	r31, r30
    4612:	27 d0       	rcall	.+78     	; 0x4662 <__divsf3_pse+0x8e>
    4614:	66 0f       	add	r22, r22
    4616:	77 1f       	adc	r23, r23
    4618:	88 1f       	adc	r24, r24
    461a:	bb 1f       	adc	r27, r27
    461c:	26 17       	cp	r18, r22
    461e:	37 07       	cpc	r19, r23
    4620:	48 07       	cpc	r20, r24
    4622:	ab 07       	cpc	r26, r27
    4624:	b0 e8       	ldi	r27, 0x80	; 128
    4626:	09 f0       	breq	.+2      	; 0x462a <__divsf3_pse+0x56>
    4628:	bb 0b       	sbc	r27, r27
    462a:	80 2d       	mov	r24, r0
    462c:	bf 01       	movw	r22, r30
    462e:	ff 27       	eor	r31, r31
    4630:	93 58       	subi	r25, 0x83	; 131
    4632:	5f 4f       	sbci	r21, 0xFF	; 255
    4634:	2a f0       	brmi	.+10     	; 0x4640 <__divsf3_pse+0x6c>
    4636:	9e 3f       	cpi	r25, 0xFE	; 254
    4638:	51 05       	cpc	r21, r1
    463a:	68 f0       	brcs	.+26     	; 0x4656 <__divsf3_pse+0x82>
    463c:	b1 c0       	rjmp	.+354    	; 0x47a0 <__fp_inf>
    463e:	fb c0       	rjmp	.+502    	; 0x4836 <__fp_szero>
    4640:	5f 3f       	cpi	r21, 0xFF	; 255
    4642:	ec f3       	brlt	.-6      	; 0x463e <__divsf3_pse+0x6a>
    4644:	98 3e       	cpi	r25, 0xE8	; 232
    4646:	dc f3       	brlt	.-10     	; 0x463e <__divsf3_pse+0x6a>
    4648:	86 95       	lsr	r24
    464a:	77 95       	ror	r23
    464c:	67 95       	ror	r22
    464e:	b7 95       	ror	r27
    4650:	f7 95       	ror	r31
    4652:	9f 5f       	subi	r25, 0xFF	; 255
    4654:	c9 f7       	brne	.-14     	; 0x4648 <__divsf3_pse+0x74>
    4656:	88 0f       	add	r24, r24
    4658:	91 1d       	adc	r25, r1
    465a:	96 95       	lsr	r25
    465c:	87 95       	ror	r24
    465e:	97 f9       	bld	r25, 7
    4660:	08 95       	ret
    4662:	e1 e0       	ldi	r30, 0x01	; 1
    4664:	66 0f       	add	r22, r22
    4666:	77 1f       	adc	r23, r23
    4668:	88 1f       	adc	r24, r24
    466a:	bb 1f       	adc	r27, r27
    466c:	62 17       	cp	r22, r18
    466e:	73 07       	cpc	r23, r19
    4670:	84 07       	cpc	r24, r20
    4672:	ba 07       	cpc	r27, r26
    4674:	20 f0       	brcs	.+8      	; 0x467e <__divsf3_pse+0xaa>
    4676:	62 1b       	sub	r22, r18
    4678:	73 0b       	sbc	r23, r19
    467a:	84 0b       	sbc	r24, r20
    467c:	ba 0b       	sbc	r27, r26
    467e:	ee 1f       	adc	r30, r30
    4680:	88 f7       	brcc	.-30     	; 0x4664 <__divsf3_pse+0x90>
    4682:	e0 95       	com	r30
    4684:	08 95       	ret

00004686 <__fixunssfsi>:
__fixunssfsi():
    4686:	bc d0       	rcall	.+376    	; 0x4800 <__fp_splitA>
    4688:	88 f0       	brcs	.+34     	; 0x46ac <__fixunssfsi+0x26>
    468a:	9f 57       	subi	r25, 0x7F	; 127
    468c:	90 f0       	brcs	.+36     	; 0x46b2 <__fixunssfsi+0x2c>
    468e:	b9 2f       	mov	r27, r25
    4690:	99 27       	eor	r25, r25
    4692:	b7 51       	subi	r27, 0x17	; 23
    4694:	a0 f0       	brcs	.+40     	; 0x46be <__fixunssfsi+0x38>
    4696:	d1 f0       	breq	.+52     	; 0x46cc <__fixunssfsi+0x46>
    4698:	66 0f       	add	r22, r22
    469a:	77 1f       	adc	r23, r23
    469c:	88 1f       	adc	r24, r24
    469e:	99 1f       	adc	r25, r25
    46a0:	1a f0       	brmi	.+6      	; 0x46a8 <__fixunssfsi+0x22>
    46a2:	ba 95       	dec	r27
    46a4:	c9 f7       	brne	.-14     	; 0x4698 <__fixunssfsi+0x12>
    46a6:	12 c0       	rjmp	.+36     	; 0x46cc <__fixunssfsi+0x46>
    46a8:	b1 30       	cpi	r27, 0x01	; 1
    46aa:	81 f0       	breq	.+32     	; 0x46cc <__fixunssfsi+0x46>
    46ac:	c3 d0       	rcall	.+390    	; 0x4834 <__fp_zero>
    46ae:	b1 e0       	ldi	r27, 0x01	; 1
    46b0:	08 95       	ret
    46b2:	c0 c0       	rjmp	.+384    	; 0x4834 <__fp_zero>
    46b4:	67 2f       	mov	r22, r23
    46b6:	78 2f       	mov	r23, r24
    46b8:	88 27       	eor	r24, r24
    46ba:	b8 5f       	subi	r27, 0xF8	; 248
    46bc:	39 f0       	breq	.+14     	; 0x46cc <__fixunssfsi+0x46>
    46be:	b9 3f       	cpi	r27, 0xF9	; 249
    46c0:	cc f3       	brlt	.-14     	; 0x46b4 <__fixunssfsi+0x2e>
    46c2:	86 95       	lsr	r24
    46c4:	77 95       	ror	r23
    46c6:	67 95       	ror	r22
    46c8:	b3 95       	inc	r27
    46ca:	d9 f7       	brne	.-10     	; 0x46c2 <__fixunssfsi+0x3c>
    46cc:	3e f4       	brtc	.+14     	; 0x46dc <__fixunssfsi+0x56>
    46ce:	90 95       	com	r25
    46d0:	80 95       	com	r24
    46d2:	70 95       	com	r23
    46d4:	61 95       	neg	r22
    46d6:	7f 4f       	sbci	r23, 0xFF	; 255
    46d8:	8f 4f       	sbci	r24, 0xFF	; 255
    46da:	9f 4f       	sbci	r25, 0xFF	; 255
    46dc:	08 95       	ret

000046de <__floatunsisf>:
__floatunsisf():
    46de:	e8 94       	clt
    46e0:	09 c0       	rjmp	.+18     	; 0x46f4 <__floatsisf+0x12>

000046e2 <__floatsisf>:
    46e2:	97 fb       	bst	r25, 7
    46e4:	3e f4       	brtc	.+14     	; 0x46f4 <__floatsisf+0x12>
    46e6:	90 95       	com	r25
    46e8:	80 95       	com	r24
    46ea:	70 95       	com	r23
    46ec:	61 95       	neg	r22
    46ee:	7f 4f       	sbci	r23, 0xFF	; 255
    46f0:	8f 4f       	sbci	r24, 0xFF	; 255
    46f2:	9f 4f       	sbci	r25, 0xFF	; 255
    46f4:	99 23       	and	r25, r25
    46f6:	a9 f0       	breq	.+42     	; 0x4722 <__floatsisf+0x40>
    46f8:	f9 2f       	mov	r31, r25
    46fa:	96 e9       	ldi	r25, 0x96	; 150
    46fc:	bb 27       	eor	r27, r27
    46fe:	93 95       	inc	r25
    4700:	f6 95       	lsr	r31
    4702:	87 95       	ror	r24
    4704:	77 95       	ror	r23
    4706:	67 95       	ror	r22
    4708:	b7 95       	ror	r27
    470a:	f1 11       	cpse	r31, r1
    470c:	f8 cf       	rjmp	.-16     	; 0x46fe <__floatsisf+0x1c>
    470e:	fa f4       	brpl	.+62     	; 0x474e <__floatsisf+0x6c>
    4710:	bb 0f       	add	r27, r27
    4712:	11 f4       	brne	.+4      	; 0x4718 <__floatsisf+0x36>
    4714:	60 ff       	sbrs	r22, 0
    4716:	1b c0       	rjmp	.+54     	; 0x474e <__floatsisf+0x6c>
    4718:	6f 5f       	subi	r22, 0xFF	; 255
    471a:	7f 4f       	sbci	r23, 0xFF	; 255
    471c:	8f 4f       	sbci	r24, 0xFF	; 255
    471e:	9f 4f       	sbci	r25, 0xFF	; 255
    4720:	16 c0       	rjmp	.+44     	; 0x474e <__floatsisf+0x6c>
    4722:	88 23       	and	r24, r24
    4724:	11 f0       	breq	.+4      	; 0x472a <__floatsisf+0x48>
    4726:	96 e9       	ldi	r25, 0x96	; 150
    4728:	11 c0       	rjmp	.+34     	; 0x474c <__floatsisf+0x6a>
    472a:	77 23       	and	r23, r23
    472c:	21 f0       	breq	.+8      	; 0x4736 <__floatsisf+0x54>
    472e:	9e e8       	ldi	r25, 0x8E	; 142
    4730:	87 2f       	mov	r24, r23
    4732:	76 2f       	mov	r23, r22
    4734:	05 c0       	rjmp	.+10     	; 0x4740 <__floatsisf+0x5e>
    4736:	66 23       	and	r22, r22
    4738:	71 f0       	breq	.+28     	; 0x4756 <__floatsisf+0x74>
    473a:	96 e8       	ldi	r25, 0x86	; 134
    473c:	86 2f       	mov	r24, r22
    473e:	70 e0       	ldi	r23, 0x00	; 0
    4740:	60 e0       	ldi	r22, 0x00	; 0
    4742:	2a f0       	brmi	.+10     	; 0x474e <__floatsisf+0x6c>
    4744:	9a 95       	dec	r25
    4746:	66 0f       	add	r22, r22
    4748:	77 1f       	adc	r23, r23
    474a:	88 1f       	adc	r24, r24
    474c:	da f7       	brpl	.-10     	; 0x4744 <__floatsisf+0x62>
    474e:	88 0f       	add	r24, r24
    4750:	96 95       	lsr	r25
    4752:	87 95       	ror	r24
    4754:	97 f9       	bld	r25, 7
    4756:	08 95       	ret

00004758 <__fp_cmp>:
__fp_cmp():
    4758:	99 0f       	add	r25, r25
    475a:	00 08       	sbc	r0, r0
    475c:	55 0f       	add	r21, r21
    475e:	aa 0b       	sbc	r26, r26
    4760:	e0 e8       	ldi	r30, 0x80	; 128
    4762:	fe ef       	ldi	r31, 0xFE	; 254
    4764:	16 16       	cp	r1, r22
    4766:	17 06       	cpc	r1, r23
    4768:	e8 07       	cpc	r30, r24
    476a:	f9 07       	cpc	r31, r25
    476c:	c0 f0       	brcs	.+48     	; 0x479e <__fp_cmp+0x46>
    476e:	12 16       	cp	r1, r18
    4770:	13 06       	cpc	r1, r19
    4772:	e4 07       	cpc	r30, r20
    4774:	f5 07       	cpc	r31, r21
    4776:	98 f0       	brcs	.+38     	; 0x479e <__fp_cmp+0x46>
    4778:	62 1b       	sub	r22, r18
    477a:	73 0b       	sbc	r23, r19
    477c:	84 0b       	sbc	r24, r20
    477e:	95 0b       	sbc	r25, r21
    4780:	39 f4       	brne	.+14     	; 0x4790 <__fp_cmp+0x38>
    4782:	0a 26       	eor	r0, r26
    4784:	61 f0       	breq	.+24     	; 0x479e <__fp_cmp+0x46>
    4786:	23 2b       	or	r18, r19
    4788:	24 2b       	or	r18, r20
    478a:	25 2b       	or	r18, r21
    478c:	21 f4       	brne	.+8      	; 0x4796 <__fp_cmp+0x3e>
    478e:	08 95       	ret
    4790:	0a 26       	eor	r0, r26
    4792:	09 f4       	brne	.+2      	; 0x4796 <__fp_cmp+0x3e>
    4794:	a1 40       	sbci	r26, 0x01	; 1
    4796:	a6 95       	lsr	r26
    4798:	8f ef       	ldi	r24, 0xFF	; 255
    479a:	81 1d       	adc	r24, r1
    479c:	81 1d       	adc	r24, r1
    479e:	08 95       	ret

000047a0 <__fp_inf>:
__fp_inf():
    47a0:	97 f9       	bld	r25, 7
    47a2:	9f 67       	ori	r25, 0x7F	; 127
    47a4:	80 e8       	ldi	r24, 0x80	; 128
    47a6:	70 e0       	ldi	r23, 0x00	; 0
    47a8:	60 e0       	ldi	r22, 0x00	; 0
    47aa:	08 95       	ret

000047ac <__fp_nan>:
__fp_nan():
    47ac:	9f ef       	ldi	r25, 0xFF	; 255
    47ae:	80 ec       	ldi	r24, 0xC0	; 192
    47b0:	08 95       	ret

000047b2 <__fp_pscA>:
__fp_pscA():
    47b2:	00 24       	eor	r0, r0
    47b4:	0a 94       	dec	r0
    47b6:	16 16       	cp	r1, r22
    47b8:	17 06       	cpc	r1, r23
    47ba:	18 06       	cpc	r1, r24
    47bc:	09 06       	cpc	r0, r25
    47be:	08 95       	ret

000047c0 <__fp_pscB>:
__fp_pscB():
    47c0:	00 24       	eor	r0, r0
    47c2:	0a 94       	dec	r0
    47c4:	12 16       	cp	r1, r18
    47c6:	13 06       	cpc	r1, r19
    47c8:	14 06       	cpc	r1, r20
    47ca:	05 06       	cpc	r0, r21
    47cc:	08 95       	ret

000047ce <__fp_round>:
__fp_round():
    47ce:	09 2e       	mov	r0, r25
    47d0:	03 94       	inc	r0
    47d2:	00 0c       	add	r0, r0
    47d4:	11 f4       	brne	.+4      	; 0x47da <__fp_round+0xc>
    47d6:	88 23       	and	r24, r24
    47d8:	52 f0       	brmi	.+20     	; 0x47ee <__fp_round+0x20>
    47da:	bb 0f       	add	r27, r27
    47dc:	40 f4       	brcc	.+16     	; 0x47ee <__fp_round+0x20>
    47de:	bf 2b       	or	r27, r31
    47e0:	11 f4       	brne	.+4      	; 0x47e6 <__fp_round+0x18>
    47e2:	60 ff       	sbrs	r22, 0
    47e4:	04 c0       	rjmp	.+8      	; 0x47ee <__fp_round+0x20>
    47e6:	6f 5f       	subi	r22, 0xFF	; 255
    47e8:	7f 4f       	sbci	r23, 0xFF	; 255
    47ea:	8f 4f       	sbci	r24, 0xFF	; 255
    47ec:	9f 4f       	sbci	r25, 0xFF	; 255
    47ee:	08 95       	ret

000047f0 <__fp_split3>:
__fp_split3():
    47f0:	57 fd       	sbrc	r21, 7
    47f2:	90 58       	subi	r25, 0x80	; 128
    47f4:	44 0f       	add	r20, r20
    47f6:	55 1f       	adc	r21, r21
    47f8:	59 f0       	breq	.+22     	; 0x4810 <__fp_splitA+0x10>
    47fa:	5f 3f       	cpi	r21, 0xFF	; 255
    47fc:	71 f0       	breq	.+28     	; 0x481a <__fp_splitA+0x1a>
    47fe:	47 95       	ror	r20

00004800 <__fp_splitA>:
    4800:	88 0f       	add	r24, r24
    4802:	97 fb       	bst	r25, 7
    4804:	99 1f       	adc	r25, r25
    4806:	61 f0       	breq	.+24     	; 0x4820 <__fp_splitA+0x20>
    4808:	9f 3f       	cpi	r25, 0xFF	; 255
    480a:	79 f0       	breq	.+30     	; 0x482a <__fp_splitA+0x2a>
    480c:	87 95       	ror	r24
    480e:	08 95       	ret
    4810:	12 16       	cp	r1, r18
    4812:	13 06       	cpc	r1, r19
    4814:	14 06       	cpc	r1, r20
    4816:	55 1f       	adc	r21, r21
    4818:	f2 cf       	rjmp	.-28     	; 0x47fe <__fp_split3+0xe>
    481a:	46 95       	lsr	r20
    481c:	f1 df       	rcall	.-30     	; 0x4800 <__fp_splitA>
    481e:	08 c0       	rjmp	.+16     	; 0x4830 <__fp_splitA+0x30>
    4820:	16 16       	cp	r1, r22
    4822:	17 06       	cpc	r1, r23
    4824:	18 06       	cpc	r1, r24
    4826:	99 1f       	adc	r25, r25
    4828:	f1 cf       	rjmp	.-30     	; 0x480c <__fp_splitA+0xc>
    482a:	86 95       	lsr	r24
    482c:	71 05       	cpc	r23, r1
    482e:	61 05       	cpc	r22, r1
    4830:	08 94       	sec
    4832:	08 95       	ret

00004834 <__fp_zero>:
__fp_zero():
    4834:	e8 94       	clt

00004836 <__fp_szero>:
    4836:	bb 27       	eor	r27, r27
    4838:	66 27       	eor	r22, r22
    483a:	77 27       	eor	r23, r23
    483c:	cb 01       	movw	r24, r22
    483e:	97 f9       	bld	r25, 7
    4840:	08 95       	ret

00004842 <__gesf2>:
__gesf2():
    4842:	8a df       	rcall	.-236    	; 0x4758 <__fp_cmp>
    4844:	08 f4       	brcc	.+2      	; 0x4848 <__gesf2+0x6>
    4846:	8f ef       	ldi	r24, 0xFF	; 255
    4848:	08 95       	ret

0000484a <__mulsf3>:
__mulsf3():
    484a:	0b d0       	rcall	.+22     	; 0x4862 <__mulsf3x>
    484c:	c0 cf       	rjmp	.-128    	; 0x47ce <__fp_round>
    484e:	b1 df       	rcall	.-158    	; 0x47b2 <__fp_pscA>
    4850:	28 f0       	brcs	.+10     	; 0x485c <__mulsf3+0x12>
    4852:	b6 df       	rcall	.-148    	; 0x47c0 <__fp_pscB>
    4854:	18 f0       	brcs	.+6      	; 0x485c <__mulsf3+0x12>
    4856:	95 23       	and	r25, r21
    4858:	09 f0       	breq	.+2      	; 0x485c <__mulsf3+0x12>
    485a:	a2 cf       	rjmp	.-188    	; 0x47a0 <__fp_inf>
    485c:	a7 cf       	rjmp	.-178    	; 0x47ac <__fp_nan>
    485e:	11 24       	eor	r1, r1
    4860:	ea cf       	rjmp	.-44     	; 0x4836 <__fp_szero>

00004862 <__mulsf3x>:
__mulsf3x():
    4862:	c6 df       	rcall	.-116    	; 0x47f0 <__fp_split3>
    4864:	a0 f3       	brcs	.-24     	; 0x484e <__mulsf3+0x4>

00004866 <__mulsf3_pse>:
    4866:	95 9f       	mul	r25, r21
    4868:	d1 f3       	breq	.-12     	; 0x485e <__mulsf3+0x14>
    486a:	95 0f       	add	r25, r21
    486c:	50 e0       	ldi	r21, 0x00	; 0
    486e:	55 1f       	adc	r21, r21
    4870:	62 9f       	mul	r22, r18
    4872:	f0 01       	movw	r30, r0
    4874:	72 9f       	mul	r23, r18
    4876:	bb 27       	eor	r27, r27
    4878:	f0 0d       	add	r31, r0
    487a:	b1 1d       	adc	r27, r1
    487c:	63 9f       	mul	r22, r19
    487e:	aa 27       	eor	r26, r26
    4880:	f0 0d       	add	r31, r0
    4882:	b1 1d       	adc	r27, r1
    4884:	aa 1f       	adc	r26, r26
    4886:	64 9f       	mul	r22, r20
    4888:	66 27       	eor	r22, r22
    488a:	b0 0d       	add	r27, r0
    488c:	a1 1d       	adc	r26, r1
    488e:	66 1f       	adc	r22, r22
    4890:	82 9f       	mul	r24, r18
    4892:	22 27       	eor	r18, r18
    4894:	b0 0d       	add	r27, r0
    4896:	a1 1d       	adc	r26, r1
    4898:	62 1f       	adc	r22, r18
    489a:	73 9f       	mul	r23, r19
    489c:	b0 0d       	add	r27, r0
    489e:	a1 1d       	adc	r26, r1
    48a0:	62 1f       	adc	r22, r18
    48a2:	83 9f       	mul	r24, r19
    48a4:	a0 0d       	add	r26, r0
    48a6:	61 1d       	adc	r22, r1
    48a8:	22 1f       	adc	r18, r18
    48aa:	74 9f       	mul	r23, r20
    48ac:	33 27       	eor	r19, r19
    48ae:	a0 0d       	add	r26, r0
    48b0:	61 1d       	adc	r22, r1
    48b2:	23 1f       	adc	r18, r19
    48b4:	84 9f       	mul	r24, r20
    48b6:	60 0d       	add	r22, r0
    48b8:	21 1d       	adc	r18, r1
    48ba:	82 2f       	mov	r24, r18
    48bc:	76 2f       	mov	r23, r22
    48be:	6a 2f       	mov	r22, r26
    48c0:	11 24       	eor	r1, r1
    48c2:	9f 57       	subi	r25, 0x7F	; 127
    48c4:	50 40       	sbci	r21, 0x00	; 0
    48c6:	8a f0       	brmi	.+34     	; 0x48ea <__mulsf3_pse+0x84>
    48c8:	e1 f0       	breq	.+56     	; 0x4902 <__mulsf3_pse+0x9c>
    48ca:	88 23       	and	r24, r24
    48cc:	4a f0       	brmi	.+18     	; 0x48e0 <__mulsf3_pse+0x7a>
    48ce:	ee 0f       	add	r30, r30
    48d0:	ff 1f       	adc	r31, r31
    48d2:	bb 1f       	adc	r27, r27
    48d4:	66 1f       	adc	r22, r22
    48d6:	77 1f       	adc	r23, r23
    48d8:	88 1f       	adc	r24, r24
    48da:	91 50       	subi	r25, 0x01	; 1
    48dc:	50 40       	sbci	r21, 0x00	; 0
    48de:	a9 f7       	brne	.-22     	; 0x48ca <__mulsf3_pse+0x64>
    48e0:	9e 3f       	cpi	r25, 0xFE	; 254
    48e2:	51 05       	cpc	r21, r1
    48e4:	70 f0       	brcs	.+28     	; 0x4902 <__mulsf3_pse+0x9c>
    48e6:	5c cf       	rjmp	.-328    	; 0x47a0 <__fp_inf>
    48e8:	a6 cf       	rjmp	.-180    	; 0x4836 <__fp_szero>
    48ea:	5f 3f       	cpi	r21, 0xFF	; 255
    48ec:	ec f3       	brlt	.-6      	; 0x48e8 <__mulsf3_pse+0x82>
    48ee:	98 3e       	cpi	r25, 0xE8	; 232
    48f0:	dc f3       	brlt	.-10     	; 0x48e8 <__mulsf3_pse+0x82>
    48f2:	86 95       	lsr	r24
    48f4:	77 95       	ror	r23
    48f6:	67 95       	ror	r22
    48f8:	b7 95       	ror	r27
    48fa:	f7 95       	ror	r31
    48fc:	e7 95       	ror	r30
    48fe:	9f 5f       	subi	r25, 0xFF	; 255
    4900:	c1 f7       	brne	.-16     	; 0x48f2 <__mulsf3_pse+0x8c>
    4902:	fe 2b       	or	r31, r30
    4904:	88 0f       	add	r24, r24
    4906:	91 1d       	adc	r25, r1
    4908:	96 95       	lsr	r25
    490a:	87 95       	ror	r24
    490c:	97 f9       	bld	r25, 7
    490e:	08 95       	ret

00004910 <__unordsf2>:
    4910:	23 df       	rcall	.-442    	; 0x4758 <__fp_cmp>
    4912:	88 0b       	sbc	r24, r24
    4914:	99 0b       	sbc	r25, r25
    4916:	08 95       	ret

00004918 <__mulsi3>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    4918:	db 01       	movw	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    491a:	8f 93       	push	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    491c:	9f 93       	push	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    491e:	a1 dd       	rcall	.-1214   	; 0x4462 <__muluhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    4920:	bf 91       	pop	r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    4922:	af 91       	pop	r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    4924:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    4926:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    4928:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    492a:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    492c:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    492e:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    4930:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    4932:	11 24       	eor	r1, r1
__mulsi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    4934:	08 95       	ret

00004936 <__udivmodhi4>:
__udivmodhi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    4936:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    4938:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    493a:	51 e1       	ldi	r21, 0x11	; 17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    493c:	07 c0       	rjmp	.+14     	; 0x494c <__udivmodhi4_ep>

0000493e <__udivmodhi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    493e:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    4940:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    4942:	a6 17       	cp	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    4944:	b7 07       	cpc	r27, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    4946:	10 f0       	brcs	.+4      	; 0x494c <__udivmodhi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    4948:	a6 1b       	sub	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    494a:	b7 0b       	sbc	r27, r23

0000494c <__udivmodhi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    494c:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    494e:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    4950:	5a 95       	dec	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    4952:	a9 f7       	brne	.-22     	; 0x493e <__udivmodhi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    4954:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    4956:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    4958:	bc 01       	movw	r22, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    495a:	cd 01       	movw	r24, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    495c:	08 95       	ret

0000495e <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    495e:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    4960:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    4962:	00 24       	eor	r0, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    4964:	00 1c       	adc	r0, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    4966:	0b be       	out	0x3b, r0	; 59
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    4968:	07 90       	elpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    496a:	f6 91       	elpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    496c:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    496e:	09 94       	ijmp

00004970 <abort>:
abort():
    4970:	81 e0       	ldi	r24, 0x01	; 1
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	f8 94       	cli
    4976:	00 c0       	rjmp	.+0      	; 0x4978 <_exit>

00004978 <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    4978:	f8 94       	cli

0000497a <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    497a:	ff cf       	rjmp	.-2      	; 0x497a <__stop_program>
